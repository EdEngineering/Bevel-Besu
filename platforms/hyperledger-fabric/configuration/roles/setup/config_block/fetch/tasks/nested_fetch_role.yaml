##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

############################################################################################
# This task creates valuefiles for the cli of first peer creator organization
# Creates the CLI and to fetch the latest configuration block to add new config details
############################################################################################

# checking for fabric cli
- name: "Check if fabric cli is already present"
  k8s_info:
    kind: Pod
    namespace: "{{ org.name }}-net"
    kubeconfig: "{{ org.k8s.config_file }}"
    context: "{{ org.k8s.context }}"
    label_selectors:
      - app = cli
  register: existing_cli

# Creeate the value file for creater org first peer
- name: "start cli"
  shell: |
    KUBECONFIG={{ org.k8s.config_file }} helm upgrade --install -f ./build/{{ participantx.name }}/existing_peer_cli_job.yaml {{ peer.name }}-{{ participantx.name }}-cli {{playbook_dir}}/../../../{{org.gitops.chart_source}}/fabric_cli
  when: existing_cli.resources|length == 0

# waiting for fabric cli
- name: "Check if fabric cli is present"
  k8s_info:
    kind: Pod
    namespace: "{{ org.name }}-net"
    kubeconfig: "{{ org.k8s.config_file }}"
    context: "{{ org.k8s.context }}"
    label_selectors:
      - app = cli
  register: get_cli
  until: ("Running" in get_cli|json_query('resources[*].status.phase'))
  retries: "{{ network.env.retry_count}}"
  delay: 40

############################################################################################
# This task fetch the config block from blockchain by executing the create_block.sh script file
# from first peer of creator cli
- name: fetch and copy the configuration block from the blockchain
  shell: |
    export PEER_CLI=$(KUBECONFIG={{ org.k8s.config_file }} kubectl get po -n {{ org.name }}-net | grep "cli" | head -n 1 | awk '{print $1}')
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ org.name }}-net ${PEER_CLI} -- peer channel fetch config {{ channel_name }}_config_block.pb -o {{ participantx.ordererAddress }} -c {{ channel_name }} --tls --cafile ${ORDERER_CA}
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp ./build/create-block-{{ channel_name | lower }}.sh {{ org.name }}-net/${PEER_CLI}:/opt/gopath/src/github.com/hyperledger/fabric/peer/create_block.sh
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp ./build/channel-artifacts/{{ channel_name | lower }}.json {{ org.name }}-net/${PEER_CLI}:/opt/gopath/src/github.com/hyperledger/fabric/peer/config.json
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp ./build/channel-artifacts/{{ channel_name | lower}}-anchorfile.json {{ org.name }}-net/${PEER_CLI}:/opt/gopath/src/github.com/hyperledger/fabric/peer/anchorfile.json
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ org.name }}-net ${PEER_CLI} -- chmod 777 ./create_block.sh
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ org.name }}-net ${PEER_CLI} --  sh ./create_block.sh
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp {{ org.name }}-net/${PEER_CLI}:/opt/gopath/src/github.com/hyperledger/fabric/peer/{{ channel_name | lower }}_update_in_envelope.pb ./build/{{ channel_name | lower}}_config_block.pb
  environment:
    ORDERER_CA: "/opt/gopath/src/github.com/hyperledger/fabric/crypto/orderer/tls/ca.crt"
  vars: 
    kubernetes: "{{ org.k8s }}"
