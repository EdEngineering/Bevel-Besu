##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

#############################################################################################
# This role setups communication between the vault and kubernetes cluster and install 
# neccessary configurations.
#############################################################################################

# Check if namespace created
- name: "Waiting for the namespace {{ item.name | lower }}-net to be created"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/k8_component"
  vars:
    component_type: "Namespace"
    component_name: "{{ item.name | lower }}-net"
    type: "retry"

###############################################################################################
# This task creates the docker pull credentials for image registry
- name: "Create docker credentials secret"
  include_role:
    name: create/k8s_secrets
  vars: 
    namespace: "{{ item.name | lower}}-net"
    kubernetes: "{{ item.k8s }}"
    check: "docker_credentials"

#############################################################################################
# This task creates secrets for the root token
- name: "Create vault token secret"
  include_role:
    name: create/k8s_secrets
  vars: 
    namespace: "{{ item.name | lower}}-net"
    vault: "{{ item.vault }}"
    kubernetes: "{{ item.k8s }}"
    check: "token_secret"

#############################################################################################
# This tasks gets the kubernetes server url
- name: Get the kubernetes server url
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " "
  register: kubernetes_server_url

- name: Check if vault policies already exists in vault.
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    component_type: "{{ item.type | lower }}"
    component_name: "{{ item.name | lower }}-net"
    vault: "{{ item.vault }}"
    check: "vault_policies"

#####################################################################################################################
# This tasks generate vault_kubernetes helmrelease file
- name: "Create value file for vault_kubernetes "
  include_role:
    name: helm_component
  vars: 
    name: "{{ item.name | lower }}"   
    type: "vault_kubernetes_job"    
    component_name: "{{ item.name | lower }}-vaultkubernetes-job"
    component_type: "{{ item.type | lower }}"
    component_ns: "{{ item.name | lower }}-net"
    git_protocol: "{{ item.gitops.git_protocol }}"
    git_url: "{{ item.gitops.git_url }}"
    git_branch: "{{ item.gitops.branch }}"
    charts_dir: "{{ item.gitops.chart_source }}"
    vault: "{{ item.vault }}"
    k8s: "{{ item.k8s }}"
    kubernetes_url: "{{ kubernetes_server_url.stdout }}"
    alpine_image: "{{ network.docker.url }}/alpine-utils:1.0"
    values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
  when: vault_policy_result.failed == True
  
#Git Push : Pushes the above generated files to git directory 
- name: Git Push
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/git_push"
  vars:
    GIT_DIR: "{{ playbook_dir }}/../../../"
    gitops: "{{ item.gitops }}"    
    GIT_RESET_PATH: "platforms/hyperledger-fabric/configuration"
    msg: "[ci skip] Pushing vault_kubernetes files"
  when: vault_policy_result.failed == True
   
# Check if vault_kubernetes is completed
- name: Check if vault_kubernetes job is completed
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
  vars:
    component_type: Job
    namespace: "{{ item.name | lower}}-net"
    component_name: "{{ item.name | lower}}-vaultkubenertes-job"
    kubernetes: "{{ item.k8s }}"
  when: vault_policy_result.failed == True

#############################################################################################
# This task deletes the root token
- name: "Delete vault token secret"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/delete/k8s_secrets"
  vars: 
    namespace: "{{ item.name | lower }}-net"
    vault: "{{ item.vault }}"
    kubernetes: "{{ item.k8s }}"
    check: "token_secret"
