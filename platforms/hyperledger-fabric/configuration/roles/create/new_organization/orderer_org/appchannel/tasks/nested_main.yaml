##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

#############################################################################################
# This role creates the block modification script for system channel.
#############################################################################################

# Ensure channel-artifacts dir exists
- name: Ensure channel-artifacts dir exists
  file:
    path: "{{ build_path }}/channel-artifacts"
    state: directory

# remove old orderer file
- name: Remove old orderer file
  file:
    path: "{{ build_path }}/channel-artifacts/{{ channel_name }}-orderer"
    state: absent

# creating new orderer file
- name: Creating new orderer file
  file:
    path: "{{ build_path }}/channel-artifacts/{{ channel_name }}-orderer"
    state: touch

# remove old orderer-tls file
- name: Remove old orderer-tls file
  file:
    path: "{{ build_path }}/channel-artifacts/{{ channel_name }}-orderer-tls"
    state: absent

# creating new orderer-tls file
- name: Creating new orderer-tls file
  file:
    path: "{{ build_path }}/channel-artifacts/{{ channel_name }}-orderer-tls"
    state: touch

# Create orderer-tls for tls certificate information
- name: "adding tls certificate information"
  shell: |
    if [ {{ network.env.proxy }} == 'none' ]
    then
      echo -n "{\"client_tls_cert\":\"$(cat {{ build_path }}/crypto-config/ordererOrganizations/{{ component_ns }}/orderers/{{ orderer.name|lower }}.{{ component_ns }}/tls/server.crt | base64 -w 0)\",\"host\":\"{{ orderer.name|lower }}.{{ component_ns }}\",\"port\":{{ orderer.grpc.port }},\"server_tls_cert\":\"$(cat {{ build_path }}/crypto-config/ordererOrganizations/{{ component_ns }}/orderers/{{ orderer.name|lower }}.{{ component_ns }}/tls/server.crt | base64 -w 0)\"}"  >> {{ build_path }}/channel-artifacts/{{ channel_name }}-orderer-tls 
    else
      echo -n "{\"client_tls_cert\":\"$(cat {{ build_path }}/crypto-config/ordererOrganizations/{{ component_ns }}/orderers/{{ orderer.name|lower }}.{{ component_ns }}/tls/server.crt | base64 -w 0)\",\"host\":\"{{ orderer.name|lower }}.{{ neworg.external_url_suffix }}\",\"port\":8443,\"server_tls_cert\":\"$(cat {{ build_path }}/crypto-config/ordererOrganizations/{{ component_ns }}/orderers/{{ orderer.name|lower }}.{{ component_ns }}/tls/server.crt | base64 -w 0)\"}"  >> {{ build_path }}/channel-artifacts/{{ channel_name }}-orderer-tls 
    fi

# Create orderer file for adding new endpoint information
- name: "adding new endpoint information"
  shell: |
    if [ {{ network.env.proxy }} == 'none' ]
    then
      echo -n '"{{ orderer.name }}.{{ component_ns }}:{{ orderer.grpc.port }}"' >> {{ build_path }}/channel-artifacts/{{ channel_name }}-orderer
    else
      echo -n '"{{ orderer.name }}.{{ neworg.external_url_suffix }}:8443"' >> {{ build_path }}/channel-artifacts/{{ channel_name }}-orderer
    fi

############################################################################################
# This task creates the update-channel-scriptk.sh file for new organizations
- name: "Create update-channel-script.sh script file for new orderer"
  template:
    src: "update_channel_script.tpl"
    dest: "{{ build_path }}/update-channel-script.sh"
  vars:    
    os: "{{ fabric.os }}"
    arch: "{{ fabric.arch }}"
    version: "{{ network.version }}"

# This task calls create_block.yaml to generate the cli value files for the orderer organization
- name: Call create_block.yaml to create new orderer addition block
  include_tasks: create_block.yaml
  vars:
    peer: "{{ participant.peers | first }}"    
    org_query: "organizations[?name=='{{participant.name}}']"
    org: "{{ network | json_query(org_query) | first }}"
    component_ns: "{{ org.name | lower }}-net"
  loop: "{{ participants }}"
  loop_control:
    loop_var: participant
  when: participant.type == "creator"

# This task calls sign_block.yaml to generate the cli for the new orderer for the signing of the block
- name: Call sign_block.yaml to sign from all other peers
  include_tasks: sign_block.yaml
  vars:
    peer: "{{ participant.peers | first }}"    
    org_query: "organizations[?name=='{{participant.name}}']"
    org: "{{ network | json_query(org_query) | first }}"
    component_ns: "{{ org.name | lower }}-net"
  loop: "{{ participants }}"
  loop_control:
    loop_var: participant
  when: participant.type != "creator"

- name: Call sign_block_orderer.yaml to sign from all orderers
  include_tasks: sign_block_orderer.yaml
  vars:
    orderer: "{{ org.services.orderers | first }}"
    component_ns: "{{ org.name | lower }}-net"
  loop: "{{ network.organizations }}"
  loop_control:
    loop_var: org
  when: org.type == 'orderer'
 
# This task updates the block to the channel
- name: Call update_block.yaml to add the new orderer to the existing network
  include_tasks: update_block.yaml
  vars:
    peer: "{{ participant.peers | first }}"    
    org_query: "organizations[?name=='{{participant.name}}']"
    org: "{{ network | json_query(org_query) | first }}"
    component_ns: "{{ org.name | lower }}-net"
  loop: "{{ participants }}"
  loop_control:
    loop_var: participant
  when: participant.type == "creator"
