##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

#############################################################################################
# This role creates value file for the deployment of CA Tools CLI
#############################################################################################

# Check if CA server is available
- name: "waiting for the CA server to be created in {{ item.name | lower }}-net"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
  vars:
    component_type: "Pod"
    namespace: "{{ item.name | lower }}-net"
    component_name: "{{ component_services.ca.name }}"
    label_selectors:
      - name = {{ component_name }}
  when: add_peer is not defined or add_peer != 'true'

############################################################################################
# This task reset ca-tools pod
- name: "Reset ca-tools pod"
  include_role:
    name: create/refresh_certs/reset_pod
  vars:
    pod_name: "ca-tools"
    file_path: "{{ values_dir }}/{{ pod_name }}/{{ component_name }}.yaml"
    gitops_value: "{{ item.gitops }}"
    component_ns: "{{ component_name }}"
    kubernetes: "{{ item.k8s }}"
    hr_name: "{{ component_name }}-ca-tools"
  when: (add_peer is defined and add_peer == 'true') or (refresh_cert is defined and refresh_cert == 'true')

- name: "Delete old certificates"
  include_tasks: delete_old_certs.yaml
  vars:
    org_name: "{{ item.name | lower }}"
  when: refresh_cert is defined and refresh_cert == 'true'

- name: "Get Orderer certificates"
  include_tasks: nested_orderers.yaml
  loop: "{{ network.orderers }}"
  loop_control:
    loop_var: orderer

############################################################################################
# Create the certs directory if it does not exist
- name: Create the certs directory if it does not exist
  file:
    path: "{{ playbook_dir }}/../charts/catools/certs"
    state: directory

- set_fact:
   new_peer_list: []

# This task loops over the peers and finds the number of new peers
- name: Count new peers
  set_fact:
    new_peer_list={{ new_peer_list + [ {'peer_name':peer.name } ] }}
  loop: "{{ item.services.peers }}"
  loop_control:
    loop_var: peer
  when: 
    - peer.peerstatus is defined and peer.peerstatus == 'new'
    - add_peer is defined and add_peer == 'true'

# This task initializes the list new_peer_listrs
- name: Count new peers
  set_fact:
    new_peer_list={{ item.services.peers }}
  when: 
    - add_peer is not defined or add_peer == 'false'

- set_fact:
    new_orderer_list: []

# This task loops over the orderers and get orderers from the organization provided in the network.yaml
- name: Get orderers from the organization provided in the network.yaml
  set_fact:
    new_orderer_list={{ new_orderer_list + [orderer] }}
  loop: "{{ network.orderers }}"
  loop_control:
    loop_var: orderer
  when: 
    - orderer_org == orderer.org_name | lower

############################################################################################
# This task creates the CA-tools value files
- name: "Create CA-tools Values for peer"
  include_role:
    name: helm_component
  vars:
    name: "ca-tools"
    type: "ca-tools"
    org_name: "{{ item.name | lower }}"
    component_type: "{{ item.type | lower }}"
    vault: "{{ item.vault }}"
    external_url_suffix: "{{ item.external_url_suffix }}"
    component_subject: "{{ item.subject }}"
    cert_subject: "{{ item.subject | regex_replace('/', ';') | regex_replace(',', '/') | regex_replace(';', ',') }}" # replace , to / and / to , for certpath
    component_country: "{{ item.country }}"
    component_state: "{{ item.state }}"
    component_location: "{{ item.location }}"
    ca_url: "{{ item.ca_data.url }}"
    refresh_cert_value: "{{ refresh_cert | default(false) | quote }}"
    proxy: "{{ network.env.proxy }}"
    alpine_image: "{{ network.docker.url }}/alpine-utils:1.0"
    git_protocol: "{{ item.gitops.git_protocol }}"
    git_url: "{{ gitops.git_url }}"
    git_branch: "{{ gitops.branch }}"
    charts_dir: "{{ gitops.chart_source }}"
    peers_list: "{{ item.services.peers }}"
    orderers_list: "{{ new_orderer_list }}"
    peer_count: "{{ item.services.peers | length }}"
    add_peer_value: "{{ add_peer | default(false) | quote }}"
    new_peer_count: "{{ new_peer_list | length }}"
    user_list: "{{ item.users }}"

#Git Push : Pushes the above generated files to git directory 
- name: Git Push
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/git_push"
  vars:
    GIT_DIR: "{{ playbook_dir }}/../../../"
    gitops: "{{ item.gitops }}"
    GIT_RESET_PATH: "platforms/hyperledger-fabric/configuration"
    msg: "[ci skip] Pushing CA-tools files"

#####################################################################################################################
# This task wait for key certs exists in vault.
- name: Wait for CA key exists in vault.
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    vault_field: "{{ component_name }}-CA.key"
    vault_path: "{{ vault.secret_path | default('secretsv2') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/ca"
    check: "crypto_materials"

# This task wait for admin tls exists in vault.
- name: Wait for admin tls exists in vault.
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    vault_field: "client.key"
    vault_path: "{{ vault.secret_path | default('secretsv2') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/users/admin/tls"
    check: "crypto_materials"

# This task wait for orderers tls exists in vault.
- name: Wait for peers tls exists in vault.
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    vault_field: "server.key"
    vault_path: "{{ vault.secret_path | default('secretsv2') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/tls"
    check: "crypto_materials"
  loop: "{{ item.services.peers }}"
  loop_control:
    loop_var: peer

# This task wait for users tls exists in vault.
- name: Wait for users tls exists in vault.
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    vault_field: "client.key"
    vault_path: "{{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/{{ user.identity }}/tls"
    check: "crypto_materials"
  loop: "{{ item.users }}"
  loop_control:
    loop_var: user
  when: item.users is defined

# This task wait for ambassador key exists in vault.
- name: Wait for ambassador key exists in vault.
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    vault_field: "key"
    vault_path: "{{ vault.secret_path | default('secretsv2') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/ambassador"
    check: "crypto_materials"
  loop: "{{ item.services.peers }}"
  loop_control:
    loop_var: peer
  when: network.env.proxy == 'ambassador'

#####################################################################################################################
# This task creates the Ambassador TLS credentials for peers
- name: "Create the Ambassador credentials for peers"
  include_role:
    name: create/k8s_secrets
  vars: 
    namespace: "{{ item.name | lower }}-net"
    vault: "{{ item.vault }}"
    kubernetes: "{{ item.k8s }}"
    check: "ambassador_peer"
  loop: "{{ item.services.peers }}"
  loop_control:
    loop_var: peer
  when: 
    - peer.peerstatus is not defined or peer.peerstatus == 'new'
    - network.env.proxy == 'ambassador'

- name: "Copy msp cacerts to given path"
  include_tasks: nested_endorsers.yaml
  vars:
    org_name: "{{ item.name |lower }}"
    approvers: "{{ channel.endorsers }}"
  loop: "{{ network.channels }}"
  loop_control:
    loop_var: channel

############################################################################################
# This task copies the msp admincerts from vault
- name: Fetch the msp admincerts from vault
  shell: |
    vault kv get -field=admincerts {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/admin/msp > Admin@{{ component_name }}-cert.pem
    mkdir -p ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/admincerts/
    mv Admin@{{ component_name }}-cert.pem ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/admincerts/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  
############################################################################################
# This task copies the msp cacerts from vault
- name: Fetch the msp cacerts from vault
  shell: |
    vault kv get -field=cacerts {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/admin/msp > ca-{{ component_name }}-{{ item.external_url_suffix }}-8443.pem
    mkdir -p ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/cacerts/
    mv ca-{{ component_name }}-{{ item.external_url_suffix }}-8443.pem ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/cacerts/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: network.env.proxy != 'none'  

############################################################################################
# This task copies the msp tlscacerts from vault
- name: Fetch the msp tlscacerts from vault
  shell: |
    vault kv get -field=tlscacerts {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/admin/msp > ca-{{ component_name }}-{{ item.external_url_suffix }}-8443.pem
    mkdir -p ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/tlscacerts/
    mv ca-{{ component_name }}-{{ item.external_url_suffix }}-8443.pem ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/tlscacerts/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: network.env.proxy != 'none'

############################################################################################
# This task copies the msp cacerts from vault when proxy is none
- name: Fetch the msp cacerts from vault
  shell: |
    vault kv get -field=cacerts {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/admin/msp > ca-{{ component_name }}-{{ item.services.ca.grpc.port }}.pem
    mkdir -p ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/cacerts/
    mv ca-{{ component_name }}-{{ item.services.ca.grpc.port }}.pem ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/cacerts/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: network.env.proxy == 'none'  

############################################################################################
# This task copies the msp tlscacerts from vault when proxy is none
- name: Fetch the msp tlscacerts from vault
  shell: |
    vault kv get -field=tlscacerts {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/users/admin/msp > ca-{{ component_name }}-{{ item.services.ca.grpc.port }}.pem
    mkdir -p ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/tlscacerts/
    mv ca-{{ component_name }}-{{ item.services.ca.grpc.port }}.pem ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/tlscacerts/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: network.env.proxy == 'none'

############################################################################################
# This task gets msp config.yaml file from vault
- name: Fetch msp config.yaml file from vault
  shell: |
    vault kv get -field=configfile {{ vault.secret_path | default('secretsv2') }}/crypto/peerOrganizations/{{ component_name }}/msp/config > config.yaml
    mv config.yaml ./build/crypto-config/peerOrganizations/{{ component_name }}/msp/
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
