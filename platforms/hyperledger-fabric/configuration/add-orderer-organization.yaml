##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This playbook adds an organization to a DLT with Fabric network on existing Kubernetes clusters
# The Kubernetes clusters should already be created and the infomation to connect to the
#  clusters be updated in the network.yaml file that is used as an input to this playbook
###########################################################################################
# To Run this playbook from this directory, use the following command (network.yaml also in this directory)
#  ansible-playbook add-orderer-organization.yaml -e "@./network.yaml" -e "add_new_org='true'"
############################################################################################
# Please ensure that the ../../shared/configuration playbooks have been run and a DLT network exists.
# Please ensure the orderer certificates are placed on the paths mentioned in orderer.certificate in network.yaml
---
  # This will apply to ansible_provisioners. /etc/ansible/hosts should be configured with this group
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:
    # delete build directory
    - name: Remove build directory
      file:
        path: "./build"
        state: absent
        
    # Create Namespaces and Vault-rbac kubernetes-value files for new organization
    - name: "Create Namespace and serviceaccount for new org"
      include_role:
        name: "create/namespace_vaultauth"
      vars:
        component_name: "{{ item.name | lower }}-net"
        component_type_name: "{{ item.type | lower }}"
        kubernetes: "{{ item.k8s }}"
        release_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
      loop: "{{ network['organizations'] }}"
      when: item.org_status == 'new'
    
    #Setup Vault-Kubernetes accesses and Regcred for docker registry for new organization
    - name: "Create vault-auth for new org"
      include_role: 
        name: "setup/vault_kubernetes"
      vars:
        component_name: "{{ item.name | lower }}-net"
        kubernetes: "{{ item.k8s }}"
        vault: "{{ item.vault }}"
        component_type: "{{ item.type | lower }}"
        auth_path: "{{ network.env.type }}{{ item.name | lower }}-net-auth"
      loop: "{{ network['organizations'] }}"
      when: item.org_status == 'new'

    # Create Storageclass for new organization
    - name: "Create storageclass for new org"
      include_role:
        name: "create/storageclass"
      vars:
        sc_name: "{{ item.name | lower}}sc"
        component_type: "{{ item.type | lower}}"
        kubernetes: "{{ item.k8s }}"
        release_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
      loop: "{{ network['organizations'] }}"
      when: item.org_status == 'new'
        
    # Create CA Server value files and check-in for new organization
    - name: "Create CA Server for new org"
      include_role:
        name: "create/ca_server"
      vars:
        component_name: "{{ item.name | lower}}-net"
        component: "{{ item.name | lower}}"
        component_type: "{{ item.type | lower}}"
        component_services: "{{ item.services }}"
        kubernetes: "{{ item.k8s }}"
        vault: "{{ item.vault }}"
        ca: "{{ item.services.ca }}"
        docker_url: "{{ network.docker.url }}"
        gitops: "{{ item.gitops }}"
        values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
      loop: "{{ network['organizations'] }}"
      when: item.org_status == 'new' and item.services.ca is defined
  
    #Creating a pause so that the client certificates are valid
    # You can continue if the CA-server pods are running for more than 5 minutes
    - pause:
        prompt: "Sleeping... so that the client certificates are valid"
        minutes: 6

    # Create CA Tools helm-value files and check-in
    - name: Create CA tools for each organization
      include_role:
        name: "create/ca_tools/orderer"
      vars:
        component_name: "{{ item.name | lower}}-net"
        component: "{{ item.name | lower}}"
        component_type: "{{ item.type | lower}}"
        component_services: "{{ item.services }}"
        kubernetes: "{{ item.k8s }}"
        vault: "{{ item.vault }}"
        ca: "{{ item.services.ca }}"
        gitops: "{{ item.gitops }}"
        values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
      loop: "{{ network['organizations'] }}"
      when: item.type == 'orderer'

    # Creating channel artifacts and putting them in vault
    # This role creates configtx.yaml file as the requirements mentioned in network.yaml
    # which is then consumed by configtxgen tool
    - name: "Create configtx file"
      include_role:
        name: "create/configtx"
      vars:
        config_file: "./build/configtx.yaml"

    # This role generate genesis block and channeltx
    # Generates the config.json from the configtx.yaml for new organization
    - name: "Create channel artifacts"
      include_role:
        name: "create/channel_artifacts"
      vars:
        build_path: "./build"
        genesis: "{{ item.genesis }}"
        channel_name: "{{ item.channel_name | lower}}"
        fetch_certs: "false"
        profile_name: "{{ item.channel_name }}"
      loop: "{{ network['channels'] }}"

    # This role adds the new org to the existing consortium and updates the block with syschannel    
    - name: "Modify the system channel with tls information of new orderer"
      include_role:
        name: "create/new_organization/orderer_org/syschannel"
      vars:
        build_path: "./build"
        orderers: "{{ neworg.services.orderers }}"
        docker_url: "{{ network.docker.url }}"
        channel_name: "syschannel"
        update_type: "tls"
      loop: "{{ network.organizations }}"
      loop_control:
        loop_var: neworg
      when: neworg.type == 'orderer' and neworg.org_status == 'new'

    # This role creates value file for zk-kafka (if kafka consensus is chosen) and orderer
    - name: Create all orderers
      include_role:
        name: "create/orderers"
      vars:
        build_path: "./build"
        namespace: "{{ item.name | lower}}-net"
        component_type: "{{ item.type | lower}}"
        component_services: "{{ item.services }}"
        vault: "{{ item.vault }}"
        git_protocol: "{{ item.gitops.git_protocol }}"
        git_url: "{{ item.gitops.git_url }}"
        git_branch: "{{ item.gitops.branch }}"
        docker_url: "{{ network.docker.url }}"
        charts_dir: "{{ item.gitops.chart_source }}"
        values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
      loop: "{{ network['organizations'] }}"
      when: item.type == 'orderer' and item.org_status == 'new' 

    # Generate script to modify the fetched configuration block
    - name: "Modify the system channel with endpoint information of new orderers"
      include_role:
        name: "create/new_organization/orderer_org/syschannel"
      vars:
        build_path: "./build"
        orderers: "{{ neworg.services.orderers }}"
        docker_url: "{{ network.docker.url }}"
        channel_name: "syschannel"
        update_type: "address"
      loop: "{{ network.organizations }}"
      loop_control:
        loop_var: neworg
      when: neworg.type == 'orderer' and neworg.org_status == 'new' 

    # This role adds the new org to the existing chnanel and updates the block with the application channel    
    - name: "Modify the application channel with tls and address information of new orderer"
      include_role:
        name: "create/new_organization/orderer_org/appchannel"
      vars:
        build_path: "./build"
        participants: "{{ item.participants }}"
        channel_name: "{{ item.channel_name | lower }}"
        system_channel: "syschannel"        
        new_org_query: "organizations[?org_status=='new']"
        neworg: "{{ network | json_query(new_org_query) | first }}"
        docker_url: "{{ network.docker.url }}"
      loop: "{{ network['channels'] }}"

  vars: #These variables can be overriden from the command line
    privilege_escalate: false           #Default to NOT escalate to root privledges
    install_os: "linux"                 #Default to linux OS
    install_arch:  "amd64"              #Default to amd64 architecture
    bin_install_dir:  "~/bin"            #Default to /bin install directory for binaries
    add_new_org: "true"
