##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-cactus-connector
  namespace: {{ .Values.metadata.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-cactus-connector
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      name: {{ .Release.Name }}-cactus-connector
      app.kubernetes.io/name: {{ .Release.Name }}-cactus-connector
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
      {{- include "labels.custom" . | nindent 2 }}
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}-cactus-connector
        app.kubernetes.io/name: {{ .Release.Name }}-cactus-connector
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
        {{- include "labels.custom" . | nindent 2 }}
    spec:
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      volumes:
      - name: certificates
        emptyDir:
          medium: Memory
      {{ if .Values.vault.tls  }}
      - name: vaultca
        secret:
          secretName: {{ $.Values.vault.tls }}
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt
      {{ end  }}
      initContainers:
      - name: certificates-init
        image: {{ $.Values.image.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: VAULT_PEER_SECRET_PREFIX
          value: "{{ $.Values.vault.adminsecretprefix }}"
        - name: VAULT_ORDERER_SECRET_PREFIX
          value: "{{ $.Values.vault.orderersecretprefix }}"
        - name: MOUNT_PATH
          value: "/secret"
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          validateVaultResponse () {
            if echo ${2} | grep "errors" || [ "${2}" = "" ]; then
              echo "ERROR: unable to retrieve ${1}: ${2}"
              exit 1
            fi
            if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
            then
              http_code=$(curl -fsS -o /dev/null -w "%{http_code}" \
              --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
              ${VAULT_ADDR}/v1/${vault_secret_key})
              curl_response=$?
              if test "$http_code" != "200" ; then
                  echo "Http response code from Vault - $http_code"
                  if test "$curl_response" != "0"; then
                     echo "Error: curl command failed with error code - $curl_response"
                     exit 1
                  fi
              fi
            fi
          }

          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          # Login to Vault and so I can get an approle token
          VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
            -H "Content-Type: application/json" \
            -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
            jq -r 'if .errors then . else .auth.client_token end')
          validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"

          vault_secret_key="${VAULT_ORDERER_SECRET_PREFIX}/tls"
          echo "Getting Orderer TLS certificates from Vault using key $vault_secret_key"

          OUTPUT_PATH="${MOUNT_PATH}/orderer/tls"
          LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')

          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"

          TLS_CA_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["ca.crt"]')

          mkdir -p ${OUTPUT_PATH}
          echo "${TLS_CA_CERT}" >> ${OUTPUT_PATH}/ca.crt

          vault_secret_key="${VAULT_PEER_SECRET_PREFIX}/msp"
          echo "Getting MSP certificates from Vault using key $vault_secret_key"

          OUTPUT_PATH="${MOUNT_PATH}/admin/msp"
          LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"

          ADMINCERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["admincerts"]')
          CACERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["cacerts"]')
          KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["keystore"]')
          SIGNCERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["signcerts"]')
          TLSCACERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["tlscacerts"]')

          mkdir -p ${OUTPUT_PATH}/admincerts
          mkdir -p ${OUTPUT_PATH}/cacerts
          mkdir -p ${OUTPUT_PATH}/keystore
          mkdir -p ${OUTPUT_PATH}/signcerts
          mkdir -p ${OUTPUT_PATH}/tlscacerts

          echo "${ADMINCERT}" >> ${OUTPUT_PATH}/admincerts/admin.crt
          echo "${CACERTS}" >> ${OUTPUT_PATH}/cacerts/ca.crt
          echo "${KEYSTORE}" >> ${OUTPUT_PATH}/keystore/server.key
          echo "${SIGNCERTS}" >> ${OUTPUT_PATH}/signcerts/server.crt
          echo "${TLSCACERTS}" >> ${OUTPUT_PATH}/tlscacerts/tlsca.crt
        volumeMounts:
        - name: certificates
          mountPath: /secret
        {{ if .Values.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
      containers:
      - name: cactus-connector
        image: {{ .Values.image.repository | quote }}
        imagePullPolicy: {{ .Values.image.pullPolicy}}
        ports:
        - name: http
          containerPort: 4000
          protocol: TCP
        env:
        - name: AUTHORIZATION_PROTOCOL
          value: {{  .Values.envs.authorizationProtocol | quote  }}
        - name: AUTHORIZATION_CONFIG_JSON
          value: {{  .Values.envs.authorizationConfigJson | quote  }}
        - name: GRPC_TLS_ENABLED
          value: {{  .Values.envs.grpcTlsEnabled | quote  }}
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-plugins
        volumeMounts:
        - name: certificates
          mountPath: /opt/gopath/src/github.com/hyperledger/fabric/crypto
