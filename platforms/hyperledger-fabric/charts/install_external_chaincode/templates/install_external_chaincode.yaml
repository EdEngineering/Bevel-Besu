apiVersion: batch/v1
kind: Job
metadata:
  name: instextcc-{{ $.Values.peer.name }}-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}
  namespace: {{ $.Values.metadata.namespace }}
  labels:
    app: instextcc-{{ $.Values.peer.name }}-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}
    app.kubernetes.io/name: instextcc-{{ $.Values.chaincode.name }}{{ $.Values.chaincode.version }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: instextcc-{{ $.Values.peer.name }}-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}
        app.kubernetes.io/name: instextcc-{{ $.Values.chaincode.name }}{{ $.Values.chaincode.version }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      imagePullSecrets:
        - name: {{ $.Values.vault.imagesecretname }}
      volumes:
      {{ if .Values.vault.tls  }}
      - name: vaultca
        secret:
          secretName: {{ $.Values.vault.tls }}
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt
      {{ end  }}
      - name: certificates
        emptyDir:
          medium: Memory
      - name: chaincodepackage
        emptyDir:
          medium: Memory
      initContainers:
      - name: certificates-init
        image: {{ $.Values.metadata.images.alpineutils }}
        imagePullPolicy: Always
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: VAULT_CHAINCODE_SECRET_PREFIX
          value: "{{ $.Values.vault.chaincodesecretprefix }}"
        - name: VAULT_PEER_SECRET_PREFIX
          value: "{{ $.Values.vault.adminsecretprefix }}"
        - name: VAULT_ORDERER_SECRET_PREFIX
          value: "{{ $.Values.vault.orderersecretprefix }}"
        - name: CHAINCODE_NAME
          value: "{{ $.Values.chaincode.name }}"
        - name: MOUNT_PATH
          value: /secret
        - name: NETWORK_VERSION
          value: "{{ $.Values.metadata.network.version }}"
        - name: CHAINCODE_TLS_DISABLED
          value: "{{ $.Values.chaincode.tls_disabled }}"
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          validateVaultResponse () {
            if echo ${2} | grep "errors" || [ "${2}" = "" ]; then
              echo "ERROR: unable to retrieve ${1}: ${2}"
              exit 1
            fi
            if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
            then
              http_code=$(curl -fsS -o /dev/null -w "%{http_code}" \
              --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
              ${VAULT_ADDR}/v1/${vault_secret_key})
              curl_response=$?
              if test "$http_code" != "200" ; then
                  echo "Http response code from Vault - $http_code"
                  if test "$curl_response" != "0"; then
                     echo "Error: curl command failed with error code - $curl_response"
                     exit 1
                  fi
              fi
            fi
          }

          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          # Login to Vault and so I can get an approle token
          VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
            -H "Content-Type: application/json" \
            -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
            jq -r 'if .errors then . else .auth.client_token end')
          validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"

          vault_secret_key="${VAULT_ORDERER_SECRET_PREFIX}/tls"
          echo "Getting Orderer TLS certificates from Vault using key $vault_secret_key"
          OUTPUT_PATH="${MOUNT_PATH}/orderer/tls"

          LOOKUP_SECRET_RESPONSE=$(curl -sS \
            --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}"
          TLS_CA_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["ca.crt"]')

          mkdir -p ${OUTPUT_PATH}
          echo "${TLS_CA_CERT}" >> ${OUTPUT_PATH}/ca.crt
          vault_secret_key="${VAULT_PEER_SECRET_PREFIX}/msp"
          echo "Getting MSP certificates from Vault using key $vault_secret_key"
          OUTPUT_PATH="${MOUNT_PATH}/admin/msp"

          LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}"

          ADMINCERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["admincerts"]')
          CACERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["cacerts"]')
          KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["keystore"]')
          SIGNCERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["signcerts"]')
          TLSCACERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["tlscacerts"]')

          mkdir -p ${OUTPUT_PATH}/admincerts
          mkdir -p ${OUTPUT_PATH}/cacerts
          mkdir -p ${OUTPUT_PATH}/keystore
          mkdir -p ${OUTPUT_PATH}/signcerts
          mkdir -p ${OUTPUT_PATH}/tlscacerts
          echo "${ADMINCERT}" >> ${OUTPUT_PATH}/admincerts/admin.crt
          echo "${CACERTS}" >> ${OUTPUT_PATH}/cacerts/ca.crt
          echo "${KEYSTORE}" >> ${OUTPUT_PATH}/keystore/server.key
          echo "${SIGNCERTS}" >> ${OUTPUT_PATH}/signcerts/server.crt
          echo "${TLSCACERTS}" >> ${OUTPUT_PATH}/tlscacerts/tlsca.crt

          if [ "${CHAINCODE_TLS_DISABLED}" == "false" ]; then
            vault_secret_key="${VAULT_CHAINCODE_SECRET_PREFIX}/${CHAINCODE_NAME}"
            echo "Getting chaincode certificates from Vault using key $vault_secret_key"
            OUTPUT_PATH="${MOUNT_PATH}/chaincode"

            LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
            validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}"
    
            CACERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["ca.crt"]')
            CLIENT_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["client.crt"]')
            CLIENT_KEY=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["client.key"]')
            mkdir -p ${OUTPUT_PATH}
            echo "${CACERT}" >> ${OUTPUT_PATH}/ca.crt
            echo "${CLIENT_CERT}" >> ${OUTPUT_PATH}/client.crt
            echo "${CLIENT_KEY}" >> ${OUTPUT_PATH}/client.key
          fi   
        volumeMounts:
        {{ if .Values.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
        - name: certificates
          mountPath: /secret

      - name: package-init
        image: {{ $.Values.metadata.images.alpineutils }}
        imagePullPolicy: Always
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: VAULT_CHAINCODE_PACKAGE_PREFIX
          value: {{ $.Values.vault.chaincodepackageprefix}}
        - name: CHAINCODE_NAME
          value: "{{ $.Values.chaincode.name }}"
        - name: CHAINCODE_VERSION
          value: "{{ $.Values.chaincode.version }}"
        - name: CHAINCODE_MOUNT_PATH
          value: /chaincodepackage
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          ## load encoded package bytes from vault
          validateVaultResponse () {
            if echo ${2} | grep "errors" || [ "${2}" = "" ]; then
              echo "ERROR: unable to retrieve ${1}: ${2}"
              exit 1
            fi
            if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
            then
              http_code=$(curl -fsS -o /dev/null -w "%{http_code}" \
              --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
              ${VAULT_ADDR}/v1/${vault_secret_key})
              curl_response=$?
              if test "$http_code" != "200" ; then
                  echo "Http response code from Vault - $http_code"
                  if test "$curl_response" != "0"; then
                     echo "Error: curl command failed with error code - $curl_response"
                     exit 1
                  fi
              fi
            fi
          }

          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          # Login to Vault and so I can get an approle token
          VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
            -H "Content-Type: application/json" \
            -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
            jq -r 'if .errors then . else .auth.client_token end')
          validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"

          echo "Getting Package Base64 from Vault in ${VAULT_CHAINCODE_PACKAGE_PREFIX}"
          LOOKUP_PACKAGE_BASE64_RESPONSE=$(curl -sS \
            --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${VAULT_CHAINCODE_PACKAGE_PREFIX} | jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${VAULT_CHAINCODE_PACKAGE_PREFIX})" "${LOOKUP_PACKAGE_BASE64_RESPONSE}"
          PACKAGE_HASH=$(echo ${LOOKUP_PACKAGE_BASE64_RESPONSE} | jq -r '.data.data["package-base64"]')
          PACKAGE_BASE64=$(echo ${LOOKUP_PACKAGE_BASE64_RESPONSE} | jq -r '.data.data["package-base64"]')
          echo ${PACKAGE_BASE64} | base64 -d > ${CHAINCODE_MOUNT_PATH}/${CHAINCODE_NAME}_${CHAINCODE_VERSION}.tgz
        volumeMounts:
        {{ if .Values.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
        - name: chaincodepackage
          mountPath: /chaincodepackage
          readOnly: false
      containers:
      - name: instextcc
        image: {{ $.Values.metadata.images.fabrictools }}
        imagePullPolicy: Always
        stdin: true
        tty: true
        command: ["sh", "-c"]
        args:
        - |-
          #!/bin/bash sh
          # tail -f /dev/null;
          # validate if chaincode is installed
          INSTALLED=$(peer lifecycle chaincode queryinstalled -O json | jq '.installed_chaincodes?' | jq --arg CCLABEL "${CHAINCODE_NAME}_${CHAINCODE_VERSION}" '.[]? | select(.label==$CCLABEL)')
          if [ -n "${INSTALLED}" ]
          then
            echo "chaincode ${CHAINCODE_NAME}_${CHAINCODE_VERSION} is installed, skipping... "
            exit 0
          fi
          ## Installing Chaincode
          peer lifecycle chaincode install ${CHAINCODE_MOUNT_PATH}/${CHAINCODE_NAME}_${CHAINCODE_VERSION}.tgz
          echo "Chaincode installed for Fabric v.2.X"
          #query installed
          echo "peer query installed"
          peer lifecycle chaincode queryinstalled
          ## Check if chaincode got installed 
          echo "Checking if chaincode was installed"
          INSTALLED=$(peer lifecycle chaincode queryinstalled -O json | jq '.installed_chaincodes?' | \
            jq --arg CCLABEL "${CHAINCODE_NAME}_${CHAINCODE_VERSION}" '.[]? | select(.label==$CCLABEL)')
          if ! [ -n "${INSTALLED}" ]
          then
            echo "Error while installing chaincode, exiting.."
            exit 1
          fi
        env:
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.peer.loglevel }}
        - name: CORE_PEER_ID
          value: {{ $.Values.peer.name }}.{{ $.Values.metadata.namespace }}
        - name: CORE_PEER_ADDRESS
          value: {{ $.Values.peer.address }}
        - name: CORE_PEER_LOCALMSPID
          value: {{ $.Values.peer.localmspid }}
        - name: CORE_PEER_TLS_ENABLED
          value: "{{ $.Values.peer.tlsstatus }}"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/admin/msp/cacerts/ca.crt
        - name: ORDERER_CA
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/orderer/tls/ca.crt
        - name: CORE_PEER_MSPCONFIGPATH
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/admin/msp
        - name: CHAINCODE_CERTS_PATH
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/chaincode
        - name: CHAINCODE_NAME
          value: "{{ $.Values.chaincode.name }}"
        - name: CHAINCODE_TLS_DISABLED
          value: "{{ $.Values.chaincode.tls_disabled }}"
        - name: CHAINCODE_ADDR
          value: "{{ $.Values.chaincode.address }}"
        - name: CHAINCODE_MAINDIR
          value: "{{ $.Values.chaincode.maindirectory }}"
        - name: CHAINCODE_VERSION
          value: "{{ $.Values.chaincode.version }}"
        - name: CORE_CHAINCODE_BUILDER
          value: "{{ $.Values.chaincode.builder }}"
        - name: NETWORK_VERSION
          value: "{{ $.Values.metadata.network.version }}"
        - name: CC_RUNTIME_LANGUAGE
          value: "{{ $.Values.chaincode.lang }}"
        - name: CHAINCODE_MOUNT_PATH
          value: /chaincodepackage
        volumeMounts:
        - name: certificates
          mountPath: /opt/gopath/src/github.com/hyperledger/fabric/crypto
          readOnly: true
        - name: chaincodepackage
          mountPath: /chaincodepackage
          readOnly: true
