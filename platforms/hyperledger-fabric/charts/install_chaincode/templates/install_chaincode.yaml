##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: installchaincode-{{ $.Values.peer.name }}-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}
  namespace: {{ $.Values.metadata.namespace }}
  labels:
    app: installchaincode-{{ $.Values.peer.name }}-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}
    app.kubernetes.io/name: installchaincode-{{ $.Values.chaincode.name }}{{ $.Values.chaincode.version }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: installchaincode-{{ $.Values.peer.name }}-{{ $.Values.chaincode.name }}-{{ $.Values.chaincode.version }}
        app.kubernetes.io/name: installchaincode-{{ $.Values.chaincode.name }}{{ $.Values.chaincode.version }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      imagePullSecrets:
        - name: {{ $.Values.vault.imagesecretname }}
      volumes:
      {{ if .Values.vault.tls  }}
      - name: vaultca
        secret:
          secretName: {{ $.Values.vault.tls }}
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt
      {{ end  }}
      - name: certificates
        emptyDir:
          medium: Memory
      initContainers:
      - name: certificates-init
        image: {{ $.Values.metadata.images.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: VAULT_PEER_SECRET_PREFIX
          value: "{{ $.Values.vault.adminsecretprefix }}"
        - name: VAULT_ORDERER_SECRET_PREFIX
          value: "{{ $.Values.vault.orderersecretprefix }}"
        - name: MOUNT_PATH
          value: /secret
        - name: NETWORK_VERSION
          value: "{{ $.Values.metadata.network.version }}"
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          validateVaultResponse () {
            if echo ${2} | grep "errors" || [ "${2}" = "" ]; then
              echo "ERROR: unable to retrieve ${1}: ${2}"
              exit 1
            fi
            if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
            then
              http_code=$(curl -fsS -o /dev/null -w "%{http_code}" \
              --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
              ${VAULT_ADDR}/v1/${vault_secret_key})
              curl_response=$?
              if test "$http_code" != "200" ; then
                  echo "Http response code from Vault - $http_code"
                  if test "$curl_response" != "0"; then
                     echo "Error: curl command failed with error code - $curl_response"
                     exit 1
                  fi
              fi
            fi
          }

          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          # Login to Vault and so I can get an approle token
          VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
            -H "Content-Type: application/json" \
            -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
            jq -r 'if .errors then . else .auth.client_token end')
          validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"

          vault_secret_key="${VAULT_ORDERER_SECRET_PREFIX}/tls"
          echo "Getting Orderer TLS certificates from Vault using key $vault_secret_key"

          OUTPUT_PATH="${MOUNT_PATH}/orderer/tls"
          LOOKUP_SECRET_RESPONSE=$(curl -sS \
            --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')

          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"

          TLS_CA_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["ca.crt"]')

          mkdir -p ${OUTPUT_PATH}
          echo "${TLS_CA_CERT}" >> ${OUTPUT_PATH}/ca.crt

          vault_secret_key="${VAULT_PEER_SECRET_PREFIX}/msp"
          echo "Getting MSP certificates from Vault using key $vault_secret_key"

          OUTPUT_PATH="${MOUNT_PATH}/admin/msp"
          LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"

          ADMINCERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["admincerts"]')
          CACERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["cacerts"]')
          KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["keystore"]')
          SIGNCERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["signcerts"]')
          TLSCACERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["tlscacerts"]')

          mkdir -p ${OUTPUT_PATH}/admincerts
          mkdir -p ${OUTPUT_PATH}/cacerts
          mkdir -p ${OUTPUT_PATH}/keystore
          mkdir -p ${OUTPUT_PATH}/signcerts
          mkdir -p ${OUTPUT_PATH}/tlscacerts

          echo "${ADMINCERT}" >> ${OUTPUT_PATH}/admincerts/admin.crt
          echo "${CACERTS}" >> ${OUTPUT_PATH}/cacerts/ca.crt
          echo "${KEYSTORE}" >> ${OUTPUT_PATH}/keystore/server.key
          echo "${SIGNCERTS}" >> ${OUTPUT_PATH}/signcerts/server.crt
          echo "${TLSCACERTS}" >> ${OUTPUT_PATH}/tlscacerts/tlsca.crt

          # GIT user creds
          vault_secret_key={{ $.Values.vault.secretgitprivatekey }}
          
          LOOKUP_SECRET_RESPONSE=$(curl -sS \
              --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
          ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
          VALUE_OF_SECRET=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r ".data.data[\"git_password\"]")         
          echo "${VALUE_OF_SECRET}" >> ${MOUNT_PATH}/user_cred

        volumeMounts:
        {{ if .Values.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
        - name: certificates
          mountPath: /secret
      containers:
      - name: installchaincode
        image: {{ $.Values.metadata.images.fabrictools }}
        imagePullPolicy: IfNotPresent
        stdin: true
        tty: true
        command: ["sh", "-c"]
        args:
        - |-
          #!/bin/bash sh
          ## Git repository clone for chaincode
          mkdir -p /root/.ssh/          
          apk add curl openssh
          ssh-keyscan {{ $.Values.chaincode.repository.hostname }} > /root/.ssh/known_hosts
          git_password=$(cat /opt/gopath/src/github.com/hyperledger/fabric/crypto/user_cred)
          cd /tmp && git clone https://{{ $.Values.chaincode.repository.git_username }}:$git_password@{{ $.Values.chaincode.repository.url }} -b {{ $.Values.chaincode.repository.branch }} chaincode > git.log 2>&1
          ## Check if the repository was cloned correctly
          if [[ ! $? -eq 0 ]];
          then
            cat git.log
            exit 1
          fi
          ls
          echo $GOPATH
          if [ ${CC_RUNTIME_LANGUAGE} = "golang" ]
          then
            ## Copying desired chaincode to a location relative to $GOPATH/src
            mkdir -p $GOPATH/src/github.com/chaincode
            cp -R /tmp/chaincode/{{ $.Values.chaincode.repository.path }}/* $GOPATH/src/github.com/chaincode/

            # Get dependencies
            mkdir -p $GOPATH/bin && curl https://raw.githubusercontent.com/hyperledger/bevel/main/platforms/hyperledger-fabric/scripts/install.sh | sh
            cd $GOPATH/src/github.com/chaincode && dep ensure

            #chaincode path
            CC_SRC_PATH="github.com/chaincode/${CHAINCODE_NAME}/${CHAINCODE_MAINDIR}"

            if ! [ -d "vendor" ];then
              GO111MODULE=on go mod vendor
              CC_SRC_PATH="${PWD}"
            fi

          elif [ ${CC_RUNTIME_LANGUAGE} = "java" ]
          then
            ## Copying desired chaincode to a location 
            mkdir -p $GOPATH/src/github.com/chaincode
            cp -R /tmp/chaincode/{{ $.Values.chaincode.repository.path }}/* $GOPATH/src/github.com/chaincode/

            # Get dependencies
            apk add openjdk8
            java -version
            apk add gradle
            gradle -v
            cd $GOPATH/src/github.com/chaincode && dep ensure

            CC_SRC_PATH="/$GOPATH/src/github.com/chaincode/"

            echo "CC_SRC_PATH= $CC_SRC_PATH"
            current_path=`pwd`
            echo $current_path

            echo "Compiling Java code..."
            chmod +x gradlew
            ./gradlew installDist --stacktrace
            cd $current_path
            echo "Finished compiling Java code"

            #chaincode path
            CC_SRC_PATH=$CC_SRC_PATH/build/install/${CHAINCODE_NAME}

            echo $CC_SRC_PATH
          elif [ ${CC_RUNTIME_LANGUAGE} = "node" ]
          then
            ## Copying desired chaincode to a location relative to $GOPATH/src
            mkdir -p $GOPATH/src/github.com/chaincode
            cp -R /tmp/chaincode/{{ $.Values.chaincode.repository.path }}/* $GOPATH/src/github.com/chaincode/

            #chaincode path
            CC_SRC_PATH="${GOPATH}/src/github.com/chaincode/${CHAINCODE_NAME}/${CHAINCODE_MAINDIR}"
          fi
          version1_4=`echo $NETWORK_VERSION | grep -c 1.4`
          if [ $version1_4 = 1 ];then

            ## Checking installed chaincode
            INSTALLED=$(peer chaincode list --installed | grep "Name: ${CHAINCODE_NAME}, Version: ${CHAINCODE_VERSION},")
            if [ -n "${INSTALLED}" ]
            then
              echo "chaincode ${CHAINCODE_NAME} version ${CHAINCODE_VERSION} is installed, skipping... "
              exit 0
            fi

            echo "Installing Chaincode for ${NETWORK_VERSION}"
            ## Installing chaincode on a peer
            peer chaincode install -n ${CHAINCODE_NAME} -v ${CHAINCODE_VERSION} -p ${CC_SRC_PATH} --lang ${CC_RUNTIME_LANGUAGE}
            echo "Chaincode installed for Fabric v.1.4.X"         
          else
            ## Checking installed chaincode
            INSTALLED=$(peer lifecycle chaincode queryinstalled -O json | jq '.installed_chaincodes?' | \
              jq --arg CCLABEL "${CHAINCODE_NAME}_${CHAINCODE_VERSION}" '.[]? | select(.label==$CCLABEL)')
            if [ -n "${INSTALLED}" ]
            then
              echo "chaincode ${CHAINCODE_NAME}_${CHAINCODE_VERSION} is installed, skipping... "
              exit 0
            fi

            echo "Installing Chaincode for ${NETWORK_VERSION}"
            if [ $PEER_NAME = "peer0" ];then
              ## packaging chaincode
              echo "Packaging chaincode for the first peer"
              peer lifecycle chaincode package ${CHAINCODE_NAME}.tar.gz --path ${CC_SRC_PATH} --lang ${CC_RUNTIME_LANGUAGE} --label ${CHAINCODE_NAME}_${CHAINCODE_VERSION}
            else
              export CORE_PEER_ADDRESS=${PEER0_ADDRESS}
              echo "Extracting package id"
              peer lifecycle chaincode queryinstalled > log.txt
              PACKAGE_ID=$(cat log.txt | grep "${CHAINCODE_NAME}_${CHAINCODE_VERSION}" | sed -n "/${CC_NAME}_${CC_VERSION}/{s/^Package ID: //; s/, Label:.*$//; p;}")
              echo "Package Id Extracted ${PACKAGE_ID}"
              peer lifecycle chaincode getinstalledpackage --package-id ${PACKAGE_ID}
              export CORE_PEER_ADDRESS=${PEER_ADDRESS}
              export CHAINCODE_NAME=${PACKAGE_ID}
              echo "installing ${CHAINCODE_NAME} on ${CORE_PEER_ADDRESS}"
            fi
            ## Installing Chaincode
            peer lifecycle chaincode install ${CHAINCODE_NAME}.tar.gz
            echo "Chaincode installed for Fabric v.2.X"
            #query installed
            echo "peer query installed"
            peer lifecycle chaincode queryinstalled
            
            ## Check if chaincode got installed 
            INSTALLED=$(peer lifecycle chaincode queryinstalled -O json | jq '.installed_chaincodes?' | \
              jq --arg CCLABEL "${CHAINCODE_NAME}_${CHAINCODE_VERSION}" '.[]? | select(.label==$CCLABEL)')
            if ! [ -n "${INSTALLED}" ]
            then
              echo "Error while installing chaincode, exiting.."
              exit 1
            fi
          fi
        env:
        - name: PEER_NAME
          value: {{ $.Values.peer.name }}
        - name: PEER0_ADDRESS
          value: peer0.{{ $.Values.metadata.namespace }}:7051
        - name: PEER_ADDRESS
          value: {{ $.Values.peer.address }}
        - name: CORE_VM_ENDPOINT
          value: unix:///host/var/run/docker.sock
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.peer.loglevel }}
        - name: CORE_PEER_ID
          value: {{ $.Values.peer.name }}.{{ $.Values.metadata.namespace }}
        - name: CORE_PEER_ADDRESS
          value: {{ $.Values.peer.address }}
        - name: CORE_PEER_LOCALMSPID
          value: {{ $.Values.peer.localmspid }}
        - name: CORE_PEER_TLS_ENABLED
          value: "{{ $.Values.peer.tlsstatus }}"
        - name: CORE_PEER_TLS_ROOTCERT_FILE
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/admin/msp/tlscacerts/tlsca.crt
        - name: ORDERER_CA
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/orderer/tls/ca.crt
        - name: ORDERER_URL
          value: {{ $.Values.orderer.address }}
        - name: CORE_PEER_MSPCONFIGPATH
          value: /opt/gopath/src/github.com/hyperledger/fabric/crypto/admin/msp
        - name: CHAINCODE_NAME
          value: "{{ $.Values.chaincode.name }}"
        - name: CHAINCODE_MAINDIR
          value: "{{ $.Values.chaincode.maindirectory }}"
        - name: CHAINCODE_VERSION
          value: "{{ $.Values.chaincode.version }}"
        - name: CORE_CHAINCODE_BUILDER
          value: "{{ $.Values.chaincode.builder }}"
        - name: NETWORK_VERSION
          value: "{{ $.Values.metadata.network.version }}"
        - name: CC_RUNTIME_LANGUAGE
          value: "{{ $.Values.chaincode.lang }}"
        volumeMounts:
        - name: certificates
          mountPath: /opt/gopath/src/github.com/hyperledger/fabric/crypto
          readOnly: true

