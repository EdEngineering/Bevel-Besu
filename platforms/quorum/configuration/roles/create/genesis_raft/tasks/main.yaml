##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This task fetch node address of each node of all organizations
- name: Fetch the node address
  include_tasks: validator_node_data.yaml
  vars:
    vault: "{{ org2.vault }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org2

# This task checks if the genesis file is already stored in the vault or not
- name: Check if genesis already present in the vault
  shell: |
    vault kv get -field=genesisfile {{ vault.secret_path | default('secretsv2') }}/{{ component_ns }}/crypto/genesis
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_genesis_result
  ignore_errors: yes
  changed_when: false

#This task only runs when there is no local genesis file
- name: Copy genesis from vault to correct path
  copy:
    content: "{{ vault_genesis_result.stdout | b64decode }}"
    dest: "{{ network.config.genesis }}"
  when: 
  - not vault_genesis_result.failed
  - not add_new_org
  changed_when: false

# This task creates the genesis file from the template
- name: Create genesis.yaml
  template:
    src: "genesis.tpl"
    dest: "{{ build_path }}/genesis.yaml"
  when: 
  - vault_genesis_result.failed
  - not add_new_org

# This task reads the genesis file and put it in the variable
- name: Read the genesis.yaml file
  set_fact:
    genesis_yaml="{{ lookup('file', '{{ build_path }}/genesis.yaml') | from_yaml }}"
  when: 
  - vault_genesis_result.failed
  - not add_new_org

# This task converts the above read variable into json format and writes it in the genesis.json file
- name: Create genesis.json file
  copy:
    content: "{{ genesis_yaml | to_nice_json }}"
    dest: "{{ network.config.genesis }}"
  when: 
  - vault_genesis_result.failed
  - not add_new_org

# This tasks copy the genesis to the vault
- name: Copy genesis to Vault
  shell: |
    vault kv put {{ vault.secret_path | default('secretsv2') }}/{{ component_ns }}/crypto/genesis genesisfile="{{ genesis_yaml | to_nice_json | b64encode }}" 
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: 
  - vault_genesis_result.failed
  - not add_new_org

# This tasks copy the genesis to the vault
- name: Copy existing genesis to Vault
  shell: |
    vault kv put {{ vault.secret_path | default('secretsv2') }}/{{ component_ns }}/crypto/genesis genesisfile="{{ genesis }}" 
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  vars:
    genesis: "{{ lookup('file', '{{ network.config.genesis }}') | b64encode }}"
  when: 
  - vault_genesis_result.failed
  - add_new_org
