##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# Check if the keystore.json exist in build directory
- name: Check if enode is present in the build directory or not
  stat:
    path: "{{ build_path }}/{{ org1.name }}/{{ peernode.name }}/enode"
  register: file_status

# This task creates the build directory if it does not exist
- name: Create build directory if it does not exist
  file:
    path: "{{ build_path }}/{{ org1.name }}/{{ peernode.name }}"
    state: directory
    mode: '0755'
    recurse: yes
  when: file_status.stat.exists == False
  changed_when: false

# Fetch nodekey from vault
- name: Get the nodekey from vault and generate the enode
  shell: |
    vault kv get -field=nodekey {{ vault.secret_path | default('secretsv2') }}/{{ org1.name }}-quo/crypto/{{ peernode.name }}/quorum > {{ build_path }}/{{ org1.name }}/{{ peernode.name }}/nodekey
    {{ bin_install_dir }}/bootnode --nodekey={{ build_path }}/{{ org1.name }}/{{ peernode.name }}/nodekey --writeaddress > {{ build_path }}/{{ org1.name }}/{{ peernode.name }}/enode
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: file_status.stat.exists == False
  changed_when: false

# Get enode data
- name: Get enode_data
  set_fact:
    enode_data: "{{ lookup('file', '{{ build_path }}/{{ org1.name }}/{{ peernode.name }}/enode') }}"

# Get information about each validator node present in network.yaml and store it as a list of org,node
- name: Get validator and transaction node data for raft
  set_fact:
    enode_data_list={{ enode_data_list | default([]) + [ {'peer_name':peernode.name, 'enodeval':enode_data, 'external_url':org1.external_url_suffix, 'p2p_ambassador':peernode.p2p.ambassador, 'raft_ambassador':peernode.raft.ambassador } ] }}
  when: network.config.consensus == 'raft'
- name: Get validator and transaction node data
  set_fact:
    enode_data_list={{ enode_data_list | default([]) + [ {'peer_name':peernode.name, 'enodeval':enode_data, 'external_url':org1.external_url_suffix, 'p2p_ambassador':peernode.p2p.ambassador } ] }}
  when: network.config.consensus != 'raft'
