##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.metadata.namespace }}
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: {{ .Values.node.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
  name: {{ .Values.node.name }}
spec:
  serviceName: {{ .Values.node.name }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: consortiumchain
      name: {{ .Values.node.name }}
      service.rpc: {{ .Values.node.name }}
      app.kubernetes.io/name: {{ .Values.node.name }}
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: consortiumchain
        name: {{ .Values.node.name }}
        service.rpc: {{ .Values.node.name }}
        app.kubernetes.io/name: {{ .Values.node.name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
    spec:
      serviceAccountName: {{ .Values.vault.serviceaccountname }}
      imagePullSecrets:
          - name: {{ .Values.node.imagePullSecret }}
      volumes:
        - name: certificates
          emptyDir:
            medium: Memory
        - name: {{ .Values.node.name }}-genesis-volume
          configMap:
            name: genesis-{{ .Values.node.name }}
            items:
              - key: genesis.json.base64
                path: genesis.json.base64
      initContainers:
      - name: certificates-init
        image: {{ .Values.images.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ .Values.vault.address }}
        - name: VAULT_SECRET_PREFIX
          value: {{ .Values.vault.secretprefix }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ .Values.vault.role }}
        - name: MOUNT_PATH
          value: "/secret"
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          
          validateVaultResponse () {
            if echo ${2} | grep "errors"; then
              echo "ERROR: unable to retrieve ${1}: ${2}"
              exit 1
            fi
            if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
            then
              http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
              --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
              ${VAULT_ADDR}/v1/${vault_secret_key})
              curl_response=$?
              if test "$http_code" != "200" ; then
                  echo "Http response code from Vault - $http_code"
                  if test "$curl_response" != "0"; then
                     echo "Error: curl command failed with error code - $curl_response"
                     exit 1
                  fi
              fi
            fi
          }
          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          #Login to Vault and to get an approle token
          VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
            -H "Content-Type: application/json" \
            -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
            jq -r 'if .errors then . else .auth.client_token end')
          validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"

          OUTPUT_PATH="${MOUNT_PATH}/keys"
          mkdir -p ${OUTPUT_PATH}

          vault_secret_key="${VAULT_SECRET_PREFIX}/{{ .Values.vault.keyname }}"
          echo "Getting 3 keys from $vault_secret_key"
          LOOKUP_SECRET_RESPONSE=$(curl -sS \
            --header "X-Vault-Token:${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${vault_secret_key} | \
            jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE" 
          nodekey=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["nodekey"]')
          keystore=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["keystore"]')
          geth_password=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["geth_password"]')                    
          
          echo "${geth_password}" > ${OUTPUT_PATH}/passwords.txt          
          echo "${nodekey}" > ${OUTPUT_PATH}/nodekey
          echo "${keystore}" > ${OUTPUT_PATH}/{{ .Values.node.keystore }}

          vault_secret_key="${VAULT_SECRET_PREFIX}/{{ .Values.vault.tm_keyname }}"
          echo "Getting 2 keys from $vault_secret_key"
          LOOKUP_SECRET_RESPONSE=$(curl -sS \
            --header "X-Vault-Token:${VAULT_CLIENT_TOKEN}" \
            ${VAULT_ADDR}/v1/${vault_secret_key} | \
            jq -r 'if .errors then . else . end')
          validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE" 

          tmpub=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["tm.pub"]')
          tmkey=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["tm.key"]')
          echo "${tmpub}" > ${OUTPUT_PATH}/tm.pub
          echo "${tmkey}" > ${OUTPUT_PATH}/tm.key

        volumeMounts:
        - name: certificates
          mountPath: /secret
      - name: quorum-genesis-init-container
        image: "{{ .Values.images.node }}"
        imagePullPolicy: IfNotPresent
        command: [ "sh" ]
        args:
        - "-cx"
        - "mkdir -p $QUORUM_DATA_DIR;
          cat {{ .Values.node.mountPath }}/genesis/genesis.json.base64 | base64 -d > $QUORUM_DATA_DIR/genesis.json;
          if [ ! -f $QUORUM_DATA_DIR/genesis_created ]; then
            /usr/local/bin/geth --datadir $QUORUM_DATA_DIR init $QUORUM_DATA_DIR/genesis.json;
            touch $QUORUM_DATA_DIR/genesis_created;
          fi;
          "
        env:
          - name: QUORUM_DATA_DIR
            value: {{ .Values.node.mountPath }}/dd
        volumeMounts:
        - name: {{ .Values.node.name }}-pv
          mountPath: {{ .Values.node.mountPath }}
        - name: {{ .Values.node.name }}-genesis-volume
          mountPath: {{ .Values.node.mountPath }}/genesis

      containers:
      - name: constellation
        image: {{ .Values.images.constellation }}
        imagePullPolicy: IfNotPresent
        command: ["sh"]
        args:
        - "-cx"
        - "chmod 600 $QUORUM_HOME/crypto/keys/tm.key;

           mkdir -p $QUORUM_HOME/logs;
           mkdir -p $QUORUM_HOME/database;
           DDIR=$QUORUM_HOME/tm;
           printenv;
           args=\" --url={{ .Values.constellation.url }}  \
           --port={{ .Values.node.ports.constellation }} \
           --storage={{ .Values.constellation.storage }} \
           --workdir=$DDIR \
           --socket=$DDIR/tm.ipc \
           --publickeys=$QUORUM_HOME/crypto/keys/tm.pub \
           --privatekeys=$QUORUM_HOME/crypto/keys/tm.key \
           --verbosity=9 \
           --tls={{ .Values.constellation.tls }} \
           --tlsservertrust={{ .Values.constellation.trust }} \
           --tlsclienttrust={{ .Values.constellation.trust }} \
           --othernodes={{ .Values.constellation.othernodes }} \";
           /usr/local/bin/constellation-node $args  2>&1 | tee -a $QUORUM_HOME/logs/tm.log; "
          
        ports:
          - containerPort: {{ .Values.node.ports.constellation }}
        env:
          - name: QUORUM_HOME
            value: {{ .Values.node.mountPath }}
        volumeMounts:
        - name: certificates
          mountPath: {{ .Values.node.mountPath }}/crypto/
        - name: {{ .Values.node.name }}-pv
          mountPath: {{ .Values.node.mountPath }}
      - name: quorum
        image: "{{ .Values.images.node }}"
        imagePullPolicy: IfNotPresent
        command: ["sh"]
        args:
        - "-cx"
        - |-
          #!/usr/bin/env sh
          apk add curl;
          echo -n {{ .Values.staticnodes | toRawJson | quote }} > $QUORUM_DATA_DIR/static-nodes.json
          mkdir -p $QUORUM_DATA_DIR/geth
          mkdir -p $QUORUM_DATA_DIR/keystore          
          # touch $qd/passwords.txt

          cp $QUORUM_HOME/crypto/keys/{{ .Values.node.keystore }} $QUORUM_DATA_DIR/keystore/
          cp $QUORUM_HOME/crypto/keys/nodekey $QUORUM_DATA_DIR/geth/
          cp $QUORUM_HOME/crypto/keys/passwords.txt $QUORUM_DATA_DIR/password.txt
          
          echo what in this dir;
          ls  $QUORUM_DATA_DIR;

          rm -f $QUORUM_HOME/crypto/keys/{{ .Values.node.keystore }}
          rm -f $QUORUM_HOME/crypto/keys/nodekey
          rm -f $QUORUM_HOME/crypto/keys/passwords.txt
          
          sleep 5;
          echo slept for 5 to give transaction manager time to start;

          args=""
          NODE_STATUS=""
          if [ $CONSENSUS == 'raft' ]; then
            NODE_STATUS={{ .Values.node.status }}
          fi;
          if [ $CONSENSUS == 'raft' ] && [ $NODE_STATUS == 'additional' ]; then
            args="--raftdnsenable --raft --raftport {{ .Values.node.ports.raft }} --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,raft --raftjoinexisting {{ .Values.node.peer_id }}"
          fi;
          if [ $CONSENSUS == 'raft' ] && [ $NODE_STATUS == 'default' ]; then
            args="--raftdnsenable --raft --raftport {{ .Values.node.ports.raft }} --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,raft"
          fi;
          if [ $CONSENSUS == 'ibft' ]; then
            args=" --istanbul.blockperiod 3 --syncmode full --mine --miner.threads 1 --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,istanbul "
          fi;

          LOCK_STATUS={{ .Values.node.lock }}
          if [ $LOCK_STATUS = false ]
          then
            args=" ${args} --unlock 0 " 
          fi

          /usr/local/bin/geth \
           --datadir $QUORUM_DATA_DIR \
           $args \
           --identity {{ .Values.node.subject | quote }} \
           --vmdebug \
           --gcmode=archive \
           --nodiscover \
           --nat=none \
           --verbosity 9 \
           --emitcheckpoints \
           --rpc \
           --rpcaddr 0.0.0.0 \
           --rpcport {{ .Values.node.ports.rpc }} \
           --rpcvhosts=* \
           --port {{ .Values.node.ports.quorum }} \
           --password $QUORUM_DATA_DIR/password.txt 2>&1 | tee -a $QUORUM_HOME/logs/quorum.log;

        ports:
          - containerPort: {{ .Values.node.ports.rpc }}
          - containerPort: {{ .Values.node.ports.quorum }}
          {{- if eq $.Values.node.consensus "raft" }}
          - containerPort: {{ .Values.node.ports.raft }}
          {{- end }}
        env:
          - name: PRIVATE_CONFIG
            value: {{ .Values.node.mountPath }}/tm/tm.ipc
          - name: QUORUM_DATA_DIR
            value: {{ .Values.node.mountPath }}/dd
          - name: QUORUM_HOME
            value: {{ .Values.node.mountPath }}
          - name: TM_HOME
            value: {{ .Values.node.mountPath }}/tm/
          - name: CONSENSUS
            value: {{ .Values.node.consensus }}
        volumeMounts:
        - name: certificates
          mountPath: {{ .Values.node.mountPath }}/crypto/
        - name: {{ .Values.node.name }}-pv
          mountPath: {{ .Values.node.mountPath }}
      restartPolicy: Always
  volumeClaimTemplates: 
    - metadata:
        name: {{ .Values.node.name }}-pv
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.storagesize }}
