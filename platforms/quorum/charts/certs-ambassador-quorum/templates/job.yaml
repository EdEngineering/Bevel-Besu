##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $.Values.name }}-generate-ambassador-certs-job
  namespace: {{ .Values.metadata.namespace }}
  labels:
    app: {{ $.Values.name }}-generate-ambassador-certs-job
    app.kubernetes.io/name: {{ $.Values.name }}-generate-ambassador-certs-job
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
    backoffLimit: 6
    template:
      metadata:
        labels:
          app: {{ $.Values.name }}-generate-ambassador-certs-job
          app.kubernetes.io/name: {{ $.Values.name  }}-generate-ambassador-certs-job
          app.kubernetes.io/instance: {{ .Release.Name }}
      spec:
        restartPolicy: "OnFailure"
        serviceAccountName: {{ $.Values.vault.serviceaccountname }}
        securityContext:
          fsGroup: 1000
        initContainers:
        - name: init-check-certificates
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: IfNotPresent
          env:
            - name: VAULT_ADDR
              value: {{ $.Values.vault.address }}
            - name: VAULT_APP_ROLE
              value: {{.Values.vault.role}}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.vault.authpath }}
            - name: CERTS_SECRET_PREFIX
              value: {{ $.Values.vault.certsecretprefix }}
            - name: MOUNT_PATH
              value: "/certcheck"
          command: ["sh", "-c"]
          args:
          - |-
              #!/usr/bin/env sh
              validateVaultResponse () {
                if echo ${2} | grep "errors"; then
                  echo "ERROR: unable to retrieve ${1}: ${2}"
                  exit 1
                fi
                if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                then
                  http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                  --header "X-Vault-Token: ${VAULT_TOKEN}" \
                  ${VAULT_ADDR}/v1/${1})
                  curl_response=$?
                  if test "$http_code" != "200" ; then
                      echo "Http response code from Vault - $http_code and curl_response - $curl_response"
                      if test "$curl_response" != "0"; then
                        echo "Error: curl command failed with error code - $curl_response"
                        exit 1
                      fi
                  fi
                fi
              }
              # Setting up the environment to get secrets/certificates from Vault
              echo "Getting secrets/certificates from Vault server"
              KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
              validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
              echo "Logged into Vault"
              mkdir -p ${MOUNT_PATH}
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/crypto/{{ $.Values.name }}/certs | jq -r 'if .errors then . else . end')
              data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data')"
              if [ "$field" = "null"  ] || [[ "$field" = "parse error"* ]] || [ "$field" = "" ]
              then
                echo "Certficates absent in vault. Ignore error warning"
                touch ${MOUNT_PATH}/absent.txt
              else
                validateVaultResponse "${CERTS_SECRET_PREFIX}/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                echo "Certificates present in vault"
                touch ${MOUNT_PATH}/present.txt
              fi
              echo "Done checking for certificates in vault"
          volumeMounts:
          - name: credentials
            mountPath: /DATA
          - name: certcheck
            mountPath: /certcheck
        containers:
        - name: certs-generation
          image: {{ .Values.image.certsContainerName }}
          env:
            - name: BASE_DIR
              value: "{{ .Values.volume.baseDir }}"
            - name: DOMAIN_NAME
              value: "{{ .Values.opensslVars.domain_name }}"
            - name: DOMAIN_NAME_API
              value: "{{ .Values.opensslVars.domain_name_api }}"
            - name: DOMAIN_NAME_WEB
              value: "{{ .Values.opensslVars.domain_name_web }}"
            - name: DOMAIN_NAME_TESSERA
              value: "{{ .Values.opensslVars.domain_name_tessera }}"
            - name: NODE_NAME
              value: "{{ $.Values.name }}"
            - name: CERTS_SECRET_PREFIX
              value: {{ $.Values.vault.certsecretprefix }}
            - name: VAULT_ADDR
              value: {{ $.Values.vault.address }}
            - name: VAULT_APP_ROLE
              value: {{.Values.vault.role}}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.vault.authpath }}
            - name: CERTS_SECRET_PREFIX
              value: {{ $.Values.vault.certsecretprefix }}
            - name: ROOT_SUBJECT
              value: "{{ .Values.subjects.root_subject }}"
            - name: CERT_SUBJECT
              value: "{{ .Values.subjects.cert_subject }}"
            - name: MOUNT_PATH
              value: "/certcheck"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
          - |-
            if [ -e ${MOUNT_PATH}/present.txt ]
            then
              echo "Certificates already present in the vault. Skipping.."
              exit 0
            fi
            # create directories
            mkdir -p ${MOUNT_PATH}/DATA/rootca
            mkdir -p ${MOUNT_PATH}/DATA/ambassadortls
            cd ${MOUNT_PATH}/DATA/rootca
            set -x
            cat <<EOF >openssl.conf
            [req]
            req_extensions = v3_ca
            distinguished_name = dn
            [dn]
            [v3_ca]
            basicConstraints = critical, CA:TRUE
            keyUsage = critical,digitalSignature, keyCertSign, cRLSign
            extendedKeyUsage=serverAuth,clientAuth
            subjectKeyIdentifier = hash
            authorityKeyIdentifier = keyid:always

            [v3_nonca]
            basicConstraints = critical, CA:FALSE
            keyUsage = critical,digitalSignature, keyCertSign, cRLSign
            extendedKeyUsage=serverAuth,clientAuth
            subjectKeyIdentifier = hash
            authorityKeyIdentifier = keyid:always
            EOF
            keytool -genkey -alias rootca -dname "${ROOT_SUBJECT}" -keystore rootca.jks -storepass quorum -keypass quorum
            openssl ecparam -name prime256v1 -genkey -noout -out rootca.key
            openssl req -x509 -config openssl.conf -new -nodes -key rootca.key -days 1024 -out rootca.pem -extensions v3_ca -subj "/${ROOT_SUBJECT}"
            openssl pkcs12 -export -name cert -inkey rootca.key -in rootca.pem -out rootcacert.pkcs12 -cacerts -passin pass:'quorum' -passout pass:'quorum'
            openssl pkcs12 -export -name key -inkey rootca.key -in rootca.pem -out rootcakey.pkcs12 -passin pass:'quorum' -passout pass:'quorum'
            keytool -importkeystore -srckeystore rootcacert.pkcs12 -srcstoretype PKCS12 -srcstorepass quorum -destkeystore rootca.jks -deststorepass quorum
            keytool -importkeystore -srckeystore rootcakey.pkcs12 -srcstoretype PKCS12 -srcstorepass quorum -destkeystore rootca.jks -deststorepass quorum
            cd ${MOUNT_PATH}/DATA/ambassadortls
            cat <<EOF >openssl${NODE_NAME}.conf
            [dn]
            CN=cmani.rc.dev2.aws.blockchaincloudpoc-develop.com
            [req]
            distinguished_name = dn
            [EXT]
            keyUsage=digitalSignature
            extendedKeyUsage=serverAuth
            subjectAltName = @alt_names
            [v3_nonca]
            basicConstraints = critical, CA:FALSE
            keyUsage = critical,digitalSignature, keyCertSign, cRLSign
            extendedKeyUsage=serverAuth,clientAuth
            subjectKeyIdentifier = hash
            authorityKeyIdentifier = keyid:always

            [alt_names]
            DNS.1 = ${DOMAIN_NAME}
            DNS.2 = ${DOMAIN_NAME_API}
            DNS.3 = ${DOMAIN_NAME_WEB}
            DNS.4 = ${DOMAIN_NAME_TESSERA}
            EOF
            cat openssl${NODE_NAME}.conf
            cd ${MOUNT_PATH}/DATA/ambassadortls
            openssl ecparam -name prime256v1 -genkey -noout -out ${NODE_NAME}.key
            openssl req -new -nodes -key ${NODE_NAME}.key -days 1000 -out ${NODE_NAME}.csr -extensions EXT -subj "/CN=${DOMAIN_NAME}" -config openssl${NODE_NAME}.conf
            openssl x509 -extfile openssl${NODE_NAME}.conf -req -days 1000 -in ${NODE_NAME}.csr -CA ${MOUNT_PATH}/DATA/rootca/rootca.pem -CAkey ${MOUNT_PATH}/DATA/rootca/rootca.key -out ${NODE_NAME}.pem -set_serial 01 -extensions v3_nonca
            cat ${NODE_NAME}.pem > ${NODE_NAME}-certchain.pem
            cat ${MOUNT_PATH}/DATA/rootca/rootca.pem >> ${NODE_NAME}-certchain.pem
            #creating a dummy file to perform check if last line is executed or not.
            touch ${MOUNT_PATH}/DATA/done.txt
          volumeMounts:
          - name: certcheck
            mountPath: /certcheck
        - name: store-certs
          image: {{ .Values.image.certsContainerName }}
          imagePullPolicy: IfNotPresent
          env:
             - name: VAULT_ADDR
               value: {{ $.Values.vault.address }}
             - name: VAULT_APP_ROLE
               value: {{ $.Values.vault.role}}
             - name: BASE_DIR
               value: {{ $.Values.volume.baseDir }}
             - name: NODE_NAME
               value: "{{ $.Values.name }}"
             - name: KUBERNETES_AUTH_PATH
               value: {{ $.Values.vault.authpath }}
             - name: CERTS_SECRET_PREFIX
               value: {{ $.Values.vault.certsecretprefix }}
             - name: MOUNT_PATH
               value: "/certcheck"
          command: ["/bin/bash", "-c"]
          args:
          - |-
            #!/usr/bin/env sh
            validateVaultResponse () {
              if echo ${2} | grep "errors"; then
                 echo "ERROR: unable to retrieve ${1}: ${2}"
                 exit 1
              fi
            }

            if [ -e /certcheck/present.txt ]
            then
              echo "Certificates already present in the vault. Skipping.."
              exit 0
            fi
            # setting up env to get secrets from vault
            KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
            VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
            validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
            COUNTER=1
            cd ${MOUNT_PATH}/DATA
            while [ "$COUNTER" -lt 10 ]
            do
              if [ -e done.txt ]
              then
                cd ${MOUNT_PATH}/DATA
                echo "found certificates, performing vault put"
                # Use -w0 to get single line base64 -w0
                ROOT_CA=$(cat ./rootca/rootca.jks | base64 -w0)
                ROOTCAPEM=$(cat ./rootca/rootca.pem | base64 -w0)
                ROOTCAKEY=$(cat ./rootca/rootca.key | base64 -w0)
                AMBASSADOR_CERTS=$(cat ./ambassadortls/${NODE_NAME}-certchain.pem | base64 -w0)
                AMBASSADOR_KEYS=$(cat ./ambassadortls/${NODE_NAME}.key | base64 -w0)
                ROOTCACERTPKCS_12=$(cat ./rootca/rootcacert.pkcs12 | base64 -w0)
                ROOTCAKEYSPKCS_12=$(cat ./rootca/rootcakey.pkcs12 | base64 -w0)
                echo "{\"data\": {
                 \"rootca\":\"${ROOT_CA}\",
                 \"rootcakey\": \"${ROOTCAKEY}\",
                 \"rootcapem\": \"${ROOTCAPEM}\",
                 \"ambassadorcrt\": \"${AMBASSADOR_CERTS}\",
                 \"ambassadorkey\": \"${AMBASSADOR_KEYS}\",
                 \"rootcacert.pkcs12\": \"${ROOTCACERTPKCS_12}\",
                 \"rootcakey.pkcs12\": \"${ROOTCAKEYSPKCS_12}\"
                 }}" > payload.json
                 curl \
                 --header "X-Vault-Token: ${VAULT_TOKEN}" \
                 --request POST \
                 --data @payload.json \
                 ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/crypto/${NODE_NAME}/certs
                 rm payload.json
                 # get certs from vault
                 LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/crypto/${NODE_NAME}/certs | jq -r 'if .errors then . else . end')
                 R_CA=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["rootca"]' 2>&1)
                 R_KEY=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["rootcakey"]' 2>&1)
                 R_PEM=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["rootcapem"]' 2>&1)
                 A_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["ambassadorcrt"]' 2>&1)
                 A_KEY=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["ambassadorkey"]' 2>&1)
                 R_CERT_PKCS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["rootcacert.pkcs12"]' 2>&1)
                 R_KEY_PKCS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["rootcakey.pkcs12"]' 2>&1)
                 for field in "$R_CA" "$R_KEY" "$R_PEM" "$A_CERT" "$A_KEY" "$R_CERT_PKCS" "$R_KEY_PKCS"
                 do
                 if [ "$field" = "null"  ] || [[ "$field" = "parse error"* ]] || [ "$field" = "" ]
                 then
                    echo "certificates write or read fail"
                     break
                     else
                    echo "certificates write or read success"
                    sleep 5
                   COUNTER=`expr "$COUNTER" + 1`
                 fi
                done
                if [ "$COUNTER" -gt 30 ]
                  then
                  echo "Retry attempted `expr $COUNTER - 1` times, Certificates have not been saved."
                  exit 1
                else
                  echo "Certificates have  been saved"
                fi
               echo "completed"
             fi
            done
          volumeMounts:
          - name: certcheck
            mountPath: /certcheck
        imagePullSecrets:
          - name: {{ $.Values.image.imagePullSecret }}
        volumes:
          - name: certcheck
            emptyDir:
              medium: Memory
          - name: credentials
            emptyDir:
              medium: Memory
          - name: certs-keys
            emptyDir:
              medium: Memory
          - name: certs-etc
