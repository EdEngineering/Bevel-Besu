##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Values.metadata.name }}"
  namespace: "{{ $.Values.metadata.namespace }}"
  labels:
    app: "{{ $.Values.metadata.name }}"
    app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: "{{ $.Values.metadata.name }}"
        app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      securityContext:
        fsGroup: 1000      
      initContainers:
      - name: crypto-init
        image: {{ $.Values.image.initContainerName }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: CERTS_SECRET_PREFIX
          value: {{ .Values.vault.certsecretprefix }}          
        - name: MOUNT_PATH
          value: "/certcheck"
        - name: PEER_NAME
          value: "{{ $.Values.peer.name }}"                                          
        volumeMounts:
        - name: certcheck
          mountPath: /certcheck  
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env bash
          validateVaultResponse () {
            if echo ${2} | grep "errors"; then
              echo "ERROR: unable to retrieve ${1}: ${2}"
              exit 1
            fi
            if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
            then
              http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
              --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
              ${VAULT_ADDR}/v1/${vault_secret_key})
              curl_response=$?
              if test "$http_code" != "200" ; then
                  echo "Http response code from Vault - $http_code"
                  if test "$curl_response" != "0"; then
                     echo "Error: curl command failed with error code - $curl_response"
                     exit 1
                  fi
              fi
            fi
          }
          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          # Login to Vault and so I can get an approle token
          VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
            -H "Content-Type: application/json" \
            -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
            jq -r 'if .errors then . else .auth.client_token end')
          validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"
          mkdir -p ${MOUNT_PATH}
          LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/crypto/${PEER_NAME}/quorum | jq -r 'if .errors then . else . end')
          if echo ${LOOKUP_SECRET_RESPONSE} | grep "errors"
          then
            echo "Certificates absent in vault. Ignore error warning"
            touch ${MOUNT_PATH}/absent.txt
          else 
            checknodekey=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["keystore"]')
            if [ -z "$checknodekey" ] || [ "$checknodekey" == "null" ]
            then
              echo "Certificates absent in vault. Ignore error warning"
              touch ${MOUNT_PATH}/absent.txt
            else
              validateVaultResponse " secret (${CERTS_SECRET_PREFIX}/crypto/${PEER_NAME}/quorum)" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              echo "Certificates present in vault"
              touch ${MOUNT_PATH}/present.txt
            fi    
          fi 
          echo "Done checking for certificates in vault"
      containers:
      - name: generate-cryptomaterials
        image: {{ $.Values.image.node }}
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: certcheck
            mountPath: /certcheck
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        - name: MOUNT_PATH
          value: "/certcheck"
        - name: CERTS_SECRET_PREFIX
          value: {{ .Values.vault.certsecretprefix }}                         
        - name: GETH_PASSPHRASE
          value: "{{ $.Values.peer.gethPassphrase }}"
        - name: PEER_NAME
          value: "{{ $.Values.peer.name }}"
        - name: DB_USER
          value: "demouser"
        - name: DB_PASSWORD
          value: "password"                                    
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          apk update && apk add jq curl openssl;
          validateVaultResponse () {
            if echo ${2} | grep "errors"; then
              echo "ERROR: unable to retrieve ${1}: ${2}"
              exit 1
            fi
            if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
            then
              http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
              --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
              ${VAULT_ADDR}/v1/${vault_secret_key})
              curl_response=$?
              if test "$http_code" != "200" ; then
                  echo "Http response code from Vault - $http_code"
                  if test "$curl_response" != "0"; then
                     echo "Error: curl command failed with error code - $curl_response"
                     exit 1
                  fi
              fi
            fi
          }
          if [ -e ${MOUNT_PATH}/present.txt ]
              then
                echo "Certificates already present in the vault. Skipping.."
                exit 0
          fi
          
          echo "Fetching nodekey from vault"
          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          # Login to Vault and so I can get an approle token
          VAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \
            -H "Content-Type: application/json" \
            -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | \
            jq -r 'if .errors then . else .auth.client_token end')
          validateVaultResponse 'vault login token' "${VAULT_CLIENT_TOKEN}"
          VAULT_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/crypto/${PEER_NAME}/quorum | jq -r 'if .errors then . else . end')
          validateVaultResponse " secret (${CERTS_SECRET_PREFIX}/crypto/${PEER_NAME}/quorum)" "${VAULT_RESPONSE}" "LOOKUPSECRETRESPONSE"
          nodekey=$(echo ${VAULT_RESPONSE} | jq -r '.data.data["nodekey"]')
          
          echo "If nodekey does not exist, we generate one and will be saved in vault"
          if [ -z "$nodekey" ] || [ "$nodekey" == "null" ]
            then
              bootnode -genkey nodevalue
              nodekey=$(cat nodevalue)
            else
              echo "Nodekey already exists"
          fi
          echo "Creating files and certs"
          echo $nodekey >> nodekey
          echo $GETH_PASSPHRASE >> password
          bootnode --nodekey nodekey --writeaddress >> enode
          geth account new --datadir ${PEER_NAME} --password password
          cp ${PEER_NAME}/keystore/* keystorefile
          tr -d "\n\r" < keystorefile > newchange
          openssl base64 -in newchange -out base64_keystore
          echo "
            {
              \"data\": {
              \"nodekey\": \"$nodekey\",
              \"keystore\": \"$(cat base64_keystore)\",
              \"db_password\": \"${DB_PASSWORD}\",
              \"geth_password\": \"${GETH_PASSPHRASE}\",
              \"db_user\": \"${DB_USER}\"
           }}" > finalJSON.json

          vault_secret_key="${CERTS_SECRET_PREFIX}/crypto/${PEER_NAME}/quorum"
          # Save the generated keys to VAULT
          LOOKUP_SECRET_RESPONSE=$(curl -sS -H "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" \
            -H "Content-Type: application/json" \
            -X POST \
            -d @finalJSON.json \
            ${VAULT_ADDR}/v1/${vault_secret_key} | \
            jq -r 'if .errors then . else .auth.client_token end')
          validateVaultResponse " secret $vault_secret_key" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"

          # get nodekey from vault
          LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/crypto/${PEER_NAME}/quorum | jq -r 'if .errors then . else . end')
          nodekey=$(echo ${VAULT_RESPONSE} | jq -r '.data.data["nodekey"]' 2>&1)
          # get keystore from vault
          keystore=$(echo ${VAULT_RESPONSE} | jq -r '.data.data["keystore"]' 2>&1)
          if [ "$nodekey" == "null" ] || [ "$cat base64_keystore" == "null" ] || [ "$nodekey" == "parse error"* ] || [ "$cat base64_keystore" == "parse error"* ]
          then
            echo "certificates write or read fail"
            sleep {{ $.Values.healthcheck.readinessthreshold  }}
            if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
            then
              echo "Retry attempted $COUNTER times, certificates have not been saved"
              exit 1
            fi
            COUNTER=`expr "$COUNTER" + 1`
          fi

      volumes:
        - name: certcheck
          emptyDir:
            medium: Memory

