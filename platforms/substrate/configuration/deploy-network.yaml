##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This playbook deploys a DLT network on existing Kubernetes clusters
# The Kubernetes clusters should already be created and the infomation to connect to the
#  clusters be updated in the network.yaml file that is used as an input to this playbook
###########################################################################################
# To Run this playbook from this directory, use the following command (network.yaml also in this directory)
#  ansible-playbook deploy-network.yaml -e "@./network.yaml"
############################################################################################
# Please ensure that the ../../shared/configuration playbooks have been run using the same network.yaml
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:      
  # delete build directory 
  - name: Remove build directory
    file:
      path: "./build"
      state: absent

  # create namespace, service account and clusterrolebinding
  - name: "Create namespace and service account"
    include_role: 
      name: create/namespace_serviceaccount
    vars:
      component_ns: "{{ item.name | lower }}-subs"
      organisation: "{{ item.name | lower }}"
      kubernetes: "{{ item.k8s }}"
      gitops: "{{ item.gitops }}"
    loop: "{{ network['organizations'] }}"

  # Create Storageclass
  - name: Create Storage Class
    include_role:
      name: create/storageclass
    vars:
      storageclass_name: "{{ item.cloud_provider }}storageclass"
      git_dir: "{{ item.gitops.release_dir }}"
      org: "{{ item }}"
      kubernetes: "{{ item.k8s }}"
    loop: "{{ network['organizations'] }}"
  
  # Setup Vault-Kubernetes accesses and Regcred for docker registry
  - name: "Setup vault"   
    include_role: 
      name: "setup/vault_kubernetes"
    vars:
      component_ns: "{{ item.name | lower }}-subs"
      kubernetes: "{{ item.k8s }}"
      vault: "{{ item.vault }}"
      component_name: "{{ item.name | lower }}-vaultk8s-job"
      component_auth: "substrate{{ item.name | lower }}"
      component_type: "organization"
    loop: "{{ network['organizations'] }}"

  # Generate Ambassador certificate for nodes
  - name: "Create ambassador certificates for Nodes" 
    include_role: 
      name: create/certificates/ambassador
    vars:
      root_subject: "{{ network.config.subject }}"
      cert_subject: "{{ network.config.subject | regex_replace(',', '/') }}"
      services: "{{ item.services }}"
      organisation: "{{ item.name | lower }}"
      component_ns: "{{ item.name | lower }}-subs"
      component_name: "{{ item.name | lower }}"
      kubernetes: "{{ item.k8s }}"
      vault: "{{ item.vault }}"
    loop: "{{ network['organizations']}}"
    when: network.env.proxy == "ambassador"

  # This role generates the key materials and stores them in vault
  - name: "Generate key materials for Nodes"
    include_role:
      name: create/keys
    vars:
      name: "{{ item.name | lower }}"        
      component_name: "{{ item.name | lower }}"
      component_ns: "{{ item.name | lower }}-subs"
      vault: "{{ item.vault }}"
      peers: "{{ item.services.peers }}"
      charts_dir: "{{ item.gitops.chart_source }}"
      values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
      org: "{{ item }}"
      gitops: "{{ item.gitops }}"
      kubernetes: "{{ item.k8s }}"
    loop: "{{ network['organizations'] }}"

  # This role generates the genesis.json for all orgs of the network
  - name: "Generate genesis for the network"
    include_role:
      name: create/genesis
    vars:
      build_path: "./build"
      sudo_org_query: "organizations[?type=='superuser']"
      org: "{{ network | json_query(sudo_org_query) | first }}"

  # This role deploys Substrate bootnodes
  - name: "Deploy Bootnodes"
    include_role:
      name: create/bootnode
    vars:
      build_path: "./build"
      kubernetes: "{{ item.k8s }}"
      component_ns: "{{ item.name | lower }}-subs"
      name: "{{ item.name | lower }}"
      peers: "{{ item.services.peers }}"
    loop: "{{ network['organizations'] }}"

  # This role generates the bootnode list file
  - name: "Generate bootnode file list for the network"
    include_role:
      name: create/bootnodefile

  # This role deploys Substrate validator nodes
  - name: "Deploy Substrate validators"
    include_role:
      name: create/validator_node
    vars:
      build_path: "./build"
      kubernetes: "{{ item.k8s }}"
      component_ns: "{{ item.name | lower }}-subs"
      name: "{{ item.name | lower }}"
      peers: "{{ item.services.peers }}"
    loop: "{{ network['organizations'] }}"

  # Deploy ipfs bootnodes
  - name: "Deploy ipfs bootnodes"
    include_role: 
      name: create/ipfs_bootnode
    vars:
      build_path: "./build"
      charts_dir: "{{ item.gitops.chart_source }}"
      values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
      org: "{{ item }}"
      vault: "{{ item.vault }}"
      peers: "{{ item.services.peers }}"
      gitops: "{{ item.gitops }}"
      component_name: "{{ item.name | lower }}"
      component_ns: "{{ item.name | lower }}-subs"
      name: "{{ item.name | lower }}"
    loop: "{{ network['organizations'] }}"
    when: network.config.node_image == "inteli-poc/dscp-node"

  # This role generates the ipfsbootnode list file
  - name: "Generate ipfsbootnode file list for the network"
    include_role:
      name: create/ipfsbootnodefile
    when: network.config.node_image == "inteli-poc/dscp-node"

  # This role deploys Substrate member nodes
  - name: "Deploy Substrate members"
    include_role:
      name: create/member_node
    vars:
      build_path: "./build"
      kubernetes: "{{ item.k8s }}"
      vault: "{{ item.vault }}"
      component_ns: "{{ item.name | lower }}-subs"
      name: "{{ item.name | lower }}"
      peers: "{{ item.services.peers }}"
    loop: "{{ network['organizations'] }}"
  
  vars: #These variables can be overriden from the command line
    install_os: "linux"                 #Default to linux OS
    install_arch:  "amd64"              #Default to amd64 architecture
    bin_install_dir:  "~/bin"            #Default to /bin install directory for binaries
    add_new_org: false
