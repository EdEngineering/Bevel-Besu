##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

#############################################################################################
# This role setups communication between the vault and kubernetes cluster and install 
# neccessary configurations.
#############################################################################################

# Check if namespace created
- name: "Waiting for the namespace {{ component_ns }} to be created"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/k8_component"
  vars:
    component_type: "Namespace"
    component_name: "{{ component_ns }}"
    type: "retry"

###############################################################################################
# This task creates the docker pull credentials for image registry
- name: "Create docker credentials secret"
  include_role:
    name: create/k8s_secrets
  vars: 
    namespace: "{{ component_ns }}"    
    check: "docker_credentials"
  when: network.docker.password is defined

# This task checks if the vault policy already exists
- name: "Checking if the vault policies already exists"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    check: "vault_policies"
    component_name: "{{ item.name | lower }}"
  ignore_errors: yes

- set_fact:
    this_policy_result: "{{ vault_policy_result }}"

#############################################################################################
# This task creates secrets for the root token
- name: "Create vault token secret"
  include_role:
    name: create/k8s_secrets
  vars: 
    namespace: "{{ component_ns }}"    
    check: "token_secret"
  when: this_policy_result.failed

# Ensures the build directory
- name: "Creating the build directory"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "./build"

#####################################################################################################################
# This task creates the access policy for various Substrate entity
- name: Create policy for Access Control
  vars:  
    name: "{{ item.name | lower }}"
  template:
    src: "policy-ro.tpl"
    dest: "./build/vault-crypto-{{ component_type }}-{{ name }}-ro.hcl"
  when: this_policy_result.failed
  changed_when: false
  
#############################################################################################
# This tasks gets the kubernetes server url
- name: Get the kubernetes server url
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " "
  register: kubernetes_server_url
  when: this_policy_result.failed

#####################################################################################################################
# This tasks generate vault_kubernetes helmrelease file
- name: "Create value file for vault_kubernetes"
  include_role:
    name: create/helm_component
  vars:  
    name: "{{ item.name | lower }}"
    type: "vault_k8s_mgmt"    
    git_url: "{{ item.gitops.git_url }}"
    git_branch: "{{ item.gitops.branch }}"
    charts_dir: "{{ item.gitops.chart_source }}"
    vault: "{{ item.vault }}"
    k8s: "{{ item.k8s }}"
    kubernetes_url: "{{ kubernetes_server_url.stdout }}"
    alpine_image: "hyperledgerlabs/alpine-utils:1.0"
    policydata: "{{ lookup('file', './build/vault-crypto-{{ component_type }}-{{ name }}-ro.hcl') }}"
    values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
  when: this_policy_result.failed
  
#Git Push : Pushes the above generated files to git directory 
- name: Git Push
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/git_push"
  vars:
    GIT_DIR: "{{ playbook_dir }}/../../../"
    gitops: "{{ item.gitops }}"    
    GIT_RESET_PATH: "platforms/substrate/configuration"
    msg: "[ci skip] Pushing vault_kubernetes files"
  when: this_policy_result.failed
   
# Check if vault_kubernetes is completed
- name: Check if vault_kubernetes job is completed
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
  vars:
    component_type: Job
    namespace: "{{ component_ns }}"
    kubernetes: "{{ item.k8s }}"
  when: this_policy_result.failed

#############################################################################################
# This task deletes the root token
- name: "Delete vault token secret"
  include_role:
    name: delete/k8s_secrets
  vars: 
    namespace: "{{ component_ns }}"
    vault: "{{ item.vault }}"
    kubernetes: "{{ item.k8s }}"
    check: "token_secret"
  when: this_policy_result.failed
