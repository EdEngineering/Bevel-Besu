##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

##############################################################################################
# This role creates the job value file for stewards
##############################################################################################

##############################################################################################
# This tasks ensures the directory of auth job existance, if not exits it creates a new one
- name: Ensures {{ release_dir }}/{{ component_type }}/{{ component_name }} dir exists
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "{{ release_dir  }}/{{ component_type }}/{{ component_name }}"

##############################################################################################
# This tasks gets the kubernetes server url
- name: Get the kubernetes server url
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " "
  register: kubernetes_server_url

##############################################################################################
# Generate vault policy and role for trustee
- name: Trustee vault policy and role generating
  template:
    src: "{{ dlt_templates[component_type] }}"
    dest: "{{ values_file }}"
  vars:
    identity_name: "{{ trusteeItem.name }}"
    values_file: "{{ release_dir }}/{{ component_type }}/{{ component_name }}/{{ identity_name }}.yaml"
    chart: "{{ chartName }}"
    policy_path: "path \\\"/{{ organization }}/data/trustees/{{ identity_name }}/*\\\""
    policy_capabilities: "{ capabilities = [ \\\"read\\\", \\\"list\\\" ] }"
    kubernetes_server: "{{ kubernetes_server_url.stdout }}"
  loop: "{{ services.trustees }}"
  loop_control:
    loop_var: trusteeItem
  when: services.trustees is defined

##############################################################################################
# Generate Indy vault policy and role for stewards
- name: Stewards vault policy and role generating
  template:
    src: "{{ dlt_templates[component_type] }}"
    dest: "{{ values_file }}"
  vars:
    identity_name: "{{ stewardItem.name }}"
    values_file: "{{ release_dir }}/{{ component_type }}/{{ component_name }}/{{ identity_name }}.yaml"
    chart: "{{ chartName }}"
    policy_path: "path \\\"/{{ organization }}/data/stewards/{{ identity_name }}/*\\\""
    policy_capabilities: "{ capabilities = [ \\\"read\\\", \\\"list\\\" ] }"
    kubernetes_server: "{{ kubernetes_server_url.stdout }}"
  loop: "{{ services.stewards }}"
  loop_control:
    loop_var: stewardItem
  when: services.stewards is defined

##############################################################################################
# Generate Indy vault policy and role for endorser
- name: Endorser vault policy and role generating
  template:
    src: "{{ dlt_templates[component_type] }}"
    dest: "{{ values_file }}"
  vars:
    identity_name: "{{ endorserItem.name }}"
    values_file: "{{ release_dir }}/{{ component_type }}/{{ component_name }}/{{ identity_name }}.yaml"
    chart: "{{ chartName }}"
    policy_path: "path \\\"/{{ organization }}/data/endorsers/{{ identity_name }}/*\\\""
    policy_capabilities: "{ capabilities = [ \\\"read\\\", \\\"list\\\" ] }"
    kubernetes_server: "{{ kubernetes_server_url.stdout }}"
  loop: "{{ services.endorsers }}"
  loop_control:
    loop_var: endorserItem
  when: services.endorsers is defined

##############################################################################################
# Generate Indy vault policy and role for bevel-ac
- name: bevel-ac vault policy and role generating
  template:
    src: "{{ dlt_templates[component_type] }}"
    dest: "{{ values_file }}"
  vars:
    identity_name: "bevel-ac"
    values_file: "{{ release_dir }}/{{ component_type }}/{{ component_name }}/{{ identity_name }}.yaml"
    chart: "{{ chartName }}"
    policy_path: "path \\\"/{{ organization }}/data/+/+/+/public*\\\""
    policy_capabilities: "{ capabilities = [ \\\"read\\\", \\\"list\\\" ] }"
    kubernetes_server: "{{ kubernetes_server_url.stdout }}"
