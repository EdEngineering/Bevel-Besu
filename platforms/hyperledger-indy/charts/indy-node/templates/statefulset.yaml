##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ $.Values.metadata.name }}"
  namespace: "{{ $.Values.metadata.namespace }}"
spec:
  serviceName: "{{ $.Values.metadata.name }}"
  replicas: 1
  selector:
    matchLabels:
      app: "{{ $.Values.metadata.name }}"
  template:
    metadata:
      labels:
        app: "{{ $.Values.metadata.name }}"
    spec:
      securityContext:
        fsGroup: 1000
      serviceAccountName: {{ $.Values.vault.serviceAccountName }}
      initContainers:
      - name:  "{{ $.Values.image.initContainer.name }}"
        image:  "{{ $.Values.image.initContainer.repository }}"
        imagePullPolicy: IfNotPresent
        env:
         - name: VAULT_ADDR
           value: {{ $.Values.vault.address }}
         - name: VAULT_AUTH_PATH
           value: {{ $.Values.vault.authPath }}
         - name: VAULT_ROLE
           value: {{ $.Values.vault.role }}
         - name: KEY_PATH
           value: {{ $.Values.vault.keyPath }}
         - name: NODE_ID
           value: {{ $.Values.vault.nodeId }}
         - name: ORGANIZATION_NAME
           value: "{{ $.Values.organization.name }}"
         - name: ADD_NEW_ORG
           value: "{{ $.Values.add_new_org }}"
        command:
        - "sh"
        - "-c"
        - >
          apk update;
          apk add curl jq;

          validateVaultResponse () {
          if echo ${2} | grep "errors"; then
           echo "ERROR: unable to retrieve ${1}: ${2}"
           exit 1
           fi
          }

          KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token);

          response=$(curl -s -o /dev/null -w "%{http_code}" $VAULT_ADDR/v1/sys/health);
          if [ $response != 200 ]; then
            exit 1
          fi

          curl --request POST --data '{"jwt": "'"$KUBE_TOKEN"'", "role": "'"$VAULT_ROLE"'"}' $VAULT_ADDR/v1/auth/$VAULT_AUTH_PATH/login | jq -j '.auth.client_token' > token;
          X_VAULT_TOKEN=$(cat token);

          if $ADD_NEW_ORG ;
          then
            mkdir -p ${KEY_PATH}/bls_keys ${KEY_PATH}/private_keys ${KEY_PATH}/public_keys ${KEY_PATH}/sig_keys ${KEY_PATH}/verif_keys ${KEY_PATH}C/private_keys ${KEY_PATH}C/public_keys ${KEY_PATH}C/sig_keys ${KEY_PATH}C/verif_keys ${KEY_PATH}/identity ${KEY_PATH}/identity/private ${KEY_PATH}/identity/public ${KEY_PATH}/genesis;
          else
            mkdir -p ${KEY_PATH}/bls_keys ${KEY_PATH}/private_keys ${KEY_PATH}/public_keys ${KEY_PATH}/sig_keys ${KEY_PATH}/verif_keys ${KEY_PATH}C/private_keys ${KEY_PATH}C/public_keys ${KEY_PATH}C/sig_keys ${KEY_PATH}C/verif_keys;
          fi;

          LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/node/public/bls_keys | jq -r 'if .errors then . else . end');
          validateVaultResponse "secret (${NODE_ID}/node/public/bls_keys)" "${LOOKUP_SECRET_RESPONSE}";
          echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.bls_pk" > ${KEY_PATH}/bls_keys/bls_pk;
          chmod 644 ${KEY_PATH}/bls_keys/bls_pk;

          LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/node/private/bls_keys | jq -r 'if .errors then . else . end');
          validateVaultResponse "secret (${NODE_ID}/node/private/bls_keys)" "${LOOKUP_SECRET_RESPONSE}";
          echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.bls_sk" > ${KEY_PATH}/bls_keys/bls_sk;
          chmod 640 ${KEY_PATH}/bls_keys/bls_sk;

          LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/node/private/private_keys | jq -r 'if .errors then . else . end');
          validateVaultResponse "secret (${NODE_ID}/node/private/private_keys)" "${LOOKUP_SECRET_RESPONSE}";
          echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.\"${NODE_ID}.key_secret\"" > ${KEY_PATH}/private_keys/${NODE_ID}.key_secret;
          chmod 640 ${KEY_PATH}/private_keys/${NODE_ID}.key_secret;

          LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/node/public/public_keys | jq -r 'if .errors then . else . end');
          validateVaultResponse "secret (${NODE_ID}/node/public/public_keys)" "${LOOKUP_SECRET_RESPONSE}";
          echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.\"${NODE_ID}.key\"" > ${KEY_PATH}/public_keys/${NODE_ID}.key.bootstrap;
          chmod 644 ${KEY_PATH}/public_keys/${NODE_ID}.key.bootstrap;

          LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/node/private/sig_keys | jq -r 'if .errors then . else . end');
          validateVaultResponse "secret (${NODE_ID}/node/private/sig_keys)" "${LOOKUP_SECRET_RESPONSE}";
          echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.\"${NODE_ID}.key_secret\"" > ${KEY_PATH}/sig_keys/${NODE_ID}.key_secret;
          chmod 640 ${KEY_PATH}/sig_keys/${NODE_ID}.key_secret;

          LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/node/public/verif_keys | jq -r 'if .errors then . else . end');
          validateVaultResponse "secret (${NODE_ID}/node/public/verif_keys)" "${LOOKUP_SECRET_RESPONSE}";
          echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.\"${NODE_ID}.key\"" > ${KEY_PATH}/verif_keys/${NODE_ID}.key.bootstrap;
          chmod 644 ${KEY_PATH}/verif_keys/${NODE_ID}.key.bootstrap;

          LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/client/private/private_keys | jq -r 'if .errors then . else . end');
          validateVaultResponse "secret (${NODE_ID}/client/private/private_keys)" "${LOOKUP_SECRET_RESPONSE}";
          echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.\"${NODE_ID}C.key_secret\"" > ${KEY_PATH}C/private_keys/${NODE_ID}C.key_secret;
          chmod 640 ${KEY_PATH}C/private_keys/${NODE_ID}C.key_secret;

          LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/client/public/public_keys  | jq -r 'if .errors then . else . end');
          validateVaultResponse "secret (${NODE_ID}/client/public/public_keys)" "${LOOKUP_SECRET_RESPONSE}";
          echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.\"${NODE_ID}C.key\"" > ${KEY_PATH}C/public_keys/${NODE_ID}C.key;
          chmod 644 ${KEY_PATH}C/public_keys/${NODE_ID}C.key;

          LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/client/private/sig_keys | jq -r 'if .errors then . else . end');
          validateVaultResponse "secret (${NODE_ID}/client/private/sig_keys)" "${LOOKUP_SECRET_RESPONSE}";
          echo "${LOOKUP_SECRET_RESPONSE}" |jq -j ".data.data.\"${NODE_ID}C.key_secret\"" > ${KEY_PATH}C/sig_keys/${NODE_ID}C.key_secret;
          chmod 640 ${KEY_PATH}C/sig_keys/${NODE_ID}C.key_secret;

          LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/client/public/verif_keys | jq -r 'if .errors then . else . end');
          validateVaultResponse "secret (${NODE_ID}/client/public/verif_keys)" "${LOOKUP_SECRET_RESPONSE}";
          echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.\"${NODE_ID}C.key\"" > ${KEY_PATH}C/verif_keys/${NODE_ID}C.key;
          chmod 644 ${KEY_PATH}C/verif_keys/${NODE_ID}C.key;

          if $ADD_NEW_ORG ; then
            LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/node/public/bls_keys | jq -r 'if .errors then . else . end');
            validateVaultResponse "secret (${NODE_ID}/node/public/bls_keys)" "${LOOKUP_SECRET_RESPONSE}";
            echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.\"bls-key-pop\"" > ${KEY_PATH}/bls_keys/bls-key-pop;
            chmod 644 ${KEY_PATH}/bls_keys/bls-key-pop;

            LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/node/public/verif_keys | jq -r 'if .errors then . else . end');
            validateVaultResponse "secret (${NODE_ID}/node/public/verif_keys)" "${LOOKUP_SECRET_RESPONSE}";
            echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.\"verification-key\"" > ${KEY_PATH}/verif_keys/verification-key;
            chmod 644 ${KEY_PATH}/verif_keys/verification-key;

            LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/identity/private | jq -r 'if .errors then . else . end');
            validateVaultResponse "secret (${NODE_ID}/identity/private)" "${LOOKUP_SECRET_RESPONSE}";
            echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.seed" > ${KEY_PATH}/identity/private/seed;
            chmod 644 ${KEY_PATH}/identity/private/seed;

            LOOKUP_SECRET_RESPONSE=$(curl --header "X-Vault-Token: $X_VAULT_TOKEN" $VAULT_ADDR/v1/"${ORGANIZATION_NAME}"/data/stewards/${NODE_ID}/identity/public | jq -r 'if .errors then . else . end');
            validateVaultResponse "secret (${NODE_ID}/identity/public)" "${LOOKUP_SECRET_RESPONSE}";
            echo "${LOOKUP_SECRET_RESPONSE}" | jq -j ".data.data.did" > ${KEY_PATH}/identity/public/did;
            chmod 644 ${KEY_PATH}/identity/public/did;

          fi;
        volumeMounts:
        - name: ebs-indy-node-keys
          mountPath: /keys
{{- if eq $.Values.add_new_org true }}
      - name: "{{ $.Values.image.cli.name }}"
        image: "{{ $.Values.image.cli.repository }}"
        stdin: true
        tty: true
        command: ["sh", "-c"]
        args:
        - |-
          apt-get install curl -y

          KEY_PATH=/var/lib/indy/keys/${INDY_NETWORK_NAME}/keys/${INDY_NODE_NAME};

          STEWARD_DID=$(cat ${KEY_PATH}/identity/public/did);
          STEWARD_SEED=$(cat ${KEY_PATH}/identity/private/seed);
          STEWARD_VERKEY=$(cat ${KEY_PATH}/verif_keys/verification-key)

          echo "{
          \"version\": 1,
          \"dids\": [{
          \"did\": \"$STEWARD_DID\",
          \"seed\": \"$STEWARD_SEED\"
          }]
          }" > did.txt;

          echo "wallet create IndyWallet key=12345
          wallet open IndyWallet key=12345
          did import did.txt
          pool create mysandboxpool gen_txn_file=/var/lib/indy/genesis/${INDY_NETWORK_NAME}/pool_transactions_genesis
          pool connect mysandboxpool
          did use $STEWARD_DID
          ledger node target=${STEWARD_VERKEY} client_port=${INDY_CLIENT_PORT} client_ip=${INDY_CLIENT_IP} alias=${INDY_NODE_NAME} node_ip=${INDY_NODE_IP} node_port=${INDY_NODE_PORT} services=VALIDATOR blskey=$(cat ${KEY_PATH}/bls_keys/bls_pk) blskey_pop=$(cat ${KEY_PATH}/bls_keys/bls-key-pop)
          exit" > init_node_txn;

          indy-cli init_node_txn > init_node_txn.log;
          cat init_node_txn.log;
        env:
          - name: POOL_GENESIS_PATH
            value: /var/lib/indy/genesis/{{ $.Values.network.name }}/pool_transactions_genesis
          - name: INDY_NETWORK_NAME
            value: "{{ $.Values.network.name }}"
          - name: INDY_NODE_NAME
            value: "{{ $.Values.node.name }}"
          - name: INDY_NODE_IP
            value: "{{ $.Values.node.publicIp }}"
          - name: INDY_NODE_PORT
            value: "{{ $.Values.node.ambassadorPort }}"
          - name: INDY_CLIENT_IP
            value: "{{ $.Values.client.publicIp }}"
          - name: INDY_CLIENT_PORT
            value: "{{ $.Values.client.ambassadorPort }}"
        volumeMounts:
          - name: ebs-indy-node-keys
            mountPath: /var/lib/indy/keys
          - name: {{ $.Values.organization.name }}-domain-transactions-genesis
            mountPath: /var/lib/indy/genesis/{{ $.Values.network.name }}/domain_transactions_genesis
            subPath: domain_transactions_genesis
          - name: {{ $.Values.organization.name }}-pool-transactions-genesis
            mountPath: /var/lib/indy/genesis/{{ $.Values.network.name }}/pool_transactions_genesis
            subPath: pool_transactions_genesis
{{- end }}
      containers:
        - name: "{{ $.Values.image.indyNode.name }}"
          image: "{{ $.Values.image.indyNode.repository }}"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ $.Values.node.port }}
            - containerPort: {{ $.Values.client.port }}
          env:
            - name: INDY_NODE_NAME
              value: "{{ $.Values.node.name }}"
            - name: INDY_NODE_IP
              value: "{{ $.Values.node.ip }}"
            - name: INDY_NODE_PORT
              value: "{{ $.Values.node.port }}"
            - name: INDY_CLIENT_IP
              value: "{{ $.Values.client.ip }}"
            - name: INDY_CLIENT_PORT
              value: "{{ $.Values.client.port }}"
            - name: INDY_NETWORK_NAME
              value: "{{ $.Values.network.name }}"
          volumeMounts:
            - name: ebs-indy-node-data
              mountPath: /var/lib/indy/data
            - name: ebs-indy-node-keys
              mountPath: /var/lib/indy/keys
            - name: {{ $.Values.metadata.name }}-config
              mountPath: /etc/indy/indy_config.py
              subPath: indy_config.py
            - name: {{ $.Values.organization.name }}-domain-transactions-genesis
              mountPath: /var/lib/indy/genesis/{{ $.Values.network.name }}/domain_transactions_genesis
              subPath: domain_transactions_genesis
            - name: {{ $.Values.organization.name }}-pool-transactions-genesis
              mountPath: /var/lib/indy/genesis/{{ $.Values.network.name }}/pool_transactions_genesis
              subPath: pool_transactions_genesis
      imagePullSecrets:
        - name: "{{ $.Values.image.pullSecret }}"
      volumes:
        - name: {{ $.Values.metadata.name }}-config
          configMap:
            name: {{ $.Values.metadata.name }}-config
        - name:  {{ $.Values.organization.name }}-domain-transactions-genesis
          configMap:
            name: {{ $.Values.organization.name }}-dtg
        - name: {{ $.Values.organization.name }}-pool-transactions-genesis
          configMap:
            name: {{ $.Values.organization.name }}-ptg
  volumeClaimTemplates:
    - metadata:
        name: ebs-indy-node-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "{{ $.Values.storage.data.storageClassName }}"
        resources:
          requests:
            storage: "{{ $.Values.storage.data.storagesize }}"
    - metadata:
        name: ebs-indy-node-keys
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "{{ $.Values.storage.data.storageClassName }}"
        resources:
          requests:
            storage: "{{ $.Values.storage.keys.storagesize }}"
