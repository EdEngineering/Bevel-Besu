##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# Wait till the notary is running
- name: Waiting for notary pod to come up
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
  vars:
    component_type: "Pod"
    namespace: "{{ notary_org.name }}-ent"
    component_name: "{{ peer.name | lower }}"
    kubernetes: "{{ notary_org.k8s }}"
    label_selectors:
      - app = {{ peer.name | lower }}

# Check if the nodeinfo exist in build directory
- name: Check if nodeinfo is present in the build directory
  stat:
    path: "{{ build_path }}/{{ notary_org.name }}/{{ peer.name }}/nodeInfo"
  register: file_status

# This task creates the build directory if it does not exist
- name: Create build directory if it does not exist
  file:
    path: "{{ build_path }}/{{ notary_org.name }}/{{ peer.name }}"
    state: directory
    mode: '0755'
    recurse: yes
  when: file_status.stat.exists == False

# Fetch nodeinfo from vault
- name: Get the nodeinfo from vault and generate the enode
  shell: |
    vault kv get -field=nodeInfoFile {{ vault.secret_path | default('secretsv2') }}/{{ notary_org.name }}/{{ peer.name }}/nodeInfo > {{ build_path }}/{{ notary_org.name }}/{{ peer.name }}/nodeInfo
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: file_status.stat.exists == False

- name: Get the nodeinfoFilename from vault
  shell: |
    vault kv get -field=nodeInfoName {{ vault.secret_path | default('secretsv2') }}/{{ notary_org.name }}/{{ peer.name }}/nodeInfo
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: nodeInfoName
  when: file_status.stat.exists == False

# Get nodeinfo data
- name: Get nodeinfo_data
  set_fact:
    nodeinfo_data: "{{ lookup('file', '{{ build_path }}/{{ notary_org.name }}/{{ peer.name }}/nodeInfo') }}"

# Get information about each addl notary node present in network.yaml and store it as a list of notary_org,node
- name: Get notary nodeInfo
  set_fact:
    node_list={{ node_list|default([]) + [ {'peer_name':peer.name, 'nodeinfo':nodeinfo_data, 'validating':peer.validating, 'nodeinfo_name':nodeInfoName.stdout } ] }}
