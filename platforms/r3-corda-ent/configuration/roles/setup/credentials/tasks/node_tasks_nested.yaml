##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# Check if the node credentials are present in the vault
- name: Check if the node credentials are already present in the vault
  shell: |
    vault kv get -field=nodekeystore.jks {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/{{ peer.name | lower }}/credentials
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: vault_credentials_node
  ignore_errors: yes

# Check if the node credentials are present in the vault
- name: Check if the float credentials are already present in the vault
  shell: |
    vault kv get -field=sslkeystore.jks {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/{{ peer.name | lower }}/credentials
  environment:
    VAULT_ADDR: "{{ org.services.float.vault.url }}"
    VAULT_TOKEN: "{{ org.services.float.vault.root_token }}"
  register: float_vault_credentials
  ignore_errors: yes
  when: org.firewall.enabled

# Write the networkroot truststore, node truststore, node keystore, firewallca, float and bridge passwords to the vault
- name: Write the networkroot truststore, node truststore, node keystore, firewallca, float and bridge passwords to the vault
  shell: |
    vault kv put {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/{{ peer.name | lower }}/credentials root={{ network | json_query('network_services[?type==`networkmap`].truststore_pass') | first }} truststore={{ peer.credentials.truststore }} keystore={{ peer.credentials.keystore }} firewallca={{ org.firewall.credentials.firewallca }} float={{ org.firewall.credentials.float }} bridge={{ org.firewall.credentials.bridge }} {{ peer.name }}={{ peer.name }}P
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  when: vault_credentials_node.failed == True

# Write the networkroot truststore, node truststore, node keystore, firewallca, float and bridge passwords to the vault
- name: Write the truststore, node truststore, node keystore, firewallca, float and bridge passwords to the vault
  shell: |
    vault kv put {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/{{ peer.name | lower }}/credentials truststore={{ peer.credentials.truststore }} keystore={{ peer.credentials.keystore }} firewallca={{ org.firewall.credentials.firewallca }} float={{ org.firewall.credentials.float }} bridge={{ org.firewall.credentials.bridge }} {{ peer.name }}={{ peer.name }}P
  environment:
    VAULT_ADDR: "{{ org.services.float.vault.url }}"
    VAULT_TOKEN: "{{ org.services.float.vault.root_token }}"
  when: org.firewall.enabled and float_vault_credentials.failed == True

- name: "Write cordapps credentials to vault"
  shell: |
    vault kv put {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/{{ peer.name | lower }}/credentials root={{ network | json_query('network_services[?type==`networkmap`].truststore_pass') | first }} truststore={{ peer.credentials.truststore }} keystore={{ peer.credentials.keystore }} firewallca={{ org.firewall.credentials.firewallca }} float={{ org.firewall.credentials.float }} bridge={{ org.firewall.credentials.bridge }} {{ peer.name }}={{ peer.name }}P repo_username="{{ org.cordapps.username }}" repo_password="{{ org.cordapps.password }}"
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  when: 
    - vault_credentials_node.failed == True
    - org.cordapps is defined
    - org.cordapps.password is defined
