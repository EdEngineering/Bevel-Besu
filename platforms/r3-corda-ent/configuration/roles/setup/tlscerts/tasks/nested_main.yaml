##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This role puts the service certs to vault for each member organizations

# Check if the tls certificate is already present in the vault
- name: Check if the tls certificate is already present in the vault
  shell: |
    vault kv get -field={{ service.name }}.crt {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name }}/{{ peer.name }}/certs/{{ service.name }}
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: vault_tlscert
  ignore_errors: yes

# This task copies the tls certificate to each peer vault
- name: Copy the tls certificate to each peer vault
  shell: |
    vault kv put {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name }}/{{ peer.name }}/certs/{{ service.name }} {{ service.name }}.crt="$(cat {{ service.certificate }} | base64 )"
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  when: vault_tlscert.failed

# Store the networkroottruststore to Vault when service.type == networkmap
# Check if the networkroottruststore is already present in the given directory
- name: Check if the networkroottruststore is already present in the given directory
  stat:
    path: "{{ service.truststore }}"
  register: file_status
  when: service.type == 'networkmap'
  failed_when: not file_status.stat.exists

# This task copies the networkroottruststore to each org vault
- name: Copy the networkroottruststore to the Vault for each organisation
  shell: |
    vault kv put {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name }}/{{ peer.name }}/root/certs network-root-truststore.jks="$(cat {{ service.truststore }})"
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  when: 
    - service.type == 'networkmap'
    - file_status.stat.exists
