##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This role generates certificates for ambassador proxy
# and places them in vault. Certificates are created using openssl.
# It also creates the corresponding Kubernetes secret
---

# check if the Ambassador tls directory exists
- name: Check if the Ambassador directory exists
  stat:
    path: "{{ tlscert_path }}"
  register: ambassadordir_check

# Create the ambassador directory if it doesn't exist
- name: Create the Ambassador directory if it doesn't exist
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "{{ tlscert_path }}"
  when: not ambassadordir_check.stat.exists

# Check if the ambassador tls is already created
- name: Check if the Ambassador TLS is already created
  shell: |
    vault kv get -field=tlskey {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/{{ service_name }}/tlscerts
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: ambassador_tls_certs
  ignore_errors: yes

# Get the existing ambassador certificates from vault if any
- name: Get all ambassador certs data from vault
  shell: |
    vault kv get -format=yaml {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/{{ service_name }}/tlscerts
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: ambassador_tls_certs_yaml
  when: not ambassador_tls_certs.failed

# Save the ambassador certs if they exist
- name: Save the ambassador certs if they exist in the vault
  include_role:
    name: "setup/get_crypto"
  vars:
    vault_output: "{{ ambassador_tls_certs_yaml.stdout | from_yaml }}"
    type: "ambassador"
    cert_path: "{{ tlscert_path }}"
  when: ambassador_tls_certs.failed == False

# Check if openssl conf file exists
- name: Check if openssl.conf file exists
  stat:
    path: "{{ tlscert_path }}/openssl.conf"
  register: openssl_conf_check

# Generates the openssl file for domain
- name: Generate openssl.conf file
  shell: |
    cd {{ tlscert_path }}
    cat <<EOF >openssl.conf
    [dn]
    CN={{ domain_name }}
    [req]
    distinguished_name = dn
    [EXT]
    subjectAltName=DNS:{{ domain_name }}
    keyUsage=digitalSignature
    extendedKeyUsage=serverAuth
    EOF
  vars:
    domain_name: "{{ service_name }}.{{ org.external_url_suffix }}"
  when: not openssl_conf_check.stat.exists

# Check if tls ca file exists
- name: Check if tls ca file exists
  stat:
    path: "./build/ambassador/corda-ssl-root-ca.key"
  register: corda_ssl_ca_check

# download from vault tls ca and convert from jks to p12
- name: Get Corda SSL root ca
  shell: |
    echo $TRUSTSTORE_PASS
    vault kv get -field=corda-ssl-root-keys.jks {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/root/certs |base64 -d > ./build/ambassador/corda-ssl-root-keys.jks
    yes|keytool -importkeystore -srcstorepass $TRUSTSTORE_PASS -srckeystore ./build/ambassador/corda-ssl-root-keys.jks  -deststorepass $TRUSTSTORE_PASS -destkeystore ./build/ambassador/corda-ssl-root-keys.p12 -deststoretype PKCS12
    openssl pkcs12 -in ./build/ambassador/corda-ssl-root-keys.p12 -passin pass:$TRUSTSTORE_PASS -nokeys -out ./build/ambassador/corda-ssl-root-ca.crt
    openssl pkcs12 -in ./build/ambassador/corda-ssl-root-keys.p12 -passin pass:$TRUSTSTORE_PASS -nocerts -nodes -out ./build/ambassador/corda-ssl-root-ca.key 
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
    TRUSTSTORE_PASS: "{{ org.credentials.truststore.ssl }}"
  when: not corda_ssl_ca_check.failed

# Create ambassador certificates
- name: Create Ambassador certificates
  shell: |
    # generate new key
    openssl genrsa -out {{ tlscert_path }}/ambassador.key 2048
    # create request
    openssl req -new -key {{ tlscert_path }}/ambassador.key -out {{ tlscert_path }}/ambassador.csr -config {{ tlscert_path }}/openssl.conf -newkey rsa:2048 -nodes -sha256 -subj "/CN={{ domain_name }}" -extensions EXT
    # sign with CA key
    openssl x509 -req -in {{ tlscert_path }}/ambassador.csr -CA ./build/ambassador/corda-ssl-root-ca.crt -CAkey ./build/ambassador/corda-ssl-root-ca.key -CAcreateserial -outform PEM -out {{ tlscert_path }}/ambassador.pem -days 730 -extensions EXT -extfile {{ tlscert_path }}/openssl.conf 
  vars:
    domain_name: "{{ service_name }}.{{ org.external_url_suffix }}"
  when: ambassador_tls_certs.failed == True

# Store the ambassador certificates into the vault
- name: Store the Ambassador certs to vault
  shell: |
    vault kv put {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/{{ service_name }}/tlscerts tlscacerts="$(cat {{ tlscert_path }}/ambassador.pem | base64)" tlskey="$(cat {{ tlscert_path }}/ambassador.key | base64)"
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  when: ambassador_tls_certs.failed == True

# Check if the ambassador secret is created in the org namespace
- name: Check Ambassador cred exists
  k8s_info:
    kind: Secret
    namespace: "{{ namespace }}"
    name: "{{ service_name }}-ambassador-certs"
    kubeconfig: "{{ org.k8s.config_file }}"
    context: "{{ org.k8s.context }}"
  register: get_ambassador_secret

# Create the ambassador secret if it doesn't exist
- name: Create the Ambassador credentials
  shell: |
    KUBECONFIG={{ org.k8s.config_file }} kubectl create secret tls {{ service_name }}-ambassador-certs --cert="{{ tlscert_path }}/ambassador.pem" --key="{{ tlscert_path }}/ambassador.key" -n {{ namespace }}
  when: get_ambassador_secret.resources|length == 0

# Copy generated crt to build location
- name: Copy generated Ambassador tls certs to given build location
  copy:
    src: "{{ tlscert_path }}/ambassador.pem"
    dest: "{{ dest_path }}"
    follow: yes
  when: dest_path is defined
