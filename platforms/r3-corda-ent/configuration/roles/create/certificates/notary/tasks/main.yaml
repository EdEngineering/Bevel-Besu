##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This role generates certificates for ambassador
# and places them in vault. Certificates are created using openssl
# This also creates the corresponding Kubernetes secret
---
# check if the ambassador tls directory exists
- name: Check if the Ambassador directory exists or not
  stat:
    path: "./build/ambassador/{{ node_name }}"
  register: ambassadordir_check

# Create the ambassador directory if it doesn't exist
- name: Create the Ambassador directory if it doesn't exist
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "./build/ambassador/{{ node_name }}"
  when: not ambassadordir_check.stat.exists

# Check if the ambassador tls is already created
- name: Check if the Ambassador TLS is already created
  shell: |
    vault kv get -field=tlskey {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/tlscerts
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: ambassador_tls_certs
  ignore_errors: yes

# Get the existing ambassador certificates from vault if any
- name: Get all ambassador certs data from vault
  shell: |
    vault kv get -format=yaml {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/tlscerts
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  register: ambassador_tls_certs_yaml
  when: not ambassador_tls_certs.failed

# Save the ambassador certs if they exist
- name: Save the Ambassador certs if they exist in the vault
  include_role:
    name: "setup/get_crypto"
  vars:
    vault_output: "{{ ambassador_tls_certs_yaml.stdout | from_yaml }}"
    type: "ambassador"
    cert_path: "./build/ambassador/{{ node_name }}"
  when: ambassador_tls_certs.failed == False

# Check if the openssl.conf file exists or not
- name: Check if openssl.conf file exists or not
  stat:
    path: "./build/ambassador/{{ node_name }}/openssl{{ node_name }}.conf"
  register: openssl_conf_check

# Generates the openssl.conf file for domain
- name: Generate openssl.conf file
  shell: |
    cd ./build/ambassador/{{ node_name }}
    cat <<EOF >openssl{{ node_name }}.conf
    [dn]
    CN={{ domain_name }}
    [req]
    distinguished_name = dn
    [EXT]
    subjectAltName=DNS:{{ domain_name }}
    keyUsage=digitalSignature
    extendedKeyUsage=serverAuth
    EOF
  vars:
    domain_name: "{{ node_name }}.{{ org.external_url_suffix }}"
  when: not openssl_conf_check.stat.exists


# Create ambassador certificates
- name: Create Ambassador certificates
  shell: |
    cd ./build/ambassador/{{ node_name }}
    openssl req -x509 -out ambassador.pem -keyout ambassador.key -newkey rsa:2048 -nodes -sha256 -subj "/CN={{ domain_name }}" -extensions EXT -config openssl{{ node_name }}.conf
  vars:
    domain_name: "{{ node_name }}.{{ org.external_url_suffix }}"
  when: ambassador_tls_certs.failed

# Store the ambassador certificates into the vault
- name: Store the Ambassador certs to vault
  shell: |
    vault kv put {{ org.vault.secret_path | default('secretsv2') }}/{{ org.name | lower }}/tlscerts tlscacerts="$(cat ./build/ambassador/{{ node_name }}/ambassador.pem | base64)" tlskey="$(cat ./build/ambassador/{{ node_name }}/ambassador.key | base64)"
  environment:
    VAULT_ADDR: "{{ org.vault.url }}"
    VAULT_TOKEN: "{{ org.vault.root_token }}"
  when: ambassador_tls_certs.failed

# Check if the ambassador secret is created in the namespace
- name: Check if Ambassador creds exists
  k8s_info:
    kind: Secret
    namespace: "{{ namespace }}"
    name: "{{ node_name }}-ambassador-certs"
    kubeconfig: "{{ org.k8s.config_file }}"
    context: "{{ org.k8s.context }}"
  register: get_ambassador_secret

# Create the ambassador secret if it doesn't exist
- name: Create the Ambassador credentials
  shell: |
    KUBECONFIG={{ org.k8s.config_file }} kubectl create secret tls {{ node_name }}-ambassador-certs --cert="./build/ambassador/{{ node_name }}/ambassador.pem" --key="./build/ambassador/{{ node_name }}/ambassador.key" -n {{ namespace }}
  when: get_ambassador_secret.resources|length == 0
