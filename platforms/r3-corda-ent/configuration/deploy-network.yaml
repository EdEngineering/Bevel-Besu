##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

###########################################################
# Playbook to create deployment files for the following:
#  storageclass
#  namespaces, service account and clusterrolebinding
# Playbook arguments: complete network.yaml
###########################################################
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:
  # Delete build directory before start of play, can be commented if you do not want to delete it.
  - name: Remove build directory
    file:
      path: "./build"
      state: absent

  # Create Storageclass that will be used for this deployment
  - name: Create Storage Class
    include_role:
      name: create/storageclass
    vars:
      storageclass_name: "cordaentsc"
      git_dir: "{{ org.gitops.release_dir }}"
      kubernetes: "{{ org.k8s }}"
      gitops: "{{ org.gitops }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # create namespace, service account and clusterrolebinding
  - name: "Create namespace, service accounts and clusterrolebinding"
    include_role: 
      name: create/namespace_serviceaccount
    vars:
      component_ns: "{{ org.name | lower }}-ent"
      organisation: "{{ org.name | lower }}"
      kubernetes: "{{ org.k8s }}"
      gitops: "{{ org.gitops }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # ---------------------------------------------------------------------- 
  # Setup CENM services for the network
  - name: "Setup cenm"   
    include_role: 
      name: "setup/cenm"
    vars:
      services: "{{ org.services }}"
      organisation: "{{ org.name | lower }}"
      component_ns: "{{ org.name | lower }}-ent"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      gitops: "{{ org.gitops }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: org.type == 'cenm'

  # ----------------------------------------------------------------------  
  # Wait for cenm services to respond  
  - name: Check that CENM uri are reachable
    uri:
      url: "{{ item.uri }}/status"
      validate_certs: no
    register: this
    until: this.status == 200
    loop: "{{ network['network_services'] }}"
    retries: "{{ network.env.retry_count}}"
    delay: 50
 
  # ----------------------------------------------------------------------   
  # Setup Corda Node services for the network
  - name: Setup Corda Node services
    include_role:
      name: setup/node
    vars:
      services: "{{ org.services }}"
      organisation: "{{ org.name | lower }}"
      component_ns: "{{ org.name | lower }}-ent"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      gitops: "{{ org.gitops }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: org.type == 'node'

  # Setup Additional Notary services for the network
  - name: Setup Additional Notary services
    include_role:
      name: setup/notary
    vars:
      services: "{{ org.services }}"
      organisation: "{{ org.name | lower }}"
      component_ns: "{{ org.name | lower }}-ent"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      gitops: "{{ org.gitops }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: org.type == 'notary'

  vars: #These variables can be overriden from the command line
    privilege_escalate: false           #Default to NOT escalate to root privledges
    install_os: "linux"                 #Default to linux OS
    install_arch:  "amd64"              #Default to amd64 architecture
    bin_install_dir:  "~/bin"            #Default to /bin install directory for binaries
