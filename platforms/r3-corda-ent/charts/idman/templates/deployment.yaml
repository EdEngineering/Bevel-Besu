##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Values.metadata.namespace }}
  {{- if .Values.config.deployment.annotations }}
  annotations:
{{ toYaml .Values.config.deployment.annotations | indent 8 }}
    {{- end }}
  labels:
    app.kubernetes.io/name: {{ .Values.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.config.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.nodeName }}
      app.kubernetes.io/name: {{ .Values.nodeName }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.nodeName }}
        app.kubernetes.io/name: {{ .Values.nodeName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ $.Values.vault.serviceAccountName }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:      
      - name: init-certificates
        image: "{{ .Values.image.initContainer }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authPath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.vault.role }}
          - name: BASE_DIR
            value: {{ $.Values.config.volume.baseDir }}
          - name: CERTS_SECRET_PREFIX
            value: {{ .Values.vault.certSecretPrefix }}
          - name: MOUNT_PATH
            value: "/DATA"       
        command: ["sh", "-c"]
        args:
        - |-
              #!/usr/bin/env sh
              validateVaultResponse () {
                if echo ${2} | grep "errors"; then
                  echo "ERROR: unable to retrieve ${1}: ${2}"
                  exit 1
                fi
                if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                then
                  http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                  --header "X-Vault-Token: ${VAULT_TOKEN}" \
                  ${VAULT_ADDR}/v1/${1})
                  curl_response=$?
                  if test "$http_code" != "200" ; then
                      echo "Http response code from Vault - $http_code and curl_response - $curl_response"
                      if test "$curl_response" != "0"; then
                        echo "Error: curl command failed with error code - $curl_response"
                        exit 1
                      fi
                  fi
                fi
              }

              # Setting up the environment to get secrets/certificates from Vault
              echo "Getting certificates/secrets from Vault Server"
              KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
              validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
              echo "Logged into Vault"
              # Creating dirs for storing certificates and credentials
              mkdir -p ${MOUNT_PATH}/idman;
              mkdir -p ${MOUNT_PATH}/root;
              mkdir -p ${MOUNT_PATH}/crl-files;
              mkdir -p ${MOUNT_PATH}/ssl;
              mkdir -p ${MOUNT_PATH}/truststore;

              # Fetching ssl-idman certificates from vault
              COUNTER=1
              while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
              do
                  # Get keystores from Vault, to see if certificates are created and have been put in Vault
                  LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs | jq -r 'if .errors then . else . end')
                  data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["data"]')"
              
                  if [ "$data_info" == "null" ]
                  then
                    sleep {{ $.Values.vault.sleepTimeAfterError }}
                  else
                    validateVaultResponse "${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                    idm_ssl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["corda-ssl-identity-manager-keys.jks"]')
                    echo "${idm_ssl}" | base64 -d > ${MOUNT_PATH}/idman/corda-ssl-identity-manager-keys.jks
                    echo "Successfully got SSL Idman certifcates"
                    break
                  fi 
                  COUNTER=`expr "$COUNTER" + 1`
              done

              if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
              then
                echo "Idman SSL Certificates might not have been put in Vault. Giving up after $COUNTER tries!"
                exit 1
              fi
              echo "Done"

              # Fetching corda-ssl-trust-store certificates from vault
              COUNTER=1
              while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
              do
                  # Get keystores from Vault, to see if certificates are created and have been put in Vault
                  LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs | jq -r 'if .errors then . else . end')
                  data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["data"]')"
              
                  if [ "$data_info" == "null" ]
                  then
                    sleep {{ $.Values.vault.sleepTimeAfterError }}
                  else
                    validateVaultResponse "${CERTS_SECRET_PREFIX}/root/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                    root_ssl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["corda-ssl-trust-store.jks"]')
                    echo "${root_ssl}" | base64 -d > ${MOUNT_PATH}/root/corda-ssl-trust-store.jks
                    echo "Successfully got Root SSL certifcates"
                    break
                  fi 
                  COUNTER=`expr "$COUNTER" + 1`
              done

              if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
              then
                echo "Root SSL Certificates might not have been put in Vault. Giving up after $COUNTER tries!"
                exit 1
              fi
              echo "Done"

              # Fetching CRL certificates from vault
              COUNTER=1
              while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
              do
                  # Get CRLs from vault to see if certificates are created, and have been put in Vault
                  LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ .Values.nodeName }}/crls | jq -r 'if .errors then . else . end')
                  data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["data"]')"
              
                  if [ "$data_info" == "null" ]
                  then
                    sleep {{ $.Values.vault.sleepTimeAfterError }}
                  else
                    validateVaultResponse "${CERTS_SECRET_PREFIX}/{{ .Values.nodeName }}/crls" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                    tls_crl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["tls.crl"]')
                    echo "${tls_crl}" | base64 -d > ${MOUNT_PATH}/crl-files/tls.crl

                    root_crl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["root.crl"]')
                    echo "${root_crl}" | base64 -d > ${MOUNT_PATH}/crl-files/root.crl

                    subordinate_crl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["subordinate.crl"]')
                    echo "${subordinate_crl}" | base64 -d > ${MOUNT_PATH}/crl-files/subordinate.crl

                    echo "Successfully got CRL Certifcates"
                    break
                  fi 
                  COUNTER=`expr "$COUNTER" + 1`
              done

              if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
              then
                echo "CRL Certificates might not have been put in Vault. Giving up after $COUNTER tries!"
                exit 1
              fi

              # Fetching the idman ssl credentials from vault
              OUTPUT_PATH=${MOUNT_PATH}/ssl;
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/ssl | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials/ssl" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              IDMAN_SSL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["idman"]')
              echo "${IDMAN_SSL}"> ${OUTPUT_PATH}/idmanssl

              #Fetching ssl truststore from vault
              OUTPUT_PATH=${MOUNT_PATH}/truststore;
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/truststore | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials/truststore" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              SSL_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["ssl"]')
              echo "${SSL_TRUSTSTORE}"> ${OUTPUT_PATH}/sslts

              echo "Done"
        volumeMounts:
        - name: certificates
          mountPath: /DATA    
      - name: init-token
        image: "{{ .Values.image.enterpriseCliContainer }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: ACCEPT_LICENSE
            value: "{{ .Values.acceptLicense }}"
        command: ["/bin/bash", "-c"]
        args:
        - |-
          pwd
          cp CM/*.sh bin/
          chmod +x bin/*
          ls -alR
          echo 'address = "0.0.0.0:{{ .Values.service.external.port }}"
          database {
              driverClassName = "{{ .Values.database.driverClassName }}"
              url = "{{ .Values.database.url }}"
              user = "{{ .Values.database.user }}"
              password = "{{ .Values.database.password }}"
              runMigration = "{{ .Values.database.runMigration }}"
          }
          workflows = {
              "identity-manager" = {
                  type = ISSUANCE
                  updateInterval = 10000
                  enmListener = {
                      port = {{ .Values.service.internal.port }}
                      reconnect = true
                      ssl = {
                          keyStore = {
                              location = ./DATA/idman/corda-ssl-identity-manager-keys.jks
                              password = IDMAN_SSL
                          }
                          trustStore = {
                              location = ./DATA/root/corda-ssl-trust-store.jks
                              password = SSL_TRUSTSTORE
                          }
                      }
                  }
                  plugin = {
                      pluginClass = "com.r3.enmplugins.approveall.ApproveAll"
                  }
              },
              "revocation" = {
                  type = REVOCATION
                  crlCacheTimeout = 900000 # every 15 minutes
                  crlFiles = ["./DATA/crl-files/tls.crl", "./DATA/crl-files/root.crl", "./DATA/crl-files/subordinate.crl"]
                  enmListener = {
                      port = {{ .Values.service.revocation.port }}
                      reconnect = true
                      ssl = {
                          keyStore = {
                              location = ./DATA/idman/corda-ssl-identity-manager-keys.jks
                              password = IDMAN_SSL
                          }
                          trustStore = {
                              location = ./DATA/root/corda-ssl-trust-store.jks
                              password = SSL_TRUSTSTORE
                          }
                      }
                  }
                  plugin = {
                      pluginClass = "com.r3.enmplugins.approveall.ApproveAll"
                  }
              }
          }
          authServiceConfig = {
              disableAuthentication=false
              host="{{ .Values.cenmServices.authName }}.{{ .Values.metadata.namespace }}"
              port={{ .Values.cenmServices.authPort }}
              trustStore = {
                  location = "./DATA/root/corda-ssl-trust-store.jks"
                  password = SSL_TRUSTSTORE
              }
              issuer="http://test"
              leeway=5s
          }
          adminListener = {
              port = {{ .Values.service.adminListener.port }}
              ssl = {
                  keyStore = {
                      location = ./DATA/idman/corda-ssl-identity-manager-keys.jks
                      password = IDMAN_SSL
                  }
                  trustStore = {
                      location = ./DATA/root/corda-ssl-trust-store.jks
                      password = SSL_TRUSTSTORE
                  }
              }
          }' >> etc/idman.conf

          #replacing the variables in idman.conf with actual values
          export IDMAN_SSL=$(cat {{ .Values.config.volume.baseDir }}/DATA/ssl/idmanssl)
          sed -i -e "s*IDMAN_SSL*${IDMAN_SSL}*g" etc/idman.conf
          export SSL_TRUSTSTORE=$(cat {{ .Values.config.volume.baseDir }}/DATA/truststore/sslts)
          sed -i -e "s*SSL_TRUSTSTORE*${SSL_TRUSTSTORE}*g" etc/idman.conf
          bin/getZoneToken.sh
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        - name: idman-etc
          mountPath: {{ .Values.config.volume.baseDir }}/etc
        - name: idman-conf
          mountPath: {{ .Values.config.volume.baseDir }}/CM/getZoneToken.sh
          subPath: getZoneToken.sh
        - name: certificates
          mountPath: {{ .Values.config.volume.baseDir }}/DATA 
      containers:
      - name: idman
        image: "{{ .Values.image.idmanContainer }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: ACCEPT_LICENSE
            value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
        command: ["/bin/bash", "-c"]
        args:
        - |-
          #running the idman service
          /bin/sh
          #main run
          export IDMAN_SSL=$(cat {{ .Values.config.volume.baseDir }}/DATA/ssl/idmanssl)
          export SSL_TRUSTSTORE=$(cat {{ .Values.config.volume.baseDir }}/DATA/truststore/sslts)
          if [ -f {{ .Values.config.jarPath }}/identitymanager.jar ]
          then
              sha256sum {{ .Values.config.jarPath }}/identitymanager.jar
              sha256sum {{ .Values.config.jarPath }}/angel.jar
              cp {{ .Values.config.configPath }}/idman.conf {{ .Values.config.configPath }}/identitymanager.conf
              cat {{ .Values.config.configPath }}/identitymanager.conf
              echo
              echo "CENM: starting Identity Manager process ..."
              echo
              java -jar {{ .Values.config.jarPath }}/angel.jar \
              --jar-name={{ .Values.config.jarPath }}/identitymanager.jar \
              --zone-host={{ .Values.cenmServices.zoneName }}.{{ .Values.metadata.namespace }} \
              --zone-port={{ .Values.cenmServices.zoneEnmPort }} \
              --token=${TOKEN} \
              --service=IDENTITY_MANAGER \
              --working-dir=etc/ \
              --polling-interval=10 \
              --tls=true \
              --tls-keystore={{ .Values.config.volume.baseDir }}/DATA/idman/corda-ssl-identity-manager-keys.jks \
              --tls-keystore-password=${IDMAN_SSL} \
              --tls-truststore={{ .Values.config.volume.baseDir }}/DATA/root/corda-ssl-trust-store.jks \
              --tls-truststore-password=${SSL_TRUSTSTORE} \
              --verbose
              EXIT_CODE=${?}
          else
              echo "Missing Identity Manager jar file in {{ .Values.config.jarPath }} folder:"
              ls -al {{ .Values.config.jarPath }}
              EXIT_CODE=110
          fi

          if [ "${EXIT_CODE}" -ne "0" ]
          then
              HOW_LONG={{ .Values.config.sleepTimeAfterError }}
              echo
              echo "exit code: ${EXIT_CODE} (error)"
              echo "Going to sleep for requested ${HOW_LONG} seconds to let you login and investigate."
          fi
          sleep ${HOW_LONG}
          echo
        volumeMounts:
        - name: idman-etc
          mountPath: {{ .Values.config.volume.baseDir }}/etc
        - name: idman-logs
          mountPath: {{ .Values.config.volume.baseDir }}/logs
        - name: idman-h2
          mountPath: {{ .Values.config.volume.baseDir }}/h2
        - name: certificates
          mountPath: {{ .Values.config.volume.baseDir }}/DATA
        resources:
          requests:
            memory: {{ .Values.config.pod.resources.requests}}
          limits:
            memory: {{ .Values.config.pod.resources.limits}}
      - name: logs
        image: "{{ .Values.image.idmanContainer }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: ACCEPT_LICENSE
          value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
        command: ["/bin/bash", "-c"]
        args:
        - |-
          cd {{ .Values.config.volume.baseDir }}
          while true; do tail -f logs/angel-service/*.log 2>/dev/null; sleep 5; done
          # in case sth went wrong just wait indefinitely ...
          tail -f /dev/null
        volumeMounts:
        - name: idman-logs
          mountPath: {{ .Values.config.volume.baseDir }}/logs
    {{- with .Values.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: idman-conf
          configMap:
            name: {{ .Values.prefix }}-idman-conf
        - name: idman-etc
          emptyDir:
            medium: Memory
        - name: idman-h2
          persistentVolumeClaim:
            claimName: {{ .Values.nodeName }}-pvc-h2
        - name: idman-logs
          persistentVolumeClaim:
            claimName: {{ .Values.nodeName }}-pvc-logs
        - name: certificates
          emptyDir:
            medium: Memory
