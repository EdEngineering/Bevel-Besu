##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Values.metadata.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.nodeName }}
      app.kubernetes.io/name: {{ .Values.nodeName }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.nodeName }}
        app.kubernetes.io/name: {{ .Values.nodeName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ .Values.vault.serviceAccountName }}
      securityContext:
        {{- toYaml .Values.config.podSecurityContext | nindent 8 }}
      initContainers:
        - name: init-certificates
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
           - name: VAULT_ADDR
             value: {{ $.Values.vault.address }}
           - name: KUBERNETES_AUTH_PATH
             value: {{ $.Values.vault.authPath }}
           - name: VAULT_APP_ROLE
             value: {{ $.Values.vault.role }}
           - name: BASE_DIR
             value: {{ $.Values.config.volume.baseDir }}
           - name: CERTS_SECRET_PREFIX
             value: {{ .Values.vault.certSecretPrefix }}
           - name: MOUNT_PATH
             value: "/DATA"       
          command: ["sh", "-c"]
          args:
          - |-
               #!/usr/bin/env sh
                validateVaultResponse () {
                  if echo ${2} | grep "errors"; then
                    echo "ERROR: unable to retrieve ${1}: ${2}"
                    exit 1
                  fi
                  if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                  then
                    http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                    --header "X-Vault-Token: ${VAULT_TOKEN}" \
                    ${VAULT_ADDR}/v1/${1})
                    curl_response=$?
                    if test "$http_code" != "200" ; then
                        echo "Http response code from Vault - $http_code and curl_response - $curl_response"
                        if test "$curl_response" != "0"; then
                          echo "Error: curl command failed with error code - $curl_response"
                          exit 1
                        fi
                    fi
                  fi
                }

               # setting up env to get secrets from vault
               echo "Getting secrets from Vault Server"
               KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
               VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
               validateVaultResponse 'vault login token' "${VAULT_TOKEN}"

               mkdir -p ${MOUNT_PATH}/root;

               # ssl trust-stores and auth key store from vault
               LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs | jq -r 'if .errors then . else . end')
               validateVaultResponse "${CERTS_SECRET_PREFIX}/root/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"

               corda_ssl_trust_store=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["corda-ssl-trust-store.jks"]')
               echo "${corda_ssl_trust_store}" | base64 -d > ${MOUNT_PATH}/root/corda-ssl-trust-store.jks

               corda_ssl_auth_keys=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["corda-ssl-auth-keys.jks"]')
               echo "${corda_ssl_auth_keys}" | base64 -d > ${MOUNT_PATH}/root/corda-ssl-auth-keys.jks

               mkdir -p ${MOUNT_PATH}/ssl;
               OUTPUT_PATH=${MOUNT_PATH}/ssl;
               # Fetching credentials for ssl certificates
               LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/ssl | jq -r 'if .errors then . else . end')
               validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials/ssl" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
               AUTH_SSL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["auth"]')
               echo "${AUTH_SSL}"> ${OUTPUT_PATH}/authssl

               # Fetching credentials for truststores
               LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/truststore | jq -r 'if .errors then . else . end')
               validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials/truststore" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
               SSL_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["ssl"]')
               echo "${SSL_TRUSTSTORE}"> ${OUTPUT_PATH}/sslts

               # Fetching credentials for initial user
               LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/user | jq -r 'if .errors then . else . end')
               validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials/user" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
               USERNAME=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["username"]')
               echo "${USERNAME}"> ${OUTPUT_PATH}/username
               USERPWD=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["userpwd"]')
               echo "${USERPWD}"> ${OUTPUT_PATH}/userpwd
               echo "Done"
          volumeMounts:
          - name: certificates
            mountPath: /DATA
        - name: init-jwt
          securityContext:
            {{- toYaml .Values.config.securityContext | nindent 12 }}
          image: "{{ .Values.image.authContainerName }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
          - |-
            #[TODO] : The JWT creation can be moved to PKI Job
            keytool -genkeypair -alias oauth-test-jwt -keyalg RSA -keypass password -keystore etc/jwt-store.jks -storepass password -dname "{{ .Values.authSubject }}"
          resources:
            requests:
              memory: {{ .Values.config.pod.resources.requests }}
            limits:
              memory: {{ .Values.config.pod.resources.limits }}
          volumeMounts:
          - name: auth-etc
            mountPath: {{ .Values.config.volume.baseDir }}/etc
      containers:
        - name: main
          securityContext:
            {{- toYaml .Values.config.securityContext | nindent 12 }}
          image: "{{ .Values.image.authContainerName }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
          - |-
            mkdir -p {{ .Values.config.volume.baseDir }}/config;

            install {{ .Values.config.volume.baseDir }}/authservice.conf {{ .Values.config.volume.baseDir }}/config/;

            #replacement of the variables in the authservice conf file
            export AUTH_SSL=$(cat {{ .Values.config.volume.baseDir }}/DATA/ssl/authssl)
            sed -i -e "s*AUTH_SSL*${AUTH_SSL}*g" {{ .Values.config.volume.baseDir }}/config/authservice.conf

            export SSL_TRUSTSTORE=$(cat {{ .Values.config.volume.baseDir }}/DATA/ssl/sslts)
            sed -i -e "s*SSL_TRUSTSTORE*${SSL_TRUSTSTORE}*g" {{ .Values.config.volume.baseDir }}/config/authservice.conf

            export USERNAME=$(cat {{ .Values.config.volume.baseDir }}/DATA/ssl/username)
            export USERPWD=$(cat {{ .Values.config.volume.baseDir }}/DATA/ssl/userpwd)

            #running the auth service
            /bin/sh
            # main run
            if [ -f bin/accounts-application.jar ]
            then
                sha256sum bin/accounts-application.jar 
                echo
                echo "CENM: starting CENM Auth service ..."
                echo
                java -Xmx{{ .Values.config.cordaJar.memorySize }}{{ .Values.config.cordaJar.unit }} -jar bin/accounts-application.jar --config-file {{ .Values.config.volume.baseDir }}/config/authservice.conf --initial-user-name $USERNAME --initial-user-password $USERPWD --keep-running --verbose
                EXIT_CODE=${?}
            else
                echo "Missing Auth Service jar file in {{ .Values.config.jarPath }} folder:"
                ls -al {{ .Values.config.jarPath }}
                EXIT_CODE=110
            fi

            if [ "${EXIT_CODE}" -ne "0" ]
            then
                HOW_LONG={{ .Values.config.sleepTimeAfterError }}
                echo
                echo "exit code: ${EXIT_CODE} (error)"
                echo "Going to sleep for requested ${HOW_LONG} seconds to let you login and investigate."
            fi
            sleep ${HOW_LONG}
            echo
          volumeMounts:
          - name: auth-conf
            mountPath: {{ .Values.config.volume.baseDir }}/authservice.conf
            subPath: authservice.conf
          - name: auth-etc
            mountPath: {{ .Values.config.volume.baseDir }}/etc
          - name: certificates
            mountPath: {{ .Values.config.volume.baseDir }}/DATA
          - name: auth-logs
            mountPath: {{ .Values.config.volume.baseDir }}/logs
          - name: auth-h2
            mountPath: {{ .Values.config.volume.baseDir }}/h2
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end  }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end  }}
          resources:
            requests:
              memory: {{ .Values.config.pod.resources.requests }}
            limits:
              memory: {{ .Values.config.pod.resources.limits }}
        {{- if .Values.config.logsContainersEnabled }}
        - name: logs-auth
          securityContext:
            {{- toYaml .Values.config.securityContext | nindent 12 }}
          image: "{{ .Values.image.authContainerName }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
          - |-
            cd {{ .Values.config.volume.baseDir }}/
            while true; do tail -f logs/accounts-service/*.log 2>/dev/null; sleep 5; done
            # in case sth went wrong just wait indefinitely ...
            tail -f /dev/null
          volumeMounts:
          - name: auth-logs
            mountPath: {{ .Values.config.volume.baseDir }}/logs
          resources:
            requests:
              memory: {{ .Values.config.pod.resources.requests }}
            limits:
              memory: {{ .Values.config.pod.resources.limits }}
        {{- end  }}
      volumes:
        - name: auth-conf
          configMap:
            name: {{ .Values.prefix }}-auth-conf
            defaultMode: 0777
        - name: auth-etc
          persistentVolumeClaim:
            claimName: {{ .Values.prefix }}-auth-etc
        - name: auth-h2
          persistentVolumeClaim:
            claimName: {{ .Values.prefix }}-auth-h2
        - name: auth-logs
          persistentVolumeClaim:
            claimName: {{ .Values.prefix }}-auth-logs
        - name: certificates
          emptyDir:
            medium: Memory
      {{- with .Values.config.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.config.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.config.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
