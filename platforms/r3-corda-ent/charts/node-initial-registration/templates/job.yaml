##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Values.metadata.namespace }}
  labels:
    app: {{ .Values.nodeName }}
    app.kubernetes.io/name: {{ .Values.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
    backoffLimit: 6
    template:
      metadata:
        labels:
          app: {{ .Values.nodeName }}
          app.kubernetes.io/name: {{ .Values.nodeName }}
          app.kubernetes.io/instance: {{ .Release.Name }}
      spec:
        restartPolicy: "OnFailure"
        serviceAccountName: {{ $.Values.vault.serviceaccountname }}
        hostname: {{ .Values.nodeName }}
        securityContext:
          fsGroup: 1000
        imagePullSecrets:
        - name: {{ .Values.image.imagepullsecret }}
        initContainers:
        - name: init-certificates
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          env:
            - name: VAULT_ADDR
              value: {{ $.Values.vault.address }}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.vault.authpath }}
            - name: VAULT_APP_ROLE
              value: {{ $.Values.vault.role }}
            - name: BASE_DIR
              value: {{ $.Values.nodeConf.volume.baseDir }}
            - name: CERTS_SECRET_PREFIX
              value: {{ .Values.vault.certsecretprefix }}
            - name: MOUNT_PATH
              value: "/DATA"       
          command: ["sh", "-c"]
          args:
          - |-
                #!/usr/bin/env sh
                validateVaultResponse () {
                  if echo ${2} | grep "errors"; then
                    echo "ERROR: unable to retrieve ${1}: ${2}"
                    exit 1
                  fi
                  if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                  then
                    http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                    --header "X-Vault-Token: ${VAULT_TOKEN}" \
                    ${VAULT_ADDR}/v1/${1})
                    curl_response=$?
                    if test "$http_code" != "200" ; then
                        echo "Http response code from Vault - $http_code and curl_response - $curl_response"
                        if test "$curl_response" != "0"; then
                          echo "Error: curl command failed with error code - $curl_response"
                          exit 1
                        fi
                    fi
                  fi
                }

                # setting up env to get secrets from vault
                echo "Getting secrets from Vault Server"
                KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
                validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
                echo "logged into vault"
                
                # Creating dirs for storing the certificate
                mkdir -p ${MOUNT_PATH}/trust-stores

                # Fetching network-root-truststore certificates from vault
                COUNTER=1
                while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
                do
                    # get keystores from vault to see if certificates are created and put in vault
                    LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs | jq -r 'if .errors then . else . end')
                    data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["data"]')"
              
                    if [ "$data_info" == "null" ]
                    then
                      sleep {{ $.Values.vault.retryInterval }}
                    else
                      validateVaultResponse "${CERTS_SECRET_PREFIX}/root/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                      network_root_truststore=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["network-root-truststore.jks"]')
                      echo "${network_root_truststore}" | base64 -d > ${MOUNT_PATH}/trust-stores/network-root-truststore.jks
                      echo "Successfully got network truststore certifcates"
                      break
                    fi 
                    COUNTER=`expr "$COUNTER" + 1`
                done
                if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
                then
                  # printing number of trial done before giving up
                  echo "$COUNTER"
                  echo "network truststore certificates might not have been put in vault. Giving up!!!"
                  exit 1
                fi

                mkdir -p ${MOUNT_PATH}/tlscerts
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/certs/{{ .Values.networkServices.idmanName }} | jq -r 'if .errors then . else . end')
                validateVaultResponse "${CERTS_SECRET_PREFIX}/certs/{{ .Values.networkServices.idmanName }}" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                IDMAN_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["{{ .Values.networkServices.idmanName }}.crt"]')
                echo "${IDMAN_CERT}" | base64 -d > ${MOUNT_PATH}/tlscerts/idman.crt

                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/certs/{{ .Values.networkServices.networkmapName }} | jq -r 'if .errors then . else . end')
                validateVaultResponse "${CERTS_SECRET_PREFIX}/certs/{{ .Values.networkServices.networkmapName }}" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                NETWORKMAP_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["{{ .Values.networkServices.networkmapName }}.crt"]')
                echo "${NETWORKMAP_CERT}" | base64 -d > ${MOUNT_PATH}/tlscerts/networkmap.crt

                # Fetching node keystore, node truststore and network-root-truststore credentials from the vault
                mkdir -p ${MOUNT_PATH}/credentials
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials | jq -r 'if .errors then . else . end')
                validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                TRUSTSTORE_PASSWORD=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["truststore"]')
                echo "${TRUSTSTORE_PASSWORD}" > ${MOUNT_PATH}/credentials/truststorepass
                KEYSTORE_PASSWORD=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["keystore"]')
                echo "${KEYSTORE_PASSWORD}" > ${MOUNT_PATH}/credentials/keystorepass  
                KEYSTORE_PASSWORD=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["root"]')
                echo "${KEYSTORE_PASSWORD}" > ${MOUNT_PATH}/credentials/rootpass             
                
                echo "Done"
          volumeMounts:
          - name: certificates
            mountPath: /DATA   
        - name: db-healthcheck
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          command: ["sh", "-c"]
          args:
          - |-
            #!/usr/bin/env sh
            COUNTER=1
            FLAG=true
            # perform health check if db is up and running before starting corda node
            while [ "$COUNTER" -le {{ $.Values.dataSourceProperties.retries }} ]
            do
              DB_NODE={{ .Values.dataSourceProperties.dataSource.dbUrl }}:{{ .Values.dataSourceProperties.dataSource.dbPort }}
              STATUS=$(nc -vz $DB_NODE 2>&1 | grep -c open )

              if [ "$STATUS" == 0 ]
              then
                  FLAG=false
              else
                  FLAG=true
                  echo "DB up and running"
              fi

              if [ "$FLAG" == false ]
              then
                  echo "Retry attempted $COUNTER times, retrying after {{ $.Values.dataSourceProperties.retryInterval }} seconds"
                  COUNTER=`expr "$COUNTER" + 1`
                  sleep {{ $.Values.dataSourceProperties.retryInterval }}
              else
                  echo "SUCCESS!"
                  echo "DB up and running!"
                  exit 0
                  break
              fi
            done

            if [ "$COUNTER" -gt {{ $.Values.dataSourceProperties.retries }} ] || [ "$FLAG" == false ]
            then
                echo "Retry attempted $COUNTER times, no DB up and running. Giving up!"
                exit 1
                break
            fi     
        containers:
        - name: registration
          image: "{{ .Values.image.nodeContainerName }}"
          env:
            - name: ACCEPT_LICENSE
              value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
          - |-
            rm -f certificates/done.txt
            echo 'myLegalName: "{{ .Values.nodeConf.legalName }}"
            emailAddress: "{{ .Values.nodeConf.emailAddress }}"
            p2pAddress: "{{ .Values.service.p2pAddress }}:{{ .Values.service.p2pPort }}"
            networkServices: {
              doormanURL: "{{ .Values.networkServices.doormanURL }}",
              networkMapURL: "{{ .Values.networkServices.networkMapURL }}"
            }
            crlCheckSoftFail: {{ .Values.nodeConf.crlCheckSoftFail }}
            {{- if ne .Values.nodeConf.tlsCertCrlDistPoint "" }}
            tlsCertCrlDistPoint:  "{{ .Values.nodeConf.tlsCertCrlDistPoint }}",
            tlsCertCrlIssuer: "{{ .Values.nodeConf.tlsCertCrlIssuer }}"
            {{- end }}
            devMode: {{ .Values.nodeConf.devMode }}
            {{- if .Values.service.ssh.enabled }}
            sshd:  {
              port: {{ .Values.service.ssh.sshdPort }}
            }
            {{- end }}
            rpcSettings: {
              address: "0.0.0.0:{{ .Values.service.rpc.port }}",
              adminAddress: "0.0.0.0:{{ .Values.service.rpc.adminPort }}"
            }
            rpcUsers: [
            {{- range $user := .Values.service.rpc.users }}
              {
                user: "{{ $user.name }}",
                password: "{{ $user.password }}",
                permissions: [
                  "{{ $user.permissions }}"
                ]
              }
            {{- end }}
            ]
            {{- if .Values.dataSourceProperties.monitoring.enabled }}
            jmxMonitoringHttpPort: {{ .Values.dataSourceProperties.monitoring.port }}
            {{- end }}

            trustStorePassword: "TRUSTSTORE_PASSWORD"
            keyStorePassword : "KEYSTORE_PASSWORD"
            detectPublicIp: false
            additionalP2PAddresses: ["{{ .Values.nodeConf.ambassador.p2pAddress }}"]
            messagingServerAddress: "0.0.0.0:{{ .Values.service.messagingServerPort }}"
            messagingServerExternal: false
            enterpriseConfiguration: {
              externalBridge: {{ .Values.firewall.enabled }}
            }
            {{- if .Values.dataSourceProperties.allowDevCorDapps.enabled }}
            cordappSignerKeyFingerprintBlacklist: [
            ]
            {{- end }}
            dataSourceProperties: {
              dataSourceClassName: "{{ .Values.dataSourceProperties.dataSource.dataSourceClassName }}",
              dataSource.url: "{{ .Values.dataSourceProperties.dataSource.url }}",
              dataSource.user: "{{ .Values.dataSourceProperties.dataSource.user }}",
              dataSource.password: "{{ .Values.dataSourceProperties.dataSource.password }}"
            }
            database = {
            {{- if eq .Values.dataSourceProperties.dataSource.dataSourceClassName "oracle.jdbc.pool.OracleDataSource" }}
                schema = xe
            {{- end}}
            }' > etc/node.conf

            export TRUSTSTORE_PASSWORD=$(cat DATA/credentials/truststorepass)
            sed -i -e "s*TRUSTSTORE_PASSWORD*${TRUSTSTORE_PASSWORD}*g" etc/node.conf
            export KEYSTORE_PASSWORD=$(cat DATA/credentials/keystorepass)
            sed -i -e "s*KEYSTORE_PASSWORD*${KEYSTORE_PASSWORD}*g" etc/node.conf
  
            SSL_TRUSTSTORE_PASSWORD=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13)
            CORDA_SSL_TRUSTSTORE=DATA/trust-stores/corda-ssl-custom-trust-store.jks
            yes | keytool -importcert -file DATA/tlscerts/networkmap.crt -storepass $SSL_TRUSTSTORE_PASSWORD -alias {{ .Values.networkServices.networkMapDomain }} -keystore $CORDA_SSL_TRUSTSTORE
            yes | keytool -importcert -file DATA/tlscerts/idman.crt -storepass $SSL_TRUSTSTORE_PASSWORD -alias {{ .Values.networkServices.idmanDomain }} -keystore $CORDA_SSL_TRUSTSTORE
            
            /bin/sh
                      
            # Network root trust store path and password
            NETWORK_ROOT_TRUSTSTORE=DATA/trust-stores/network-root-truststore.jks
            NETWORK_ROOT_TRUSTSTORE_PASSWORD=$(cat DATA/credentials/rootpass)

            # Check for network root trust store
            while true
            do
                if [ ! -f ${NETWORK_ROOT_TRUSTSTORE} ]
                then
                    echo "no network-root-truststore"
                    sleep 10
                else
                    echo
                    echo "md5/sha256 of ${NETWORK_ROOT_TRUSTSTORE}: "
                    md5sum ${NETWORK_ROOT_TRUSTSTORE}    | awk '{print $1}' | xargs printf "   md5sum: %65s\n"
                    sha256sum ${NETWORK_ROOT_TRUSTSTORE} | awk '{print $1}' | xargs printf "sha256sum: %65s\n"
                    echo
                    echo
                    break
                fi
            done

            # Check for Idman and networkmap service links are up
            server=$(echo {{ .Values.networkServices.doormanURL }} | sed 's/.*\/\/\(.*\):\(.*\)/\1/' )
            port=$(echo {{ .Values.networkServices.doormanURL }} | sed 's/.*\/\/\(.*\):\(.*\)/\2/' )
            #handle when no port is provided
            [[ ${server} = ${port} ]] && port=443
            server=$(echo $server|sed 's/.*\/\/\(.*\)/\1/')
            printf "IdMan server:%s" "${server}"
            printf "  IdMan port:%s" "${port}"
            timeout 10m bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done' ${server} ${port}

            while true
            do
                if [ ! -f certificates/nodekeystore.jks ] || [ ! -f certificates/sslkeystore.jks ] || [ ! -f certificates/truststore.jks ]
                then
                    echo
                    echo "Node: running initial registration ..."
                    echo
                    pwd
                    java -Djavax.net.ssl.trustStore=${CORDA_SSL_TRUSTSTORE} \
                      -jar {{ .Values.nodeConf.jarPath }}/corda.jar \
                      initial-registration \
                    --config-file={{ .Values.nodeConf.configPath }}/node.conf \
                    --log-to-console \
                    --network-root-truststore ${NETWORK_ROOT_TRUSTSTORE}  \
                    --network-root-truststore-password ${NETWORK_ROOT_TRUSTSTORE_PASSWORD}
                    EXIT_CODE=${?}
                else
                    echo
                    echo "Node: already registered to IdMan - skipping initial registration."
                    echo
                    EXIT_CODE="0"
                    break
                fi
            done

            if [ "${EXIT_CODE}" -ne "0" ]
            then
                HOW_LONG={{ .Values.sleepTimeAfterError }}
                echo
                echo "Node initial registration failed - exit code: ${EXIT_CODE} (error)"
                echo
                echo "Going to sleep for requested ${HOW_LONG} seconds to let you login and investigate."
                echo
                pwd
                ls -al 
            else
                HOW_LONG={{ .Values.sleepTime }}
                echo
                echo "Node initial registration: no errors - sleeping for requested ${HOW_LONG} seconds before disappearing."
                echo
            fi
            sleep ${HOW_LONG}

            touch certificates/done.txt
          volumeMounts:
          - name: node-etc
            mountPath: /opt/corda/etc
          - name: node-nodeinfo
            mountPath: /opt/corda/additional-node-infos
          - name: node-certificates
            mountPath: /opt/corda/certificates
          - name: certificates
            mountPath: /opt/corda/DATA
          resources:
            requests:
              memory: {{ .Values.nodeConf.pod.resources.requests }}
            limits:
              memory: {{ .Values.nodeConf.pod.resources.limits }}
        - name: store-certs
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          env:
            - name: VAULT_ADDR
              value: {{ $.Values.vault.address }}
            - name: FLOAT_VAULT_ADDR
              value: {{ $.Values.vault.floatVaultAddress }}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.vault.authpath }}
            - name: KUBERNETES_AUTH_PATH_FLOATVAULT
              value: {{ $.Values.vault.authpathFloat }}
            - name: VAULT_APP_ROLE
              value: {{ $.Values.vault.role }}
            - name: BASE_DIR
              value: {{ $.Values.nodeConf.volume.baseDir }}
            - name: CERTS_SECRET_PREFIX
              value: {{ .Values.vault.certsecretprefix }}
            - name: MOUNT_PATH
              value: "/DATA"
          command: ["sh", "-c"]
          args:
          - |-
            #!/usr/bin/env sh
            validateVaultResponse () {
              if echo ${2} | grep "errors"; then
                 echo "ERROR: unable to retrieve ${1}: ${2}"
                 exit 1
              fi
            }          

            # perform check if certificates are ready or not, and upload certificate into vault when ready
            COUNTER=1
            cd ${BASE_DIR}/certificates
            while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
            do
              if [ -e done.txt ]
              then
                echo "found certificates, performing vault put"
                # setting up env to get secrets from vault
                KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
                validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
                (echo '{"data": {"nodekeystore.jks": "'; base64 ${BASE_DIR}/certificates/nodekeystore.jks; echo '"}}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/certs/nodekeystore
                (echo '{"data": {"sslkeystore.jks": "'; base64 ${BASE_DIR}/certificates/sslkeystore.jks; echo '"}}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/certs/sslkeystore
                (echo '{"data": {"truststore.jks": "'; base64 ${BASE_DIR}/certificates/truststore.jks; echo '"}}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/certs/truststore
                if [ "$FLOAT_VAULT_ADDR" != "" ]
                then
                  echo "Getting vault token for float vault and putting certificates in it.."
                  VAULT_TOKEN_FLOAT=$(curl -sS --request POST ${FLOAT_VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH_FLOATVAULT}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
                  validateVaultResponse 'vault login token' "${VAULT_TOKEN_FLOAT}"
                  # Put in the certs in float vault is firewall is enabled
                  (echo '{"data": {"sslkeystore.jks": "'; base64 ${BASE_DIR}/certificates/sslkeystore.jks; echo '"}}') | curl -H "X-Vault-Token: ${VAULT_TOKEN_FLOAT}" -d @- ${FLOAT_VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/certs/sslkeystore
                  (echo '{"data": {"truststore.jks": "'; base64 ${BASE_DIR}/certificates/truststore.jks; echo '"}}') | curl -H "X-Vault-Token: ${VAULT_TOKEN_FLOAT}" -d @- ${FLOAT_VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/certs/truststore
                fi
  
                # get nodekeystore.jks from vault
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodePath }}/certs/nodekeystore | jq -r 'if .errors then . else . end')
                TLS_NODEKEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "nodekeystore.jks" ]' 2>&1)
                # get sslkeystore.jks from vault
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodePath }}/certs/sslkeystore | jq -r 'if .errors then . else . end')
                TLS_SSLKEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "sslkeystore.jks" ]' 2>&1)
                # get truststore.jks from vault
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodePath }}/certs/truststore | jq -r 'if .errors then . else . end')
                TLS_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "truststore.jks" ]' 2>&1) 

                if [ "$TLS_NODEKEYSTORE" == "null" ] || [ "$TLS_SSLKEYSTORE" == "null" ] || [ "$TLS_TRUSTSTORE" == "null" ] || [[ "$TLS_NODEKEYSTORE" == "parse error"* ]] || [[ "$TLS_SSLKEYSTORE" == "parse error"* ]] || [[ "$TLS_TRUSTSTORE" == "parse error"* ]]
                then
                  echo "certificates write or read fail"
                  sleep {{ $.Values.healthcheck.readinessthreshold  }}
                  if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
                  then
                    echo "Retry attempted $COUNTER times, certificates have not been saved"
                    exit 1
                  fi
                fi
                COUNTER=`expr "$COUNTER" + 1`
              fi
            done
          volumeMounts:
          - name: node-nodeinfo
            mountPath: /opt/corda/additional-node-infos
          - name: node-certificates
            mountPath: /opt/corda/certificates
          - name: certificates
            mountPath: /opt/corda/DATA
          resources:
            requests:
              memory: {{ .Values.nodeConf.pod.resources.requests }}
            limits:
              memory: {{ .Values.nodeConf.pod.resources.limits }}
        volumes:
        - name: node-etc
          emptyDir:
            medium: Memory
        - name: node-nodeinfo
          emptyDir:
            medium: Memory
        - name: node-certificates
          emptyDir:
            medium: Memory
        - name: certificates
          emptyDir:
            medium: Memory
