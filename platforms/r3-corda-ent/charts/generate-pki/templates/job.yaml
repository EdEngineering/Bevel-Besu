##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.nodeName }}-generate-pki
  namespace: {{ .Values.metadata.namespace }}
  labels:
    app: {{ .Values.nodeName }}-generate-pki
    app.kubernetes.io/name: {{ .Values.nodeName }}-generate-pki
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
    backoffLimit: 6
    template:
      metadata:
        labels:
          app: {{ .Values.nodeName }}-generate-pki
          app.kubernetes.io/name: {{ .Values.nodeName }}-generate-pki
          app.kubernetes.io/instance: {{ .Release.Name }}
      spec:
        restartPolicy: "OnFailure"
        serviceAccountName: {{ $.Values.vault.serviceaccountname }}
        hostname: {{ .Values.nodeName }}
        securityContext:
          fsGroup: 1000
        initContainers:
        - name: init-check-certificates
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          env:
            - name: VAULT_ADDR
              value: {{ $.Values.vault.address }}
            - name: VAULT_APP_ROLE
              value: {{.Values.vault.role}}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.vault.authpath }}
            - name: CERTS_SECRET_PREFIX
              value: {{ .Values.vault.certsecretprefix }}
            - name: MOUNT_PATH
              value: "/certcheck"
          command: ["sh", "-c"]
          args:
          - |-
              #!/usr/bin/env sh
              validateVaultResponse () {
                if echo ${2} | grep "errors"; then
                  echo "ERROR: unable to retrieve ${1}: ${2}"
                  exit 1
                fi
                if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                then
                  http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                  --header "X-Vault-Token: ${VAULT_TOKEN}" \
                  ${VAULT_ADDR}/v1/${1})
                  curl_response=$?
                  if test "$http_code" != "200" ; then
                      echo "Http response code from Vault - $http_code and curl_response - $curl_response"
                      if test "$curl_response" != "0"; then
                        echo "Error: curl command failed with error code - $curl_response"
                        exit 1
                      fi
                  fi
                fi
              }
              # Setting up the environment to get secrets/certificates from Vault
              echo "Getting secrets/certificates from Vault server"
              KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
              validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
              echo "Logged into Vault"
              mkdir -p ${MOUNT_PATH}
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs | jq -r 'if .errors then . else . end')
              data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["data"]')"
              
              if [ "$data_info" == "null" ]           
              then
                echo "Certficates absent in vault. Ignore error warning"
                touch ${MOUNT_PATH}/absent.txt
              else
                validateVaultResponse "${CERTS_SECRET_PREFIX}/root/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                echo "Certificates present in vault"
                touch ${MOUNT_PATH}/present.txt
              fi 
              echo "Done checking for certificates in vault"
          volumeMounts:
          - name: certcheck
            mountPath: /certcheck
        - name: init-credentials
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          env:
            - name: VAULT_ADDR
              value: {{ $.Values.vault.address }}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.vault.authpath }}
            - name: VAULT_APP_ROLE
              value: {{ $.Values.vault.role }}
            - name: BASE_DIR
              value: {{ $.Values.volume.baseDir }}
            - name: CERTS_SECRET_PREFIX
              value: {{ .Values.vault.certsecretprefix }}
            - name: MOUNT_PATH
              value: "/DATA"
            - name: NODEINFO_MOUNT_PATH
              value: "/notary-nodeinfo"
          command: ["sh", "-c"]
          args:
          - |-
              #!/usr/bin/env sh
              validateVaultResponse () {
                if echo ${2} | grep "errors"; then
                  echo "ERROR: unable to retrieve ${1}: ${2}"
                  exit 1
                fi
                if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                then
                  http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                  --header "X-Vault-Token: ${VAULT_TOKEN}" \
                  ${VAULT_ADDR}/v1/${1})
                  curl_response=$?
                  if test "$http_code" != "200" ; then
                      echo "Http response code from Vault - $http_code and curl_response - $curl_response"
                      if test "$curl_response" != "0"; then
                        echo "Error: curl command failed with error code - $curl_response"
                        exit 1
                      fi
                  fi
                fi
              }
              if [ -e /certcheck/present.txt ]
              then
                echo "Certificates already present in the vault. Skipping.."
                exit 0
              fi
              # Setting up the environment to get secrets from Vault
              echo "Getting secrets from Vault Server"
              KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"vault-role","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
              validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
              echo "logged into vault"
              # Creating dirs for storing certificates
              mkdir -p ${MOUNT_PATH}/truststore;
              mkdir -p ${MOUNT_PATH}/keystore;
              mkdir -p ${MOUNT_PATH}/ssl;
              OUTPUT_PATH=${MOUNT_PATH}/truststore;
              # Fetching credentials for truststores
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/truststore | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials/truststore" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              ROOTCA_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["rootca"]')
              echo "${ROOTCA_TRUSTSTORE}"> ${OUTPUT_PATH}/rootcats
              SSL_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["ssl"]')
              echo "${SSL_TRUSTSTORE}"> ${OUTPUT_PATH}/sslts
              OUTPUT_PATH=${MOUNT_PATH}/keystore;
              # Fetching credentials for keystores
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/keystore | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials/keystore" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              IDMAN_KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["idman"]')
              echo "${IDMAN_KEYSTORE}"> ${OUTPUT_PATH}/idmanks
              NETWORKMAP_KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["networkmap"]')
              echo "${NETWORKMAP_KEYSTORE}"> ${OUTPUT_PATH}/networkmapks
              SUBORDINATECA_KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["subordinateca"]')
              echo "${SUBORDINATECA_KEYSTORE}"> ${OUTPUT_PATH}/subordinatecaks
              ROOTCA_KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["rootca"]')
              echo "${ROOTCA_KEYSTORE}"> ${OUTPUT_PATH}/rootcaks
              TLSCRLSIGNER_KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["tlscrlsigner"]')
              echo "${TLSCRLSIGNER_KEYSTORE}"> ${OUTPUT_PATH}/tlscrlsignerks
              OUTPUT_PATH=${MOUNT_PATH}/ssl;
              # Fetching credentials for ssl certificates
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/ssl | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials/ssl" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              IDMAN_SSL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["idman"]')
              echo "${IDMAN_SSL}"> ${OUTPUT_PATH}/idmanssl
              NETWORKMAP_SSL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["networkmap"]')
              echo "${NETWORKMAP_SSL}"> ${OUTPUT_PATH}/networkmapssl
              SIGNER_SSL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["signer"]')
              echo "${SIGNER_SSL}"> ${OUTPUT_PATH}/signerssl
              AUTH_SSL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["auth"]')
              echo "${AUTH_SSL}"> ${OUTPUT_PATH}/authssl
              ROOT_SSL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["root"]')
              echo "${ROOT_SSL}"> ${OUTPUT_PATH}/rootssl
              touch /DATA/done.txt
              echo "Done"
          volumeMounts:
          - name: credentials
            mountPath: /DATA
          - name: certcheck
            mountPath: /certcheck
        containers:
        - name: pki
          image: "{{ required "pki[main]: missing value for .Values.image.pkiContainerName" .Values.image.pkiContainerName }}"
          env:
            - name: ACCEPT_LICENSE
              value: "{{ .Values.acceptLicense }}"
            - name: BASE_DIR
              value: "{{ .Values.volume.baseDir }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
          - |-
            if [ -e /certcheck/present.txt ]
            then
              echo "Certificates already present in the vault. Skipping.."
              exit 0
            fi
            rm -r ${BASE_DIR}/DATA/done.txt
            echo 'keyStores = {
                "identity-manager-key-store" = {
                    type = LOCAL
                    file = "./DATA/signer/identity-manager-key-store.jks"
                    password = "IDMAN_KEYSTORE"
                }
                "network-map-key-store" = {
                    type = LOCAL
                    file = "./DATA/signer/network-map-key-store.jks"
                    password = "NETWORKMAP_KEYSTORE"
                }
                "subordinate-key-store" = {
                    type = LOCAL
                    file = "./DATA/root/subordinate-key-store.jks"
                    password = "SUBORDINATECA_KEYSTORE"
                }
                "root-key-store" = {
                    type = LOCAL
                    file = "./DATA/root/root-key-store.jks"
                    password = "ROOTCA_KEYSTORE"
                }
                "tls-crl-signer-key-store" = {
                    type = LOCAL
                    file = "./DATA/root/tls-crl-signer-key-store.jks"
                    password = "TLSCRLSIGNER_KEYSTORE"
                }
                "corda-ssl-network-map-keys" = {
                    type = LOCAL
                    file = "./DATA/networkmap/corda-ssl-network-map-keys.jks"
                    password = "NETWORKMAP_SSL"
                },
                "corda-ssl-identity-manager-keys" = {
                    type = LOCAL
                    file = "./DATA/idman/certs/corda-ssl-identity-manager-keys.jks"
                    password = "IDMAN_SSL"
                },
                "corda-ssl-signer-keys" = {
                    type = LOCAL
                    file = "./DATA/signer/corda-ssl-signer-keys.jks"
                    password = "SIGNER_SSL"
                },
                "corda-ssl-auth-keys" = {
                    type = LOCAL
                    file = "./DATA/root/corda-ssl-auth-keys.jks"
                    password = "AUTH_SSL"
                },
                "corda-ssl-root-keys" = {
                    type = LOCAL
                    file = "./DATA/root/corda-ssl-root-keys.jks"
                    password = "ROOT_SSL"
                }    
            }
            certificatesStores = {
                "network-root-trust-store" = {
                    file = "./DATA/root/network-root-truststore.jks"
                    password = "ROOTCA_TRUSTSTORE"
                }
                "corda-ssl-trust-store" = {
                    file = "./DATA/root/corda-ssl-trust-store.jks"
                    password = "SSL_TRUSTSTORE"
                }
            }
            certificates = {
                "tlscrlsigner" = {
                    key = {
                        type = LOCAL
                        includeIn = ["tls-crl-signer-key-store"]
                        algorithm = "ECDSA_SECP256R1_SHA256"
                        password = "TLSCRLSIGNER_KEYSTORE"
                    }
                    isSelfSigned = true
                    keyUsages = [CRL_SIGN]
                    keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
                    validDays = 7300
                    issuesCertificates = true
                    subject = {{ .Values.subjects.tlscrlsigner | quote }}
                    includeIn = ["network-root-trust-store"]
                    crl = {
                        crlDistributionUrl = "https://{{ .Values.identityManager.publicIp }}:{{ .Values.identityManager.publicPort }}/certificate-revocation-list/tls"
                        indirectIssuer = true
                        issuer = {{ .Values.subjects.tlscrlissuer | quote }}
                        file = "./DATA/idman/crls/tls.crl"
                    }
                },
                "cordarootca" = {
                    key = {
                        type = LOCAL
                        includeIn = ["root-key-store"]
                        algorithm = "ECDSA_SECP256R1_SHA256"
                        password = "ROOTCA_KEYSTORE"
                    }
                    isSelfSigned = true
                    keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
                    keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
                    validDays = 7300
                    issuesCertificates = true
                    subject = {{ .Values.subjects.rootca | quote }}
                    includeIn = ["network-root-trust-store"]
                    crl = {
                        crlDistributionUrl = "https://{{ .Values.identityManager.publicIp }}:{{ .Values.identityManager.publicPort }}/certificate-revocation-list/root"
                        file = "./DATA/idman/crls/root.crl"
                    }
                },
                "subordinateca" = {
                    key = {
                        type = LOCAL
                        includeIn = ["subordinate-key-store"]
                        algorithm = "ECDSA_SECP256R1_SHA256"
                        password = "SUBORDINATECA_KEYSTORE"
                    }
                    isSelfSigned = false
                    signedBy = "cordarootca"
                    keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
                    keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
                    validDays = 7300
                    issuesCertificates = true
                    subject = {{ .Values.subjects.subordinateca | quote }}
                    crl = {
                        crlDistributionUrl = "https://{{ .Values.identityManager.publicIp }}:{{ .Values.identityManager.publicPort }}/certificate-revocation-list/subordinate"
                        file = "./DATA/idman/crls/subordinate.crl"
                    }
                },
                "identitymanagerca" = {
                    key = {
                        type = LOCAL
                        includeIn = ["identity-manager-key-store"]
                        algorithm = "ECDSA_SECP256R1_SHA256"
                        password = "IDMAN_KEYSTORE"
                    }
                    isSelfSigned = false
                    signedBy = "subordinateca"
                    keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
                    keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
                    validDays = 7300
                    role = DOORMAN_CA
                    issuesCertificates = true
                    subject = {{ .Values.subjects.idmanca | quote }}
                },
                "networkmap" = {
                    key = {
                        type = LOCAL
                        includeIn = ["network-map-key-store"]
                        algorithm = "ECDSA_SECP256R1_SHA256"
                        password = "NETWORKMAP_KEYSTORE"
                    }
                    isSelfSigned = false
                    signedBy = "subordinateca"
                    keyUsages = [DIGITAL_SIGNATURE, KEY_CERT_SIGN, CRL_SIGN]
                    keyPurposes = [SERVER_AUTH, CLIENT_AUTH]
                    validDays = 7300
                    role = NETWORK_MAP
                    issuesCertificates = false
                    subject = {{ .Values.subjects.networkmap | quote }}
                },
                "::CORDA_SSL_ROOT" {
                    key = {
                        type = LOCAL
                        includeIn = ["corda-ssl-root-keys"]
                        algorithm = "ECDSA_SECP256R1_SHA256"
                        password = "ROOT_SSL"
                    }
                    crl = {
                        crlDistributionUrl = "https://{{ .Values.identityManager.publicIp }}:{{ .Values.identityManager.publicPort }}/certificate-revocation-list/ssl"
                        file = "./DATA/root/crls/ssl.crl"
                    }
                },
                "::CORDA_SSL_IDENTITY_MANAGER" {
                    key = {
                        type = LOCAL
                        includeIn = ["corda-ssl-identity-manager-keys"]
                        algorithm = "ECDSA_SECP256R1_SHA256"
                        password = "IDMAN_SSL"
                    }
                    crl = {
                        crlDistributionUrl = "https://{{ .Values.identityManager.publicIp }}:{{ .Values.identityManager.publicPort }}/certificate-revocation-list/ssl"
                        file = "./DATA/idman/crls/ssl.crl"
                    }
                },
                "::CORDA_SSL_NETWORK_MAP" {
                    key = {
                        type = LOCAL
                        includeIn = ["corda-ssl-network-map-keys"]
                        algorithm = "ECDSA_SECP256R1_SHA256"
                        password = "NETWORKMAP_SSL"
                    }
                    crl = {
                        crlDistributionUrl = "https://{{ .Values.identityManager.publicIp }}:{{ .Values.identityManager.publicPort }}/certificate-revocation-list/ssl"
                        file = "./DATA/networkmap/crls/ssl.crl"
                    }
                },
                "::CORDA_SSL_SIGNER" {
                    key = {
                        type = LOCAL
                        includeIn = ["corda-ssl-signer-keys"]
                        algorithm = "ECDSA_SECP256R1_SHA256"
                        password = "SIGNER_SSL"
                    }
                    crl = {
                        crlDistributionUrl = "https://{{ .Values.identityManager.publicIp }}:{{ .Values.identityManager.publicPort }}/certificate-revocation-list/ssl"
                        file = "./DATA/signer/crls/ssl.crl"
                    }
                },
                "::CORDA_SSL_AUTH_SERVICE" {
                    key = {
                        type = LOCAL
                        includeIn = ["corda-ssl-auth-keys"]
                        algorithm = "ECDSA_SECP256R1_SHA256"
                        password = "AUTH_SSL"
                    }
                    crl = {
                        crlDistributionUrl = "https://{{ .Values.identityManager.publicIp }}:{{ .Values.identityManager.publicPort }}/certificate-revocation-list/ssl"
                        file = "./DATA/root/crls/ssl.crl"
                    }
                }   
            }' >> {{ .Values.configPath }}/pki.conf
            #replacement of the variables in the pki conf file
            export ROOTCA_TRUSTSTORE=$(cat {{ .Values.volume.baseDir }}/credentials/truststore/rootcats)
            sed -i -e "s*ROOTCA_TRUSTSTORE*${ROOTCA_TRUSTSTORE}*g" {{ .Values.configPath }}/pki.conf
            export SSL_TRUSTSTORE=$(cat {{ .Values.volume.baseDir }}/credentials/truststore/sslts)
            sed -i -e "s*SSL_TRUSTSTORE*${SSL_TRUSTSTORE}*g" {{ .Values.configPath }}/pki.conf
            export IDMAN_KEYSTORE=$(cat {{ .Values.volume.baseDir }}/credentials/keystore/idmanks)
            sed -i -e "s*IDMAN_KEYSTORE*${IDMAN_KEYSTORE}*g" {{ .Values.configPath }}/pki.conf
            export NETWORKMAP_KEYSTORE=$(cat {{ .Values.volume.baseDir }}/credentials/keystore/networkmapks)
            sed -i -e "s*NETWORKMAP_KEYSTORE*${NETWORKMAP_KEYSTORE}*g" {{ .Values.configPath }}/pki.conf
            export SUBORDINATECA_KEYSTORE=$(cat {{ .Values.volume.baseDir }}/credentials/keystore/subordinatecaks)
            sed -i -e "s*SUBORDINATECA_KEYSTORE*${SUBORDINATECA_KEYSTORE}*g" {{ .Values.configPath }}/pki.conf
            export ROOTCA_KEYSTORE=$(cat {{ .Values.volume.baseDir }}/credentials/keystore/rootcaks)
            sed -i -e "s*ROOTCA_KEYSTORE*${ROOTCA_KEYSTORE}*g" {{ .Values.configPath }}/pki.conf
            export TLSCRLSIGNER_KEYSTORE=$(cat {{ .Values.volume.baseDir }}/credentials/keystore/tlscrlsignerks)
            sed -i -e "s*TLSCRLSIGNER_KEYSTORE*${TLSCRLSIGNER_KEYSTORE}*g" {{ .Values.configPath }}/pki.conf
            export IDMAN_SSL=$(cat {{ .Values.volume.baseDir }}/credentials/ssl/idmanssl)
            sed -i -e "s*IDMAN_SSL*${IDMAN_SSL}*g" {{ .Values.configPath }}/pki.conf
            export NETWORKMAP_SSL=$(cat {{ .Values.volume.baseDir }}/credentials/ssl/networkmapssl)
            sed -i -e "s*NETWORKMAP_SSL*${NETWORKMAP_SSL}*g" {{ .Values.configPath }}/pki.conf
            export SIGNER_SSL=$(cat {{ .Values.volume.baseDir }}/credentials/ssl/signerssl)
            sed -i -e "s*SIGNER_SSL*${SIGNER_SSL}*g" {{ .Values.configPath }}/pki.conf
            export AUTH_SSL=$(cat {{ .Values.volume.baseDir }}/credentials/ssl/authssl)
            sed -i -e "s*AUTH_SSL*${AUTH_SSL}*g" {{ .Values.configPath }}/pki.conf
            export ROOT_SSL=$(cat {{ .Values.volume.baseDir }}/credentials/ssl/rootssl)
            sed -i -e "s*ROOT_SSL*${ROOT_SSL}*g" {{ .Values.configPath }}/pki.conf
            mkdir DATA/signer DATA/root DATA/networkmap DATA/idman DATA/idman/crls DATA/idman/certs
            time java -Xmx{{ .Values.cordaJarMx }}M -jar bin/pkitool.jar --config-file {{ .Values.configPath }}/pki.conf
            #creating a dummy file to perform check if last line is executed or not.
            touch ${BASE_DIR}/DATA/done.txt
          volumeMounts:
          - name: certcheck
            mountPath: /certcheck
          - name: credentials
            mountPath: {{ .Values.volume.baseDir }}/credentials
          - name: pkitool-certs-keys
            mountPath: {{ .Values.volume.baseDir }}/DATA
          - name: pkitool-etc
            mountPath: {{ .Values.volume.baseDir }}/etc
          resources:
            requests:
              memory: {{ .Values.cordaJarMx }}M
            limits:
              memory: {{ add .Values.cordaJarMx 2 }}M
        - name: store-certs
          image: {{ .Values.image.initContainerName }}
          imagePullPolicy: Always
          env:
             - name: VAULT_ADDR
               value: {{ $.Values.vault.address }}
             - name: KUBERNETES_AUTH_PATH
               value: {{ $.Values.vault.authpath }}
             - name: VAULT_APP_ROLE
               value: {{ $.Values.vault.role }}
             - name: BASE_DIR
               value: {{ $.Values.volume.baseDir }}
             - name: CERTS_SECRET_PREFIX
               value: {{ .Values.vault.certsecretprefix }}
          command: ["sh", "-c"]
          args:
          - |-
            #!/usr/bin/env sh
            validateVaultResponse () {
              if echo ${2} | grep "errors"; then
                 echo "ERROR: unable to retrieve ${1}: ${2}"
                 exit 1
              fi
            }
            
            if [ -e /certcheck/present.txt ]
            then
              echo "Certificates already present in the vault. Skipping.."
              exit 0
            fi
            # setting up env to get secrets from vault
            KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
            VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
            validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
            cd ${BASE_DIR}/DATA
            # putting certificate for cenm root 
            COUNTER=1
            while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
            do
              if [ -e done.txt ]
              then
                cd ${BASE_DIR}/DATA/root
                echo "found root certificates, performing vault put for root path"
                (echo '{"data": {'
                for FILE in *;
                do
                echo '"'$FILE'": "'; base64 ${FILE}; echo '",'
                done;
                ) >> ../temp_root.json
                sed -i '$ s/.$//' ../temp_root.json
                echo '}}' >> ../temp_root.json
                cat ../temp_root.json | tr -d '\n' >> ../root.json
                echo "before curl"
                curl \
                 --header "X-Vault-Token: ${VAULT_TOKEN}" \
                 --request POST \
                 --data @../root.json \
                ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs
                echo "after curl"

                # get root certs from vault
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs | jq -r 'if .errors then . else . end')
                CORDA_SSL_AUTH_KEYS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "corda-ssl-auth-keys.jks" ]' 2>&1)
                CORDA_SSL_ROOT_KEYS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "corda-ssl-root-keys.jks" ]' 2>&1)
                CORDA_SSL_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "corda-ssl-trust-store.jks" ]' 2>&1)
                NETWORK_ROOT_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "network-root-truststore.jks" ]' 2>&1)
                ROOT_KEY_STORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "root-key-store.jks" ]' 2>&1)
                SUBORDINATE_KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "subordinate-key-store.jks" ]' 2>&1)
                TLSCRL_SIGNER_KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "tls-crl-signer-key-store.jks" ]' 2>&1)

                if [ "$CORDA_SSL_AUTH_KEYS" == "null" ] || [ "$CORDA_SSL_ROOT_KEYS" == "null" ] || [ "$CORDA_SSL_TRUSTSTORE" == "null" ] || [ "$NETWORK_ROOT_TRUSTSTORE" == "null" ] || [ "$ROOT_KEY_STORE" == "null" ] || [ "$SUBORDINATE_KEYSTORE" == "null" ] || [ "$TLSCRL_SIGNER_KEYSTORE" == "null" ] || [[ "$CORDA_SSL_AUTH_KEYS" == "parse error"* ]] || [[ "$CORDA_SSL_ROOT_KEYS" == "parse error"* ]] || [[ "$CORDA_SSL_TRUSTSTORE" == "parse error"* ]] || [[ "$NETWORK_ROOT_TRUSTSTORE" == "parse error"* ]] || [[ "$ROOT_KEY_STORE" == "parse error"* ]] || [[ "$SUBORDINATE_KEYSTORE" == "parse error"* ]] || [[ "$TLSCRL_SIGNER_KEYSTORE" == "parse error"* ]]
                then
                  echo "certificates write or read fail"
                  sleep {{ $.Values.vault.sleepTimeAfterError  }}
                  if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
                  then
                    echo "Retry attempted $COUNTER times, certificates have not been saved"
                    exit 1
                  fi
                fi
                break
                COUNTER=`expr "$COUNTER" + 1`
              fi
            done
            cd ${BASE_DIR}/DATA
            # putting certificate for cenm signer
            COUNTER=1
            while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
            do
              if [ -e done.txt ]
              then
                cd ${BASE_DIR}/DATA/signer
                echo "found signer certificates, performing vault put for signer path"
                (echo '{"data": {'
                for FILE in *;
                do
                echo '"'$FILE'": "'; base64 ${FILE}; echo '",'
                done;
                ) >> ../temp_signer.json
                sed -i '$ s/.$//' ../temp_signer.json
                echo '}}' >> ../temp_signer.json
                cat ../temp_signer.json | tr -d '\n' >> ../signer.json
                echo "before curl"
                curl \
                 --header "X-Vault-Token: ${VAULT_TOKEN}" \
                 --request POST \
                 --data @../signer.json \
                ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.signerName }}/certs
                echo "after curl"
                # get signer certs from vault
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.signerName }}/certs | jq -r 'if .errors then . else . end')
                CORDA_SSL_SIGNER_KEYS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "corda-ssl-signer-keys.jks" ]' 2>&1)
                IDM_KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "identity-manager-key-store.jks" ]' 2>&1)
                NMAP_KEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "network-map-key-store.jks" ]' 2>&1)
               
                if [ "$CORDA_SSL_SIGNER_KEYS" == "null" ] || [ "$IDM_KEYSTORE" == "null" ] || [ "$NMAP_KEYSTORE" == "null" ] || [[ "$CORDA_SSL_SIGNER_KEYS" == "parse error"* ]] || [[ "$IDM_KEYSTORE" == "parse error"* ]] || [[ "$NMAP_KEYSTORE" == "parse error"* ]]
                then
                  echo "certificates write or read fail"
                  sleep {{ $.Values.vault.sleepTimeAfterError  }}
                  if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
                  then
                    echo "Retry attempted $COUNTER times, certificates have not been saved"
                    exit 1
                  fi
                fi
                break
                COUNTER=`expr "$COUNTER" + 1`
              fi
            done
            # putting idman certificate for cenm idman
            cd ${BASE_DIR}/DATA
            COUNTER=1
            while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
            do
              if [ -e done.txt ]
              then
                cd ${BASE_DIR}/DATA/idman/crls
                echo "found idman certificates, performing vault put for idman path"
                (echo '{"data": {'
                for FILE in *;
                do
                echo '"'$FILE'": "'; base64 ${FILE}; echo '",'
                done;
                ) >> ../temp_crl.json
                sed -i '$ s/.$//' ../temp_crl.json
                echo '}}' >> ../temp_crl.json
                cat ../temp_crl.json | tr -d '\n' >> ../crl.json
                echo "before curl"
                curl \
                 --header "X-Vault-Token: ${VAULT_TOKEN}" \
                 --request POST \
                 --data @../crl.json \
                ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.idmanName }}/crls
                echo "After curl"
                # putting certs for idman at certs path
                (echo '{"data": {"corda-ssl-identity-manager-keys.jks": "'; base64 ${BASE_DIR}/DATA/idman/certs/corda-ssl-identity-manager-keys.jks; echo '"}}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.idmanName }}/certs
                # putting certs for networkmap at certs path
                (echo '{"data": {"corda-ssl-network-map-keys.jks": "'; base64 ${BASE_DIR}/DATA/networkmap/corda-ssl-network-map-keys.jks; echo '"}}') | curl -H "X-Vault-Token: ${VAULT_TOKEN}" -d @- ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.networkmapName }}/certs
                 # get idman crls from vault
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.idmanName }}/crls | jq -r 'if .errors then . else . end')
                ROOT_CRL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "root.crl" ]' 2>&1)
                SSL_CRL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "ssl.crl" ]' 2>&1)
                SUBORDINATE_CRL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "subordinate.crl" ]' 2>&1)
                TLS_CRL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "tls.crl" ]' 2>&1)
                  
                # get idman certs from vault
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.idmanName }}/certs | jq -r 'if .errors then . else . end')
                CORDA_SSL_IDM_KEYS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "corda-ssl-identity-manager-keys.jks" ]' 2>&1)
                # get nmap certs from vault
                LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.cenmServices.networkmapName }}/certs | jq -r 'if .errors then . else . end')
                CORDA_SSL_NMAP_KEYS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[ "corda-ssl-network-map-keys.jks" ]' 2>&1)
                
                if [ "$ROOT_CRL" == "null" ] || [ "$SSL_CRL" == "null" ] || [ "$SUBORDINATE_CRL" == "null" ] || [ "$TLS_CRL" == "null" ] || [ "$CORDA_SSL_IDM_KEYS" == "null" ] || [ "$CORDA_SSL_NMAP_KEYS" == "null" ] || [[ "$ROOT_CRL" == "parse error"* ]] || [[ "$SSL_CRL" == "parse error"* ]] || [[ "$SUBORDINATE_CRL" == "parse error"* ]] || [[ "$TLS_CRL" == "parse error"* ]] || [[ "$CORDA_SSL_IDM_KEYS" == "parse error"* ]] || [[ "$CORDA_SSL_NMAP_KEYS" == "parse error"* ]]
                then
                  echo "certificates write or read fail"
                  sleep {{ $.Values.vault.sleepTimeAfterError  }}
                  if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
                  then
                    echo "Retry attempted $COUNTER times, certificates have not been saved"
                    exit 1
                  fi
                fi
                break
                COUNTER=`expr "$COUNTER" + 1`
              fi
            done
            if [ "$COUNTER" -gt {{ $.Values.vault.retries }} ]
            then
                echo "Retry attempted $COUNTER times, no files found. Giving up!"
                exit 1
                break
            fi
            echo "completed"
          volumeMounts:
          - name: certcheck
            mountPath: /certcheck
          - name: pkitool-certs-keys
            mountPath: {{ .Values.volume.baseDir }}/DATA
            readOnly: false
        imagePullSecrets:
          - name: {{ .Values.image.imagePullSecret }}
        volumes:
          - name: certcheck
            emptyDir:
              medium: Memory
          - name: credentials
            emptyDir:
              medium: Memory
          - name: pkitool-signer-etc
            emptyDir:
              medium: Memory
          - name: signer-logs
            emptyDir:
              medium: Memory
          - name: pkitool-certs-keys
            emptyDir:
              medium: Memory
          - name: pkitool-etc
            emptyDir:
              medium: Memory
