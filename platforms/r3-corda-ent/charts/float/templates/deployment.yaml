##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Values.metadata.namespace}}
  {{- if .Values.deployment.annotations }}
  annotations:
{{ toYaml .Values.deployment.annotations | indent 8 }}
    {{- end }}
  labels:
    app.kubernetes.io/name: {{ .Values.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.nodeName }}
      app.kubernetes.io/name: {{ .Values.nodeName }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.nodeName }}
        app.kubernetes.io/name: {{ .Values.nodeName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: init-certificates
        image: {{ .Values.image.initContainerName }}
        imagePullPolicy: Always
        env:
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authpath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.vault.role }}
          - name: BASE_DIR
            value: {{ $.Values.volume.baseDir }}
          - name: CERTS_SECRET_PREFIX
            value: {{ .Values.vault.certsecretprefix }}
        command: ["sh", "-c"]
        args:
        - |-
              #!/usr/bin/env sh
              validateVaultResponse () {
                if echo ${2} | grep "errors"; then
                  echo "ERROR: unable to retrieve ${1}: ${2}"
                  exit 1
                fi
                if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                then
                  http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                  --header "X-Vault-Token: ${VAULT_TOKEN}" \
                  ${VAULT_ADDR}/v1/${1})
                  curl_response=$?
                  if test "$http_code" != "200" ; then
                      echo "Http response code from Vault - $http_code and curl_response - $curl_response"
                      if test "$curl_response" != "0"; then
                        echo "Error: curl command failed with error code - $curl_response"
                        exit 1
                      fi
                  fi
                fi
              }

              # setting up env to get secrets from vault
              echo "Getting secrets from Vault Server"
              KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
              validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
              echo "logged into vault"

              OUTPUT_PATH=${BASE_DIR}/certificates

              # get sslkeystore.jks from vault
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/certs/sslkeystore | jq -r 'if .errors then . else . end')
              validateVaultResponse "{CERTS_SECRET_PREFIX}/certs/sslkeystore" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              TLS_SSLKEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["sslkeystore.jks"]')
              echo "${TLS_SSLKEYSTORE}" | base64 -d > ${OUTPUT_PATH}/sslkeystore.jks

              # get truststore.jks from vault
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/certs/truststore | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/certs/truststore" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              TLS_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["truststore.jks"]')
              echo "${TLS_TRUSTSTORE}" | base64 -d > ${OUTPUT_PATH}/truststore.jks              
              echo "Done"
              
              # Fetching float Certificate from vault
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/certs/firewall | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/certs/firewall" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              float=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["float.jks"]')
              echo "${float}" | base64 -d > ${OUTPUT_PATH}/float.jks
              echo "Successfully got Bridge Certifcate"

              trust=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["trust.jks"]')
              echo "${trust}" | base64 -d > ${OUTPUT_PATH}/trust.jks
              echo "Successfully got trust Certifcate"
              
              # Fetching node keystore, node truststore and network-root-truststore credentials from vault
              mkdir -p ${OUTPUT_PATH}/credentials
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              TRUSTSTORE_PASSWORD=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["truststore"]')
              echo "${TRUSTSTORE_PASSWORD}" > ${OUTPUT_PATH}/credentials/truststorepass
              KEYSTORE_PASSWORD=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["keystore"]')
              echo "${KEYSTORE_PASSWORD}" > ${OUTPUT_PATH}/credentials/keystorepass  
              FIREWALL_PASSWORD=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["firewallca"]')
              echo "${FIREWALL_PASSWORD}" > ${OUTPUT_PATH}/credentials/firewallpass
              FLOAT_PASSWORD=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["float"]')
              echo "${FLOAT_PASSWORD}" > ${OUTPUT_PATH}/credentials/floatpass
              echo "Done"
              
              # TODO: Get network-parameters from corresponding Node
              echo "Done with init-certificates..."             
        volumeMounts:
        - name: certificates
          mountPath: {{ $.Values.volume.baseDir }}/certificates
      imagePullSecrets:
      - name: {{ .Values.image.imagePullSecret }}
      containers:
      - name: main
        image: "{{ .Values.image.mainContainerName }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: BASE_DIR
            value: {{ $.Values.volume.baseDir }}
        command: ["sh", "-c"]
        args:
        - |-
          echo 'firewallMode: FloatOuter
          networkParametersPath: "network-parameters"
          
          inboundConfig: {
            listeningAddress: "{{ .Values.dmz.external }}:{{ .Values.node.p2pPort }}"
          }
          
          floatOuterConfig: {
              floatAddress: "{{ .Values.dmz.internal }}:{{ .Values.bridge.tunnelPort }}"
              expectedCertificateSubject: "{{ .Values.bridge.subject }}"
              tunnelSSLConfiguration: {
                     keyStorePassword: "FLOAT_PASSWORD"
                     trustStorePassword: "FIREWALL_PASSWORD"
                     sslKeystore: "certificates/float.jks"
                     trustStoreFile: "certificates/trust.jks"
              }
          }
          
          revocationConfig: { mode: "EXTERNAL_SOURCE"}
          
          certificatesDirectory: "certificates"
          sslKeystore: "certificates/sslkeystore.jks"
          trustStoreFile: "certificates/truststore.jks"
          keyStorePassword: "KEYSTORE_PASSWORD"
          trustStorePassword: "TRUSTSTORE_PASSWORD"
          silencedIPs: []
          
          enableAMQPPacketTrace: true
          artemisReconnectionIntervalMin: 5000
          artemisReconnectionIntervalMax: 60000
          politeShutdownPeriod: 1000
          p2pConfirmationWindowSize: 1048576
          auditServiceConfiguration: {
            loggingIntervalSec: 60
          }' >> ${BASE_DIR}/firewall.conf

          export TRUSTSTORE_PASSWORD=$(cat ${BASE_DIR}/certificates/credentials/truststorepass)
          sed -i -e "s*TRUSTSTORE_PASSWORD*${TRUSTSTORE_PASSWORD}*g" ${BASE_DIR}/firewall.conf
          export KEYSTORE_PASSWORD=$(cat ${BASE_DIR}/certificates/credentials/keystorepass)
          sed -i -e "s*KEYSTORE_PASSWORD*${KEYSTORE_PASSWORD}*g" ${BASE_DIR}/firewall.conf
          export FIREWALL_PASSWORD=$(cat ${BASE_DIR}/certificates/credentials/firewallpass)
          sed -i -e "s*FIREWALL_PASSWORD*${FIREWALL_PASSWORD}*g" ${BASE_DIR}/firewall.conf
          export FLOAT_PASSWORD=$(cat ${BASE_DIR}/certificates/credentials/floatpass)
          sed -i -e "s*FLOAT_PASSWORD*${FLOAT_PASSWORD}*g" ${BASE_DIR}/firewall.conf
          
          ifNetworkParametersExists () {                                                                                                                            
              if [ -f ${BASE_DIR}/network-parameters ]
              then                                                                                                                                                     
                  return 1                                                                                                                                             
              else                                                                                                                                                     
                  return 0                                                                                                                                             
              fi                                                                                                                                                       
          }  
          let EXIT_CODE=0                                                                                                                                      
          while [ ${EXIT_CODE} -eq 0 ]                                                                                                                         
          do
                  sleep 2                                                                                                             
                  echo "Checking for network parameters"
                  ifNetworkParametersExists
                  let EXIT_CODE=$?
          done

          echo "Starting the firewall"                                                                                                                                         
          java -jar corda-firewall.jar --base-directory ${BASE_DIR} --verbose --logging-level=INFO 
        resources:
          requests:
            memory: {{ .Values.cordaJarMx }}M
          limits:
            memory: {{ add .Values.cordaJarMx 2}}M
        volumeMounts:
        - name: float-volume
          mountPath: {{ .Values.volume.baseDir }}
        - name: certificates
          mountPath: {{ .Values.volume.baseDir }}/certificates
      volumes:
        - name: certificates
          emptyDir:
            medium: Memory
        - name: float-volume
          persistentVolumeClaim:
            claimName: {{ .Values.nodeName }}-volume
