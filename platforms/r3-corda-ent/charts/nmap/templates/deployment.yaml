##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Values.metadata.namespace }}
  {{- if .Values.config.deployment.annotations }}
  annotations:
{{ toYaml .Values.config.deployment.annotations | indent 8 }}
    {{- end }}
  labels:
    app.kubernetes.io/name: {{ .Values.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  serviceName: {{ .Values.nodeName }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.nodeName }}
      app.kubernetes.io/name: {{ .Values.nodeName }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.nodeName }}
        app.kubernetes.io/name: {{ .Values.nodeName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ $.Values.vault.serviceAccountName }}
      securityContext:
        fsGroup: 1000
      initContainers:
      - name: init-certificates
        image: {{ .Values.image.initContainer }}
        imagePullPolicy: Always
        env:
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authPath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.vault.role }}
          - name: BASE_DIR
            value: {{ $.Values.config.volume.baseDir }}
          - name: CERTS_SECRET_PREFIX
            value: {{ .Values.vault.certSecretPrefix }}
          - name: MOUNT_PATH
            value: "/DATA"
          - name: NODEINFO_MOUNT_PATH
            value: "/notary-nodeinfo"
        command: ["sh", "-c"]
        args:
        - |-
              #!/usr/bin/env sh
              validateVaultResponse () {
                if echo ${2} | grep "errors"; then
                  echo "ERROR: unable to retrieve ${1}: ${2}"
                  exit 1
                fi
                if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                then
                  http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                  --header "X-Vault-Token: ${VAULT_TOKEN}" \
                  ${VAULT_ADDR}/v1/${1})
                  curl_response=$?
                  if test "$http_code" != "200" ; then
                      echo "Http response code from Vault - $http_code and curl_response - $curl_response"
                      if test "$curl_response" != "0"; then
                        echo "Error: curl command failed with error code - $curl_response"
                        exit 1
                      fi
                  fi
                fi
              }

              # Setting up the environment to get secrets from Vault
              echo "Getting secrets from Vault Server"
              KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')
              validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
              echo "logged into vault"

              # Creating dirs for storing certificates
              mkdir -p ${MOUNT_PATH}/key-stores;
              mkdir -p ${MOUNT_PATH}/trust-stores;
              mkdir -p ${MOUNT_PATH}/crl-files;

              # Getting node Info File from Vault
              
              notaries=$(echo {{ $.Values.serviceLocations.notary }} | tr -d '[]')
              file="${NODEINFO_MOUNT_PATH}/network-parameters-initial.conf"
              echo "notaries : [" > $file
              for notary in $notaries
              do
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/${notary}/nodeInfo | jq -r 'if .errors then . else . end')
              data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["data"]')"
              
              if [ "$data_info" == "null" ]
              then
                sleep {{ $.Values.vault.sleepTimeAfterError }}
              else
                validateVaultResponse "${CERTS_SECRET_PREFIX}/${notary}/nodeInfo" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                notary_nodeinfo=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["nodeInfoFile"]')
                notary_nodeinfo_name=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["nodeInfoName"]')
                validating=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["validating"]')
                echo "${notary_nodeinfo}" | base64 -d > ${NODEINFO_MOUNT_PATH}/${notary_nodeinfo_name}
                echo "Successfully got node info file"
                echo "  {" >> $file
                echo "    notaryNodeInfoFile: \"notary-nodeinfo/${notary_nodeinfo_name}\"" >> $file
                echo "    validating = \"${validating}\"" >> $file
                echo "  }" >> $file
              fi
              done
              echo "]" >> $file
              echo "minimumPlatformVersion = 4" >> $file
              echo "maxMessageSize = 10485760" >> $file
              echo "maxTransactionSize = 10485760" >> $file
              echo "eventHorizonDays = 1" >> $file
           
              # Fetching ssl-idman certificates from vault
              COUNTER=1
              while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
              do
                  # get keystores from vault to see if certificates are created and put in vault
                  LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs | jq -r 'if .errors then . else . end')
                  data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["data"]')"
              
                  if [ "$data_info" == "null" ]
                  then
                    sleep {{ $.Values.vault.sleepTimeAfterError }}
                  else
                    validateVaultResponse "${CERTS_SECRET_PREFIX}/{{ $.Values.nodeName }}/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                    idm_ssl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["corda-ssl-network-map-keys.jks"]')
                    echo "${idm_ssl}" | base64 -d > ${MOUNT_PATH}/key-stores/corda-ssl-network-map-keys.jks
                    echo "Successfully got ssl idman certifcates"
                    break
                  fi
                  COUNTER=`expr "$COUNTER" + 1`
              done

              if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
              then
                # printing number of trial done before giving up
                echo "$COUNTER"
                echo "ssl idman certificates might not have been put in vault.  Giving up!!!"
                exit 1
              fi
              echo "Done"

              # Fetching corda-ssl-trust-store certificates from vault
              COUNTER=1
              while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
              do
                  # get keystores from vault to see if certificates are created and put in vault
                  LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/root/certs | jq -r 'if .errors then . else . end')
                  data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["data"]')"
              
                  if [ "$data_info" == "null" ]
                  then
                    sleep {{ $.Values.vault.sleepTimeAfterError }}
                  else
                    validateVaultResponse "${CERTS_SECRET_PREFIX}/root/certs" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                    root_ssl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["corda-ssl-trust-store.jks"]')
                    echo "${root_ssl}" | base64 -d > ${MOUNT_PATH}/trust-stores/corda-ssl-trust-store.jks

                    root_trust=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["network-root-truststore.jks"]')
                    echo "${root_trust}" | base64 -d > ${MOUNT_PATH}/trust-stores/network-root-truststore.jks

                    echo "Successfully got root ssl and trust_store certifcates"
                    break
                  fi
                  COUNTER=`expr "$COUNTER" + 1`
              done

              if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
              then
                # printing number of trial done before giving up
                echo "$COUNTER"
                echo "root ssl certificates might not have been put in vault. Giving up!!!"
                exit 1
              fi
              echo "Done"

              # Fetching crl certificates from vault
              # TODO: Check if CRL certificates are required for NMS
              COUNTER=1
              while [ "$COUNTER" -lt {{ $.Values.vault.retries }} ]
              do
                  # get crls from vault to see if certificates are created and put in vault
                  LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ $.Values.serviceLocations.identityManager.name }}/crls | jq -r 'if .errors then . else . end')
                  data_info="$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["data"]')"
              
                  if [ "$data_info" == "null" ]
                  then
                    sleep {{ $.Values.vault.sleepTimeAfterError }}
                  else
                    validateVaultResponse "${CERTS_SECRET_PREFIX}/{{ $.Values.serviceLocations.identityManager.name }}/crls" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
                    tls_crl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["tls.crl"]')
                    echo "${tls_crl}" | base64 -d > ${MOUNT_PATH}/crl-files/tls.crl

                    root_crl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["root.crl"]')
                    echo "${root_crl}" | base64 -d > ${MOUNT_PATH}/crl-files/root.crl

                    subordinate_crl=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["subordinate.crl"]')
                    echo "${subordinate_crl}" | base64 -d > ${MOUNT_PATH}/crl-files/subordinate.crl

                    echo "Successfully got crl certifcates"
                    break
                  fi
                  COUNTER=`expr "$COUNTER" + 1`
              done
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/{{ .Values.serviceLocations.identityManager.name }}/tlscerts | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/{{ .Values.serviceLocations.identityManager.name }}/tlscerts" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              IDMAN_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["tlscacerts"]')
              echo "${IDMAN_CERT}" | base64 -d > ${MOUNT_PATH}/idman.crt

              #fetching networkmap ssl credentials from vault
              mkdir -p ${MOUNT_PATH}/ssl
              OUTPUT_PATH=${MOUNT_PATH}/ssl;
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/ssl | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials/ssl" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              NETWORKMAP_SSL=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["networkmap"]')
              echo "${NETWORKMAP_SSL}"> ${OUTPUT_PATH}/networkmapssl

              #fetching truststore ssl credentials from vault
              mkdir -p ${MOUNT_PATH}/truststore
              OUTPUT_PATH=${MOUNT_PATH}/truststore;
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/credentials/truststore | jq -r 'if .errors then . else . end')
              validateVaultResponse "${CERTS_SECRET_PREFIX}/credentials/truststore" "${LOOKUP_SECRET_RESPONSE}" "LOOKUPSECRETRESPONSE"
              ROOTCA_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["rootca"]')
              echo "${ROOTCA_TRUSTSTORE}"> ${OUTPUT_PATH}/rootcats
              SSL_TRUSTSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data["ssl"]')
              echo "${SSL_TRUSTSTORE}"> ${OUTPUT_PATH}/sslts

              if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
              then
                # printing number of trial done before giving up
                echo "$COUNTER"
                echo "crl certificates might not have been put in vault. Giving up!!!"
                exit 1
              fi
              echo "Done all certificates"
        volumeMounts:
        - name: certificates
          mountPath: /DATA
        - name: notary-nodeinfo
          mountPath: /notary-nodeinfo
      - name: setnparam
        image: "{{ .Values.image.nmapContainer }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: ACCEPT_LICENSE
            value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
        command: ["/bin/bash", "-c"]
        args:
        - |-
          echo 'address = "0.0.0.0:{{ .Values.service.external.port }}"
          pollingInterval = 10000
          checkRevocation = "{{ .Values.config.checkRevocation }}"
          database {
              driverClassName = "{{ .Values.database.driverClassName }}"
              url = "{{ .Values.database.url }}"
              user = "{{ .Values.database.user }}"
              password = "{{ .Values.database.password }}"
              runMigration = "{{ .Values.database.runMigration }}"
          }

          enmListener = {
              port = {{ .Values.service.internal.port }}
              ssl = {
                  keyStore = {
                      location = "{{ .Values.config.volume.baseDir }}/DATA/key-stores/corda-ssl-network-map-keys.jks"
                      password = NETWORKMAP_SSL
                      keyPassword = NETWORKMAP_SSL
                  }
                  trustStore = {
                      location = "{{ .Values.config.volume.baseDir }}/DATA/trust-stores/corda-ssl-trust-store.jks"
                      password = SSL_TRUSTSTORE
                  }
              }
          }

          identityManager = {
              host = {{ .Values.serviceLocations.identityManager.host }}
              port = {{ .Values.serviceLocations.identityManager.port }}
              ssl = {
                  keyStore = {
                      location = "{{ .Values.config.volume.baseDir }}/DATA/key-stores/corda-ssl-network-map-keys.jks"
                      password = NETWORKMAP_SSL
                      keyPassword = NETWORKMAP_SSL
                  }
                  trustStore = {
                      location = "{{ .Values.config.volume.baseDir }}/DATA/trust-stores/corda-ssl-trust-store.jks"
                      password = SSL_TRUSTSTORE
                  }
              }
          }

          revocation = {
              host = {{ .Values.serviceLocations.identityManager.host }}
              port = {{ .Values.service.revocation.port }}
              ssl = {
                  keyStore = {
                      location = "{{ .Values.config.volume.baseDir }}/DATA/key-stores/corda-ssl-network-map-keys.jks"
                      password = NETWORKMAP_SSL
                      keyPassword = NETWORKMAP_SSL
                  }
                  trustStore = {
                      location = "{{ .Values.config.volume.baseDir }}/DATA/trust-stores/corda-ssl-trust-store.jks"
                      password = SSL_TRUSTSTORE
                  }
              }
          }

          authObjectId=1
          authServiceConfig = {
              disableAuthentication=false
              host="{{ .Values.cenmServices.authName }}.{{ .Values.metadata.namespace }}"
              port={{ .Values.cenmServices.authPort }}
              trustStore = {
                  location = "{{ .Values.config.volume.baseDir }}/DATA/trust-stores/corda-ssl-trust-store.jks"
                  password = SSL_TRUSTSTORE
              }
              issuer="http://test"
              leeway=5s
          }

          adminListener = {
              port = {{ .Values.service.adminListener.port }}
              ssl = {
                  keyStore = {
                      location = {{ .Values.config.volume.baseDir }}/DATA/key-stores/corda-ssl-network-map-keys.jks
                      password = NETWORKMAP_SSL
                  }
                  trustStore = {
                      location = {{ .Values.config.volume.baseDir }}/DATA/trust-stores/corda-ssl-trust-store.jks
                      password = SSL_TRUSTSTORE
                  }
              }
          }' > etc/nmap.conf

          export NETWORKMAP_SSL=$(cat {{ .Values.config.volume.baseDir }}/DATA/ssl/networkmapssl)
          sed -i -e "s*NETWORKMAP_SSL*${NETWORKMAP_SSL}*g" etc/nmap.conf
          export SSL_TRUSTSTORE=$(cat {{ .Values.config.volume.baseDir }}/DATA/truststore/sslts)
          sed -i -e "s*SSL_TRUSTSTORE*${SSL_TRUSTSTORE}*g" etc/nmap.conf
          
          if [ ! -f {{ .Values.config.configPath }}/network-parameters-initial-set-succesfully ]
          then
            echo "Setting network parameters for deployment..."
            echo "Waiting for notary-nodeinfo/network-parameters-initial.conf ..."

            if [ ! -f {{ .Values.config.configPath }}/network-parameters-initial-set-succesfully ]
            then
                until [ -f notary-nodeinfo/network-parameters-initial.conf ]
                do
                    sleep 1
                done
            fi
            ROOTCA_TRUSTSTORE=$(cat {{ .Values.config.volume.baseDir }}/DATA/truststore/rootcats)
            echo "Waiting for notary-nodeinfo/network-parameters-initial.conf ... done."
            ls -al notary-nodeinfo/network-parameters-initial.conf
            cp notary-nodeinfo/network-parameters-initial.conf {{ .Values.config.configPath }}/

            echo "Setting initial network parameters ..."
            java -jar {{ .Values.config.jarPath }}/networkmap.jar \
              -f {{ .Values.config.configPath }}/nmap.conf \
              --set-network-parameters {{ .Values.config.configPath }}/network-parameters-initial.conf \
              --network-truststore DATA/trust-stores/network-root-truststore.jks \
              --truststore-password ${ROOTCA_TRUSTSTORE} \
              --root-alias cordarootca

            EXIT_CODE=${?}

            if [ "${EXIT_CODE}" -ne "0" ]
            then
                HOW_LONG=120
                echo
                echo "Network Map: setting network parameters failed - exit code: ${EXIT_CODE} (error)"
                echo
                echo "Going to sleep for requested ${HOW_LONG} seconds to let you login and investigate."
                echo
            else
                HOW_LONG=0
                echo
                echo "Network Map: initial network parameters have been set."
                echo "No errors."
                echo
                touch {{ .Values.config.configPath }}/network-parameters-initial-set-succesfully
            fi

            sleep ${HOW_LONG}
            exit ${EXIT_CODE}
          else
            echo "Already set, no need to set network parameters"
          fi
          {{- if .Values.nmapUpdate }}
          echo "Starting networkmap update..."
          rm {{ .Values.config.configPath }}/network-parameters-initial-set-succesfully
          echo "# This is a file for updating network parameters" > {{ .Values.config.configPath }}/network-parameters-update.conf
          cat {{ .Values.config.configPath }}/network-parameters-initial.conf >> {{ .Values.config.configPath }}/network-parameters-update.conf
          export updateDeadline=$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ' -d +10minutes)
          echo $updateDeadline
          echo 'parametersUpdate {
                description = "Update network parameters settings"
                updateDeadline = "UPDATEDEADLINE"
            }' >> {{ .Values.config.configPath }}/network-parameters-update.conf
          sed -i -e "s*UPDATEDEADLINE*${updateDeadline}*g" {{ .Values.config.configPath }}/network-parameters-update.conf
          # Adding notaries
          {{- $confPath := .Values.config.configPath -}}
          {{- range .Values.addNotaries }}
          echo {{ .notary.nodeinfoFile }} | base64 -d > notary-nodeinfo/{{ .notary.nodeinfoFileName }}
          sed -i '3i  {' {{ $confPath }}/network-parameters-update.conf
          sed -i '4i    notaryNodeInfoFile: "notary-nodeinfo/{{ .notary.nodeinfoFileName }}"' {{ $confPath }}/network-parameters-update.conf
          sed -i '5i    validating = "{{ .notary.validating }}"' {{ $confPath }}/network-parameters-update.conf
          sed -i '6i  },' {{ $confPath }}/network-parameters-update.conf
          {{- end }}
          echo "CENM: Updating Networkmap service network params ..."
          ROOTCA_TRUSTSTORE=$(cat {{ .Values.config.volume.baseDir }}/DATA/truststore/rootcats)
          java -jar {{ .Values.config.jarPath }}/networkmap.jar \
            -f {{ .Values.config.configPath }}/nmap.conf \
            --set-network-parameters {{ .Values.config.configPath }}/network-parameters-update.conf \
            --network-truststore DATA/trust-stores/network-root-truststore.jks \
            --truststore-password ${ROOTCA_TRUSTSTORE} \
            --root-alias cordarootca
                          
          touch {{ .Values.config.configPath }}/network-parameters-initial-set-succesfully
          {{- end }}
        volumeMounts:
        - name: notary-nodeinfo
          mountPath: {{ .Values.config.volume.baseDir }}/notary-nodeinfo
        - name: nmap-etc
          mountPath: {{ .Values.config.volume.baseDir }}/etc
        - name: certificates
          mountPath: {{ .Values.config.volume.baseDir }}/DATA
        - name: nmap-logs
          mountPath: {{ .Values.config.volume.baseDir }}/logs
        - name: nmap-h2
          mountPath: {{ .Values.config.volume.baseDir }}/h2
        resources:
          requests:
            memory: {{ .Values.config.pod.resources.requests }}
          limits:
            memory: {{ .Values.config.pod.resources.limits }}
      - name: init-token
        env:
          - name: ACCEPT_LICENSE
            value: "{{ .Values.acceptLicense }}"
        image: "{{ .Values.image.enterpriseCliContainer }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/bash", "-c"]
        args:
        - |-
          pwd
          cp CM/*.sh bin/
          chmod +x bin/*
          ls -alR
          bin/getZoneToken.sh
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        - name: nmap-etc
          mountPath: {{ .Values.config.volume.baseDir }}/etc
        - name: nmap-conf
          mountPath: {{ .Values.config.volume.baseDir }}/CM/getZoneToken.sh
          subPath: getZoneToken.sh
        - name: certificates
          mountPath: {{ .Values.config.volume.baseDir }}/DATA
        - name: notary-nodeinfo
          mountPath: {{ .Values.config.volume.baseDir }}/notary-nodeinfo
      containers:
      - name: main
        image: "{{ .Values.image.nmapContainer }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: ACCEPT_LICENSE
            value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
        command: ["/bin/bash", "-c"]
        args:
        - |-
          until [ -f {{ .Values.config.configPath }}/network-parameters-initial-set-succesfully ]
          do
            sleep 5
            echo "Waiting for network parameters to be set..."
          done
          echo "Network parameters have been set!"
          yes | keytool -importcert -file {{ .Values.config.volume.baseDir }}/DATA/idman.crt -storepass changeit -alias {{ .Values.serviceLocations.identityManager.domain }} -keystore /usr/lib/jvm/zulu-8-amd64/jre/lib/security/cacerts
          
          # Variable for keys/trust store passwords
          ROOTCA_TRUSTSTORE=$(cat {{ .Values.config.volume.baseDir }}/DATA/truststore/rootcats)
          NETWORKMAP_SSL=$(cat {{ .Values.config.volume.baseDir }}/DATA/ssl/networkmapssl)
          SSL_TRUSTSTORE=$(cat {{ .Values.config.volume.baseDir }}/DATA/truststore/sslts)
         
          if [ -f {{ .Values.config.jarPath }}/networkmap.jar ]
          then
              echo
              echo "CENM: starting Networkmap service ..."
              echo
              TOKEN=$(cat {{ .Values.config.configPath }}/token)
              ls -alR
              set -x
              java -jar {{ .Values.config.jarPath }}/angel.jar \
              --jar-name={{ .Values.config.jarPath }}/networkmap.jar \
              --zone-host={{ .Values.cenmServices.zoneName }}.{{ .Values.metadata.namespace }} \
              --zone-port={{ .Values.cenmServices.zoneEnmPort }} \
              --token=${TOKEN} \
              --service=NETWORK_MAP \
              --polling-interval=10 \
              --working-dir=etc/ \
              --network-truststore={{ .Values.config.volume.baseDir }}/DATA/trust-stores/network-root-truststore.jks \
              --truststore-password=${ROOTCA_TRUSTSTORE} \
              --root-alias=cordarootca \
              --network-parameters-file={{ .Values.config.configPath }}/nmap.conf \
              --tls=true \
              --tls-keystore={{ .Values.config.volume.baseDir }}/DATA/key-stores/corda-ssl-network-map-keys.jks \
              --tls-keystore-password=${NETWORKMAP_SSL} \
              --tls-truststore={{ .Values.config.volume.baseDir }}/DATA/trust-stores/corda-ssl-trust-store.jks \
              --tls-truststore-password=${SSL_TRUSTSTORE} \
              --verbose
              EXIT_CODE=${?}
          else
              echo "Missing networkmap jar file in {{ .Values.config.jarPath }} folder:"
              ls -al {{ .Values.config.jarPath }}
              EXIT_CODE=110
          fi
        volumeMounts:
        - name: notary-nodeinfo
          mountPath: {{ .Values.config.volume.baseDir }}/notary-nodeinfo
        - name: nmap-h2
          mountPath: {{ .Values.config.volume.baseDir }}/h2
        - name: nmap-etc
          mountPath: {{ .Values.config.volume.baseDir }}/etc
        - name: nmap-logs
          mountPath: {{ .Values.config.volume.baseDir }}/logs
        - name: certificates
          mountPath: {{ .Values.config.volume.baseDir }}/DATA
        resources:
          requests:
            memory: {{ .Values.config.pod.resources.requests }}
          limits:
            memory: {{ .Values.config.pod.resources.limits }}
      - name: logs
        image: "{{ .Values.image.nmapContainer }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: ACCEPT_LICENSE
            value: "{{required "You must accept the license agreement to run this software" .Values.acceptLicense }}"
        command: ["/bin/bash", "-c"]
        args:
        - |-
          cd {{ .Values.config.volume.baseDir }}/
          while true; do tail -f logs/network-map/*.log 2>/dev/null; sleep 5; done
          # in case sth went wrong just wait indefinitely ...
          tail -f /dev/null
        volumeMounts:
        - name: nmap-logs
          mountPath: {{ .Values.config.volume.baseDir }}/logs
    {{- with .Values.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: nmap-conf
          configMap:
            name: {{ .Values.prefix }}-nmap-conf
        - name: certificates
          emptyDir:
            medium: Memory
        - name: nmap-etc
          persistentVolumeClaim:
            claimName: {{ .Values.nodeName }}-etc
        - name: nmap-logs
          persistentVolumeClaim:
            claimName: {{ .Values.nodeName }}-pvc-logs
        - name: notary-nodeinfo
          emptyDir:
            medium: Memory
        - name: nmap-h2
          persistentVolumeClaim:
            claimName: {{ .Values.nodeName }}-pvc-h2
