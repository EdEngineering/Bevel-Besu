{
    "title": "Network Document",
    "description": "Document",
    "type": "object",
    "properties": {
        "network": {
          "description": "Network description",
          "type": "object",
          "properties": {
              "type": { "type": "string", "enum": ["fabric","corda", "corda-enterprise", "indy", "quorum", "besu","substrate"],"description": "Network type"},
              "env": { "$ref":"#/definitions/shared_environment"},
              "docker": { "$ref":"#/definitions/shared_docker"}
          },
          "allOf":[
            {"if": {"properties": { "type": { "const": "fabric" } } },
             "then": {
              "properties":{
                "version":{ "type": "string","enum":["1.4.8","2.2.0","2.2.2"]},
                "env": { "$ref":"#/definitions/shared_environment"},
                "frontend": { "type": "string", "enum": ["enabled","disabled"]},
                "consensus":{ "$ref":"#/definitions/fabric_service_consensus"},
                "orderers": { "type":"array","items":{ "$ref":"#/definitions/fabric_orderer"}},
                "channels": { "type":"array","items":{ "$ref":"#/definitions/fabric_channel"}},
                "organizations": { "type":"array","minItems": 1,"items":{"$ref":"#/definitions/fabric_organization"}}
               }
             }
            },
            {"if": {"properties": { "type": { "const": "besu" } } },
             "then": {
              "properties":{
                "version":{ "type": "string","enum":["1.5.5","21.1.0","21.1.1","21.10.6","22.10.2"]},
                "env": { "$ref":"#/definitions/shared_env_ambassador"},
                "config": {"$ref":"#/definitions/besu_config"},
                "organizations": { "type":"array","minItems": 1,"items":{"$ref":"#/definitions/besu_organization"}},
                "crypto_only": { "type":"boolean","description":"generate crypto only" },
                "permissioning": {
                  "type":"object",
                  "properties":{
                    "enabled" : {"type":"boolean", "description":"enable permissioning" }
                  }
                }
               }
             }
            },
            {"if": {"properties": { "type": { "const": "corda" } } },
             "then": {
              "properties":{
                "version":{ "type": "number","enum":[4.4,4.7,4.9]},
                "env": { "$ref":"#/definitions/shared_env_ambassador"},
                "frontend": { "type": "string", "enum": ["enabled","disabled"]},
                "network_services": { "type":"array","items":{ "$ref":"#/definitions/corda_network_service"}},
                "organizations": { "type":"array","minItems": 1,"items":{"$ref":"#/definitions/corda_organization"}}
               }
             }
            }  ,
            {"if": {"properties": { "type": { "const": "corda-enterprise" } } },
             "then": {
              "properties":{
                "version":{ "type": "number","enum":[4.4,4.7]},
                "env": { "$ref":"#/definitions/shared_env_ambassador"},
                "frontend": { "type": "string", "enum": ["enabled","disabled"]},
                "network_services": { "type":"array","items":{ "$ref":"#/definitions/corda_enterprise_network_service"}},
                "organizations": { "type":"array","minItems": 1,"items":{"$ref":"#/definitions/corda_enterprise_organization"}}
               }
             }
            },
            {"if": {"properties": { "type": { "const": "indy" } } },
             "then": {
              "properties":{
                "version":{ "type": "string","enum":["1.11.0","1.12.1"]},
                "env": { "$ref":"#/definitions/shared_env_ambassador"},
                "genesis": {"$ref":"#/definitions/indy_genesis"},
                "organizations": { "type":"array","minItems": 1,"items":{"$ref":"#/definitions/indy_organization"}}
               }
             }
            },
            {"if": {"properties": { "type": { "const": "quorum" } } },
             "then": {
              "properties":{
                "version":{ "type": "string","enum":["21.4.2","2.5.0"]},
                "env": { "$ref":"#/definitions/shared_env_ambassador"},
                "config": {"$ref":"#/definitions/quorum_config"},
                "organizations": { "type":"array","minItems": 1,"items":{"$ref":"#/definitions/quorum_organization"}}
               }
             }
            },
            {"if": {"properties": { "type": { "const": "substrate" } } },
             "then": {
              "properties":{
                "version":{ "type": "string","enum":["latest","v4.2.2","v4.3.1"]},
                "env": { "$ref":"#/definitions/shared_env_ambassador"},
                "config": {"$ref":"#/definitions/substrate_config"},
                "organizations": { "type":"array","minItems": 1,"items":{"$ref":"#/definitions/substrate_organization"}}
               }
             }
            }
          ],
          "required": [ "type","version","env","docker","organizations" ]
        }
    },
    "required": [ "network" ] ,

    "definitions": {
        "shared_environment":{
            "type": "object",
            "properties": {
              "type": { "type": "string","pattern": "^[a-z0-9-]{1,15}$", "description": "Environment type. Can be like dev/test/prod."},
              "proxy": { "type": "string", "enum": ["haproxy", "ambassador","none"], "description": "Choice of the Cluster Ingress controller. 'none' only minikube does not use a proxy"},
              "retry_count": {"type": "integer", "minimum":5,"maximum":100,"description": "Retry count for the checks. Use a large number if your kubernetes cluster is slow."},
              "external_dns": { "type": "string", "enum": ["enabled", "disabled"], "description": "If the cluster has the external DNS service, this has to be set enabled so that the hosted zone is automatically updated."},
              "namespace": { "type": "string", "description": "Proxy namespace"}
              },
            "required": [ "type","proxy","external_dns","retry_count" ]
        },
        "shared_env_ambassador":{
          "type": "object",
          "properties": {
            "type": { "type": "string","pattern": "^[a-z0-9-]{1,15}$","description": "Environment type. Can be like dev/test/prod."},
            "proxy": { "type": "string", "enum": ["ambassador","none"],"description": "Choice of the Cluster Ingress controller"},
            "ambassadorPorts":{"$ref":"#/definitions/shared_env_ambassadorPorts", "description": "Any additional Ambassador ports can be given here."},
            "loadBalancerSourceRanges":{"type": ["string", "null"],"nullable": true,"pattern":"^([0-9]{1,3}\\.){3}[0-9]{1,3}\\/(0|8|16|24)$","description": "restrict inbound access to a single or list of IP adresses for the public Ambassador ports to enhance Hyperledger Bevel network security"},
            "retry_count": {"type": "integer", "minimum":5,"maximum":100,"description": "Retry count for the checks. Use a large number if your kubernetes cluster is slow."},
            "external_dns": { "type": "string", "enum": ["enabled", "disabled"], "description": "If the cluster has the external DNS service, this has to be set enabled so that the hosted zone is automatically updated."},
            "namespace": { "type": "string", "description": "Proxy namespace" },
            "labels": {"$ref":"#/definitions/shared_env_labels", "description": "Labels for kubernetes components."}
            },
          "required": [ "type","proxy","external_dns","retry_count" ],
          "additionalProperties": false
        },
        "shared_env_ambassadorPorts":{
          "type": "object",
          "properties": {
            "ports": { "type":"string","pattern":"^\\d{1,5}(?:,\\d{1,5})*$"},
            "portRange": { "type": "object",
              "properties":{
                "from":{ "type": "integer"},
                "to":{ "type": "integer"}},
              "additionalProperties": false
              }
          },
          "additionalProperties": false
        },
        "shared_docker":{
            "type": "object",
            "properties": {
              "url": { "type": "string","pattern": "^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?(?:\\/[a-z0-9-]{1,61})*$", "description": "Docker registry url. Must be private registry for Corda Enterprise"},
              "username": { "type": "string","pattern":"^[a-zA-Z0-9._-]+$","description": "Username credential required for login."},
              "password": {"type": "string","description": "Password credential required for login."}
             },
            "required": [ "url"]
        },
        "shared_k8s":{
          "type": "object",
          "properties": {
            "provider": { "type": "string","enum": ["aws", "azure","gcp","minikube"]},
            "region": { "type": "string"},
            "context":{ "type": "string","description": "Context/Name of the cluster where the organization entities should be deployed"},
            "config_file":{ "type": "string","description": "Path to the kubernetes cluster configuration file"}
           },
          "required": [ "context","config_file"],
          "additionalProperties": false
        },
        "shared_aws":{
          "type": "object",
          "properties": {
            "access_key": { "type": "string","pattern": "^[A-Za-z0-9_]", "description": "AWS Access key"},
            "secret_key": { "type": "string","pattern": "^[A-Za-z0-9/+=_]", "description": "AWS Secret key"},
            "encryption_key":{"type":"string","description":" it's used as the KMS key id for K8S storage class encryption"},
            "region": { "type": "string"},
            "zone":{ "type": "string"}
           },
          "required": [ "access_key","secret_key"],
          "additionalProperties": false
        },
        "shared_vault":{
          "type": "object",
          "properties": {
            "url": { "type": "string"},
            "root_token": { "type": "string","pattern": "^[a-zA-Z0-9_.]"},
            "secret_path": { "type": "string"}
           },
          "required": [ "url","root_token"],
          "additionalProperties": false
        },
        "shared_gitops":{
          "type": "object",
          "properties": {
            "git_protocol": { "type": "string","enum": ["https", "ssh"], "description": "Option for git over https or ssh."},
            "git_url": { "type": "string","description": "SSH or HTTPs url of the repository where flux should be synced."},
            "branch": { "type": "string","description": "Branch of the repository where the Helm Charts and value files are stored"},
            "release_dir": { "type": "string","pattern":"(^[A-Za-z0-9]+)(/[A-Za-z0-9-]+)*([A-Za-z0-9])$","description": "Relative path where flux should sync files."},
            "chart_source":{ "type": "string","pattern":"(^[A-Za-z0-9]+)(/[A-Za-z0-9-]+)*([A-Za-z0-9])$","description": "Relative path where the helm charts are stored"},
            "git_repo": { "type": "string"},
            "username": { "type": "string","description": "Username which has access rights to read/write on repository"},
            "password": { "type": "string", "description": "Password of the user which has access rights to read/write on repository (Optional for ssh; Required for https)"},
            "private_key": { "type": "string","description": "Path to the private key file which has write-access to the git repo (Optional for https; Required for ssh)"},
            "email": { "type": "string","pattern":"^\\S+@\\S+\\.\\S+$","description": "Email of the user to be used in git config"}
           },
          "required": [ "git_protocol","git_url","branch","release_dir","chart_source","git_repo","username","password","private_key","email"],
          "additionalProperties": false
        },
        "shared_organization":{
          "type": "object",
          "properties": {
            "organization":{  "description": "deprecated."},
            "k8s":{ "$ref":"#/definitions/shared_k8s"},
            "vault":{ "$ref":"#/definitions/shared_vault"},
            "gitops":{ "$ref":"#/definitions/shared_gitops"},
            "cloud_provider":{ "type": "string","enum": ["aws","aws-baremetal", "azure","gcp","minikube"]},
            "gcp":{},
            "azure":{},
            "minikube":{},
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$"}
            },
          "allOf":[{
            "if": {"properties": { "cloud_provider": { "enum": ["aws","aws-baremetal"] } } },"then":{
              "properties": {
                "aws":{ "$ref":"#/definitions/shared_aws"}
              },
              "required": [ "aws"]
            }}
          ],
          "required": [ "name","cloud_provider","k8s","vault","gitops"]
        },
        "shared_metrics":{
          "type": "object",
           "properties":{
            "enabled": {"type": "boolean", "description":"Enable metrics via service monitor"}, 
            "port": { "type": "number","description": "Optional field. Default value is 9443 ) "}
           }
        },
        "shared_env_labels":{
            "type": "object",
            "properties": {
                "service": { "type": "object", "description": "Labels for service" },
                "pvc": { "type": "object", "description": "Labels for volumes" },
                "deployment": { "type":"object", "description": "Labels for deployments" }
            },
            "additionalProperties": false
        },
        "corda_network_service":{
          "type": "object",
          "properties": {
            "service":{  "description": "deprecated."},
            "type": { "type": "string", "enum": ["doorman", "networkmap"]},
            "uri": { "type": "string","pattern": "^(http|https):\/\/(((?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9])|((?:[0-9]{1,3}\\.){3}[0-9]{1,3}))(?::[0-9]{2,5})?$"},
            "certificate": { "type": "string", "pattern":"^\/?([^\/ ]*\/)+[^\/ ]+\\.(crt|pem)$", "description": "Absolute path to the public certificates"}
           },
          "required": [ "type","uri","certificate"],
          "additionalProperties": false
        },
        "corda_enterprise_network_service":{
          "type": "object",
          "properties": {
            "service":{  "description": "deprecated"},
            "type": { "type": "string", "enum": ["idman", "networkmap"]},
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description": "Name of the service"},
            "uri": { "type": "string","pattern": "^(http|https):\/\/(((?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9])|((?:[0-9]{1,3}\\.){3}[0-9]{1,3}))(?::[0-9]{2,5})?$"},
            "certificate": { "type": "string","pattern":"^\/?([^\/ ]*\/)+[^\/ ]+\\.(crt|pem)$","description": "Absolute path to the public certificates"},
            "crlissuer_subject": { "type": "string", "description": "Subject of the CRL Issuer."},
            "truststore": { "type": "string","description": "Absolute path to the base64 encoded networkroot truststore."},
            "truststore_pass": { "type": "string", "description": "Truststore password"}
           },
          "required": [ "type","uri","certificate","name"],
          "additionalProperties": false
        },
        "corda_organization":{
          "type": "object",
          "allOf":[{ "$ref":"#/definitions/shared_organization"}],
          "properties": {
            "type": { "type": "string","enum": ["doorman-nms-notary","notary","node","cenm"]},
            "country": { "type": "string"},
            "state": { "type": "string"},
            "location": { "type": "string"},
            "subject":  { "type": "string","description":"Subject format can be referred at OpenSSL Subject"},
            "external_url_suffix":  { "type": "string","description":"Public url suffix of the cluster. This is the configured path for the Ambassador Service on the DNS provider."},
            "services":{ "$ref":"#/definitions/corda_node_service"},
            "cordapps":{ "$ref":"#/definitions/corda_cordapp"}
            },
          "required": [ "type","country","state","location","subject","external_url_suffix","services"]
        },
        "corda_enterprise_organization":{
          "type": "object",
          "allOf":[{ "$ref":"#/definitions/shared_organization"},
                    { "$ref":"#/definitions/corda_organization"}],
          "properties": {
            "subordinate_ca_subject": { "type": "string","description":"Subordinate CA Subject for the CENM."},
            "firewall": { }
            },
          "if": {"properties": { "type": { "const": "cenm" } } },"then":{
            "properties": {
              "version": { "type": "number","enum": [1.5]},
              "credentials":  { "$ref":"#/definitions/corda_credentials_cenm"}}
          },"else":{
            "properties": {
              "version": { "type": "number","enum": [4.7]},
              "credentials":  { "$ref":"#/definitions/corda_credentials_node"}}
          },
          "required": [ "version"]
        },
        "corda_cordapp":{
          "type": "object",
          "properties": {
            "username": { "type":"string"},
            "password": { "type":"string"},
            "jars": { "type":"array","items":{ "type": "object", "required":["jar"],"additionalProperties": false,"properties":{
                  "jar":{ "type": "object", "required":["url"],"additionalProperties": false,"properties":{
                      "url":{"type":"string"}
               }}}}
            }},
           "required": [ "username","password","jars"],
           "additionalProperties": false
        },
        "corda_credentials_cenm":{
          "type": "object",
          "properties": {
            "keystore": { "type":"object","properties":{
                "keystore": { "type": "string"},
                "idman": { "type": "string"},
                "networkmap": { "type": "string"},
                "subordinateca": { "type": "string"},
                "rootca": { "type": "string"},
                "tlscrlsigner": { "type": "string"}
              },"required": [ "keystore","idman","networkmap","subordinateca","rootca","tlscrlsigner"], "additionalProperties": false
            },
            "truststore": { "type":"object","properties":{
                "truststore": { "type": "string"},
                "rootca": { "type": "string"},
                "ssl": { "type": "string"}
              },"required": [ "truststore","rootca","ssl"], "additionalProperties": false
            },
            "ssl": { "type":"object","properties":{
                "networkmap": { "type": "string"},
                "idman": { "type": "string"},
                "signer": { "type": "string"},
                "root": { "type": "string"},
                "auth": { "type": "string"}
             },"required": [ "networkmap","idman","signer","root","auth"], "additionalProperties": false
            }
            },
          "required": [ "keystore","truststore","ssl"],
          "additionalProperties": false
        },
        "corda_credentials_node":{
          "type": "object",
          "properties": {
              "truststore": { "type": "string"},
              "keystore": { "type": "string"}
          },
          "required": [ "truststore","keystore"],
          "additionalProperties": false
        },
        "corda_node_service":{
          "type": "object",
          "properties": {
            "doorman": { "$ref":"#/definitions/corda_service_doorman_nms"},
            "nms": { "$ref":"#/definitions/corda_service_doorman_nms"},
            "notary": { "$ref":"#/definitions/corda_service_notary"},
            "peers": {  "type":"array","items":{ "$ref":"#/definitions/corda_service_peer"}}
            }
        },
        "corda_service_doorman_nms":{
          "type": "object",
          "properties": {
            "name": { "type": "string"},
            "subject": { "type": "string"},
            "db_subject": { "type": "string"},
            "type":{ "type": "string","enum": ["doorman","networkmap"]},
            "tls": { "type": "string","enum": ["on","off"]},
            "ports":{ "$ref":"#/definitions/corda_service_port_doorman"}
            }
        },
        "corda_service_notary":{
          "type": "object",
          "properties": {
            "name": { "type": "string"},
            "subject": { "type": "string"},
            "db_subject": { "type": "string"},
            "type":{ "type": "string","enum": ["notary"]},
            "tls": { "type": "string","enum": ["on","off"]},
            "p2p":{ "$ref":"#/definitions/shared_service_port_ambassador"},
            "rpc":{ "$ref":"#/definitions/corda_service_port"},
            "p2padmin":{ "$ref":"#/definitions/corda_service_port"},
            "dbtcp":{ "$ref":"#/definitions/corda_service_port"},
            "dbweb":{ "$ref":"#/definitions/corda_service_port"}
            }
        },
        "corda_service_peer":{
          "type": "object",
          "properties": {
            "name": { "type": "string"},
            "subject": { "type": "string"},
            "db_subject": { "type": "string"},
            "type":{ "type": "string","enum": ["node"]},
            "tls": { "type": "string","enum": ["on","off"]},
            "p2p":{ "$ref":"#/definitions/shared_service_port_ambassador"},
            "rpc":{ "$ref":"#/definitions/corda_service_port"},
            "p2padmin":{ "$ref":"#/definitions/corda_service_port"},
            "dbtcp":{ "$ref":"#/definitions/corda_service_port"},
            "dbweb":{ "$ref":"#/definitions/corda_service_port"},
            "springboot":{ "$ref":"#/definitions/corda_service_port"},
            "expressapi":{ "$ref":"#/definitions/corda_service_port"}
            }
        },
        "corda_service_port_doorman":{
          "type": "object",
          "properties": {
            "nodePort":{ "type": "number"},
            "servicePort": { "type": "number"},
            "targetPort": { "type": "number"}
            },
          "required": [ "servicePort","targetPort"],
          "additionalProperties": false
        },
        "corda_service_port":{
          "type": "object",
          "properties": {
            "port": { "type": "number"},
            "targetPort": { "type": "number"}
            },
          "required": [ "port","targetPort"],
          "additionalProperties": false
        },
        "shared_service_port_ambassador":{
          "type": "object",
          "properties": {
            "port": { "type": "number"},
            "targetPort": { "type": "number"},
            "ambassador": { "type": "number"}
            },
          "required": [ "port","targetPort","ambassador"],
          "additionalProperties": false
        },
        "shared_port_ambassador":{
          "type": "object",
          "properties": {
            "port": { "type": "number"},
            "ambassador": { "type": "number"}
            },
          "required": [ "port","ambassador"],
          "additionalProperties": false
        },
        "shared_ipfs_ambassador":{
          "type": "object",
          "properties": {
            "swarmPort": { "type": "number"},
            "ambassador": { "type": "number"},
            "apiPort": {"type": "number"}
            },
          "required": [ "swarmPort","ambassador"],
          "additionalProperties": false
        },
        "shared_port":{
          "type": "object",
          "properties": {
            "port": { "type": "number"}
            },
          "required": [ "port"],
          "additionalProperties": true
        },
        "fabric_orderer":{
          "type": "object",
          "properties": {
            "orderer": { },
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description":"Name of the orderer service"},
            "type": { "type": "string","enum": ["orderer"],"description":"orderer is the only valid type of orderers."},
            "org_name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description":"Name of the organization to which this orderer belongs to"},
            "uri": { "type": "string","pattern": "^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?$"},
            "certificate": { "type": "string", "pattern":"^(\/[^\/ ]*)+[^\/ ]+\\.crt$","description": "Absolute path to the public certificates"}
            },
          "required": [ "name","type","org_name","uri","certificate"],
          "additionalProperties": false
        },
        "fabric_channel":{
          "type": "object",
          "properties": {
            "channel": {},
            "chaincodes": {},
            "consortium": { "type": "string","pattern": "^[A-Za-z0-9-]{1,30}$","description":"Name of the consortium, the channel belongs to"},
            "channel_name": { "type": "string","pattern": "^[A-Za-z0-9-]{1,30}$","minLength":1,"maxLength":11,"description":"Name of the channel"},
            "channel_status":{ "type": "string","enum": ["new","existing"],"description":" (only needed to add channel to existing org. Possible values are `new` or `existing`"},
            "genesis": { "type": "object", "properties": {
                "name": { "type": "string","pattern": "^[A-Za-z0-9-]{1,30}$","description": "Name of the genesis block"}},
              "required": [ "name"], "additionalProperties": false
            },
           "orderers": { "type":"array", "items":{ "type": "string","pattern": "^[a-z0-9-]{1,30}$","description": "Organization name to which the orderer belongs"}},
           "endorsers": { "type":"array","items":{ "$ref":"#/definitions/fabric_channel_endorsers"}},
           "participants": { "type":"array","items":{ "$ref":"#/definitions/fabric_channel_participant"}},
           "acls": { "type":"string","description": "File path for acls for a channel"}
          },
          "required": [ "channel","consortium","channel_name","genesis","orderers","participants"],
          "additionalProperties": false
        },
        "fabric_channel_participant":{
          "type": "object",
          "properties": {
            "organization": { },
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","minLength":1,"maxLength":12,"description":"Organization name of the peer participating in the channel"},
            "type": { "type": "string","enum": ["creator","joiner"],"description":"This field can be creator/joiner of channel"},
            "org_status": { "type": "string","enum": ["new","existing","delete"],"description":"new (for inital setup) or existing (for add new org)"},
            "ordererAddress": { "type": "string","pattern": "^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?$","description":"URL of the orderer this peer connects to"},
            "peers": {  "type":"array","items":{"type": "object", "properties": {
              "peer": { },
              "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description": "Name of the peer"},
              "peerstatus": { "type": "string","enum": ["new","existing"],"description":"Used for add new peer orgs. should be new/existing"},
              "gossipAddress": { "type": "string","pattern": "^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?$","description":"Gossip address of the peer"},
              "peerAddress": { "type": "string","pattern": "^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?$","description":"External address of the peer"}},
            "required": [ "peer","name","gossipAddress","peerAddress"], "additionalProperties": false
            }}
          },
          "required": [ "organization","name","type","org_status","ordererAddress","peers"],
          "additionalProperties": false
        },
        "fabric_channel_endorsers":{
          "type": "object",
          "properties": {
            "organization": { },
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description":"Name of the endorsers"},
            "peers": {  "type":"array","items":{"type": "object", "properties": {
              "peer": { },
              "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description": "Name of the peer"},
              "corepeerAddress": { "type": "string","pattern": "^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?$","description": "Address of the endorsers"},
              "certificate": { "type": "string","pattern":"^(\/[^\/ ]*)+[^\/ ]+\\.crt$","description":"Certificate path for peer."}},
            "required": [ "peer","name","corepeerAddress","certificate"], "additionalProperties": false
            }}
          },
          "required": [ "organization","name","peers"],
          "additionalProperties": false
        },
        "fabric_organization":{
          "type": "object",
          "allOf":[{ "$ref":"#/definitions/shared_organization"}],
          "properties": {
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","minLength":1,"maxLength":12,"description":"Name of the organization"},
            "type": { "type": "string","enum": ["orderer","peer"]},
            "country": { "type": "string","description":"Country of the organization"},
            "state": { "type": "string","description":"State of the organization"},
            "location": { "type": "string","description":"Location of the organization"},
            "subject":  { "type": "string","description":"Subject format can be referred at OpenSSL Subject"},
            "external_url_suffix":  { "type": "string","description":"Public url suffix of the cluster. This is the configured path for the Ambassador Service on the DNS provider."},
            "org_status": { "type": "string","enum": ["new","existing","delete"]},
            "if": {"properties": { "type": { "const": "peer" } } },"then":{
              "properties": {
                "orderer_org": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description": "Name of the organization providing the ordering service"}
            }},
            "ca_data": {  "type":"object", "description":"Contains the certificate authority url and certificate path; this has not been implemented yet","properties": {
               "url": { "type": "string","pattern": "^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?$","description":"Gossip address of the peer"},
               "certificate": { "type": "string","pattern":"^\/?([^\/ ]*\/)+[^\/ ]+\\.crt$","description":"Path to certificate"}},
              "required": [ "url","certificate"], "additionalProperties": false
              }
            },
            "if": {"properties": { "type": { "const": "orderer" } } },"then":{
              "properties": {
                "services":  { "$ref":"#/definitions/fabric_orderer_services"}}
            },"else":{
              "properties": {
                "services":  { "$ref":"#/definitions/fabric_peer_services"}}
            },
          "required": [ "type","country","state","location","subject","external_url_suffix","services"]
        },
        "fabric_orderer_services":{
          "type": "object",
          "properties": {
            "ca":{ "$ref":"#/definitions/fabric_service_ca"},
            "consensus":{ "$ref":"#/definitions/fabric_service_consensus"},
            "orderers": { "type":"array","items":{ "$ref":"#/definitions/fabric_service_orderer"}}
            },
          "required": [ "ca","consensus","orderers"],
          "additionalProperties": false
        },
        "fabric_peer_services":{
          "type": "object",
          "properties": {
            "ca":{ "$ref":"#/definitions/fabric_service_ca"},
            "peers": { "type":"array","items":{ "$ref":"#/definitions/fabric_service_peer"}}
            },
          "required": [ "ca","peers"],
          "additionalProperties": false
        },
        "fabric_service_ca":{
          "type": "object",
          "properties": {
            "type": {"type":"string","const": "ca"},
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description":"Certificate Authority service name"},
            "subject":  { "type": "string","description":"Subject format can be referred at OpenSSL Subject"},
            "grpc":{ "$ref":"#/definitions/shared_port"}
            },
          "required": [ "type","name","subject","grpc"],
          "additionalProperties": false
        },
        "fabric_service_consensus":{
          "type": "object",
          "properties": {
            "name": {"type":"string","enum": ["kafka","raft"],"description":"Name of the Consensus service. Can be raft or kafka."}
            },
          "required":["name"],
          "if": {"properties": { "name": { "const": "kafka" } } },
            "then": {
             "properties":{
               "type":{ "type": "string","enum":["broker"],"description":"Only for kafka. Consensus service type, only value supported is broker currently"},
               "replicas": {"type": "integer", "minimum":1,"maximum":10,"description":"Only for kafka. Replica count of the brokers"},
               "grpc":{ "$ref":"#/definitions/shared_port"}
              },
              "required":["name","type","replicas","grpc"]
           }
        },
        "fabric_service_orderer":{
          "type": "object",
          "properties": {
            "orderer":{},
            "type": {"type":"string","const": "orderer"},
            "status": {"type":"string","enum": ["new","existing"],"description":"(Only needed to add new orderer). Possible values are 'new' or 'existing'"},
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description":"Name of the Orderer service"},
            "consensus": {"type":"string","enum": ["kafka","raft"]},
            "grpc":{ "$ref":"#/definitions/shared_port"},
            "metrics": { "$ref": "#/definitions/shared_metrics"}
            },
          "required": [ "type","name","consensus","grpc"],
          "additionalProperties": false
        },
        "fabric_service_peer":{
          "type": "object",
          "properties": {
            "peer":{},
            "type": {"type":"string","enum": ["anchor","nonanchor"],"description":"At least one peer should be anchor peer"},
            "name": { "type": "string","pattern": "^peer[0-9]{1,2}$","description":"Name of the peer. Must be of the format peer0 for the first peer, peer1 for the second peer and so on."},
            "gossippeeraddress":  { "type": "string","description":"Gossip address of another peer in the same Organization. If there is only one peer, then use that peer address. Must be internal as the peer is hosted in the same Kubernetes cluster."},
            "peerAddress":  { "type": "string","description":"External address of this peer. Must be the HAProxy qualified address. If using minikube, this can be internal address."},
            "peerstatus":{"type":"string","enum": ["new","existing"],"description":"Needed to add new peer organization to existing network."},
            "certificate": { "type": "string","pattern":"^(\/[^\/ ]*)+[^\/ ]+\\.crt$","description":"Certificate path for peer."},
            "cli":  { "type": "string","enum": ["enabled","disabled"],"description":"Optional field. If enabled will deploy the CLI pod for this Peer. Default is disabled."},
            "cactus_connector":  { "type": "string","enum": ["enabled","disabled"],"description":"Optional field. If enabled will deploy the Cactus Connector for this Peer. Default is disabled."},
            "configpath": { "type": "string","pattern":"^(\/[^\/ ]*)+[^\/ ]+$","description":"Path for custom core.yaml."},
            "grpc":{ "$ref":"#/definitions/shared_port","description":"Grpc port"},
            "events":{ "$ref":"#/definitions/shared_port","description":"Events port"},
            "couchdb":{ "$ref":"#/definitions/shared_port","description":"Couchdb port"},
            "restserver":{ "$ref":"#/definitions/corda_service_port","description":"Restserver target port"},
            "expressapi":{ "$ref":"#/definitions/corda_service_port","description":"Express server port"},
            "frontend":{ "$ref":"#/definitions/corda_service_port","description":"Frontend port"},
            "chaincodes":{"type":"array","items":{ "$ref":"#/definitions/fabric_chaincode","description":"chaincode data"}},
            "metrics" :  {"$ref":"#/definitions/shared_metrics"}
            },
          "required": [ "type","name","gossippeeraddress","grpc","events"],
          "additionalProperties": false
        },
        "fabric_chaincode":{
          "type": "object",
          "properties": {
            "name": { "type": "string","pattern": "^[a-z0-9-_]{1,30}$","description":"Name of the chaincode"},
            "version":  { "type": "string","pattern": "^[0-9]{1,5}$","description":"Version of the chaincode. Please do not use . (dot) in the version."},
            "maindirectory": { "type": "string","description":"Path of main.go file"},
            "lang": {"type":"string","enum": ["golang","java"],"description":"The language in which the chaincode is written ( golang/ java)"},
            "arguments": { "type": "string","description":"Init Arguments to the chaincode"},
            "endorsements": { "type": "string","description":"Endorsements (if any) provided along with the chaincode"},
            "repository": { "$ref":"#/definitions/fabric_chaincode_repository"},
            "external_chaincode": { "type": "boolean","description":"Options are True and False. This denotes that the chaincode is external or not"},
            "tls": { "type": "boolean","description":"Options are True and False. This enables tls check for chaincode"},
            "buildpack_path": { "type": "string","pattern":"^(\/[^\/ ]*)+[^\/ ]+$","description":"Path for the buildpack files."},
            "crypto_mount_path": { "type": "string","pattern":"^(\/[^\/ ]*)+[^\/ ]+$","description":"Path for the crypto files. Optional if tls: false"},
            "image": { "type": "string","description":"Docker repo for external chaincode image"}
            },
          "required": [ "name","version","arguments"],
          "additionalProperties": false
        },
        "fabric_chaincode_repository":{
          "type": "object",
          "properties": {
            "username": { "type": "string","description": "Username which has access to the git repo containing chaincode"},
            "password": { "type": "string", "description": "Password of the user which has access to the git repo containing chaincode"},
            "url": { "type": "string","description": "URL of the git repository containing the chaincode"},
            "branch": { "type": "string","description": "Branch in the repository where the chaincode resides"},
            "path": { "type": "string","description": "Path of the chaincode in the repository branch"}
           },
          "required": [ "username","password","branch","url","path"],
          "additionalProperties": false
        },
        "besu_config":{
          "type": "object",
          "properties": {
            "consensus": { "type": "string","enum": ["ibft","qbft","clique","ethash"],"description":"Currently supports ibft and qbft."},
            "subject":  { "type": "string","description":"This is the subject of the root CA which will be created for the Hyperledger Besu network. The root CA is for development purposes only, production networks should already have the root certificates."},
            "transaction_manager": { "type": "string","enum": ["tessera","orion","none"],"description":"Supports orion or tessera. Please update the remaining items according to the transaction_manager chosen as not all values are valid for the transaction_manager. From version 21.x.x orion features have merged into tessera"},
            "tm_version": { "type": "string","enum": ["1.6.0","21.1.0","21.1.1","21.7.3"],"description":"This is the version of transaction manager docker image that will be deployed. Supported versions: 1.6.0 for orion and 21.1.1 for tessera and orion."},
            "tm_tls": { "type": "boolean","description":"Options are True and False. This enables TLS for the transaction manager and Besu node. False is not recommended for production."},
            "tm_trust": { "type": "string","enum": ["ca-or-tofu","ca","tofu"],"description":"This is the trust relationships for the transaction managers."},
            "genesis":  { "type": "string","pattern":"^(\/[^\/ ]*)+[^\/ ]+$","description":"This is the path where genesis.json will be stored for a new network; for adding new node, the existing network's genesis.json should be available in json format in this file."},
            "tm_nodes": { "type":"array", "description":"Array of the transaction manager node addresses that are available for the network",
                "items":{"type":"string","pattern":"^https:\/\/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?$" },"minItems": 1},
            "besu_nodes": { "type":"array", "description":"Array of other Besu node addresses which will be used as bootnode",
                "items":{"type":"string","pattern":"^(http|https):\/\/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?$" },"minItems": 1},
             "chain_id": {"type":"number", "description":"chainId for besu network, default value 2018"},
             "accounts": { "type":"array", "minItems": 0, "description": "Array of accounts which start with default ETH"}
            },
          "required": [ "consensus","subject","transaction_manager","tm_version","tm_tls","tm_trust","genesis","tm_nodes"],
          "additionalProperties": false
        },
        "besu_organization":{
          "type": "object",
          "allOf":[{ "$ref":"#/definitions/shared_organization"}],
          "properties": {
            "type": { "type": "string","enum": ["member","validator"],"description":"Can be member for peer/member organization and validator for Validator organization."},
            "external_url_suffix":  { "type": "string","description":"Public url suffix of the cluster. This is the configured path for the Ambassador Service on the DNS provider."}
          },
          "if": {"properties": { "type": { "const": "member" } } },"then":{
            "properties": {
              "services":  { "$ref":"#/definitions/besu_member_services"}}
          },"else":{
            "properties": {
              "services":  { "$ref":"#/definitions/besu_validator_services"}},
          "required": [ "type","external_url_suffix","services"]
          }
        },
        "besu_validator_services":{
          "type": "object",
          "properties": {
            "validators": { "type":"array","items":{ "$ref":"#/definitions/besu_service_validator"},"minItems": 1}
            },
          "required": [ "validators"],
          "additionalProperties": false
        },
        "besu_member_services":{
          "type": "object",
          "properties": {
            "peers": { "type":"array","items":{ "$ref":"#/definitions/besu_service_peer"},"minItems": 1}
            },
          "required": [ "peers"],
          "additionalProperties": false
        },
        "besu_service_validator":{
          "type": "object",
          "properties": {
            "validator": {},
            "name": { "type": "string","pattern": "^[a-z0-9-_]{1,30}$","description":"Name of the validator"},
            "bootnode": { "type": "boolean","description":"if the validator node is used also as bootnode for the network"},
            "status":{"type":"string","enum":["existing","new"],"description":"Used to add validator. needed to know which  validator node exists"},
            "cactus_connector":  { "type": "string","enum": ["enabled","disabled"],"description":"Optional field. If enabled will deploy the Cactus Connector for this Validator. Default is disabled."},
            "p2p":  { "$ref":"#/definitions/shared_port_ambassador"},
            "rpc":  { "$ref":"#/definitions/shared_port_ambassador"},
            "ws": { "$ref":"#/definitions/shared_port"},
            "metrics": { "$ref": "#/definitions/shared_metrics"}
            },
          "required": [ "name","bootnode","p2p","rpc","ws"],
          "additionalProperties": false
        },
        "besu_service_peer":{
          "type": "object",
          "properties": {
            "peer": {},
            "name": { "type": "string","pattern": "^[a-z0-9-_]{1,30}$","description":"Name of the peer"},
            "subject": { "type": "string", "description": "This is the alternative identity of the peer node"},
            "geth_passphrase": { "type": "string", "description": "This is the passphrase used to generate the geth account."},
            "lock":{"type":"boolean","description":"Sets Besu node to lock or unlock mode. Can be true or false"},
            "cactus_connector":  { "type": "string","enum": ["enabled","disabled"],"description":"Optional field. If enabled will deploy the Cactus Connector for this member. Default is disabled."},
            "p2p":  { "$ref":"#/definitions/shared_port_ambassador"},
            "rpc":  { "$ref":"#/definitions/shared_port_ambassador"},
            "ws": { "$ref":"#/definitions/shared_port"},
            "db": { "$ref":"#/definitions/shared_port","description":"Port for MySQL database which is only applicable for tessera"},
            "tm_nodeport":  { "$ref":"#/definitions/shared_port_ambassador","description":"Port used by Transaction manager orion or tessera."},
            "tm_clientport":  { "$ref":"#/definitions/shared_port"}
            },
          "required": [ "name","subject","geth_passphrase","p2p","rpc","ws"],
          "additionalProperties": false
        },
        "indy_genesis":{
          "type": "object",
          "properties": {
            "state": { "type": "string","enum":["absent","present"],"description":"State is placeholder for future, when there will be option to join to existing cluter. Currently only 'absent' is supported. That means, that genesis will be always generated"},
            "pool": { "type": "string", "pattern":"^([^\/ ]*\/)+[^\/ ]+$","description": "Path to pool transaction genesis"},
            "domain": { "type": "string","pattern":"^([^\/ ]*\/)+[^\/ ]+$", "description": "Path to domain transaction genesis."}
            },
          "required": [ "state","pool","domain"],
          "additionalProperties": false
        },
        "indy_organization":{
          "type": "object",
          "allOf":[{ "$ref":"#/definitions/shared_organization"}],
          "properties": {
            "type": { "type": "string","enum": ["peer"]},
            "external_url_suffix":  { "type": "string","description":"Provide the external dns suffix. Only used when Indy webserver/Clients are deployed. external_dns should be enabled for this to work."},
            "services":  { "$ref":"#/definitions/indy_services"},
            "publicIps":{ "type":"array","items":{"type":"string","pattern":"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$"},"description":"List of all public IP addresses of each availability zone from all organizations in the same k8s cluster"}

            },
          "required": [ "type","services","publicIps"]
        },
        "indy_services":{
          "type": "object",
          "properties": {
            "trustees":{ "type":"array","items":{ "$ref":"#/definitions/indy_service_trustee"}},
            "stewards": { "type":"array","items":{ "$ref":"#/definitions/indy_service_steward"}},
            "endorsers": { "type":"array","items":{ "$ref":"#/definitions/indy_service_endorser"}}
            },
          "additionalProperties": false
        },
        "indy_service_trustee":{
          "type": "object",
          "properties": {
            "trustee":{  "description": "deprecated."},
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description": "Name of the service"},
            "genesis": { "type":"boolean","description": "If using domain and pool transaction genesis. true for current implementation"},
            "server": { "$ref":"#/definitions/shared_port_ambassador","description":"Applicable for Identity Sample App"}

          },
          "required": [ "name","genesis"],
          "additionalProperties": false
        },
        "indy_service_steward":{
          "type": "object",
          "properties": {
            "steward":{  "description": "deprecated."},
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description": "Name of the service"},
            "type": { "type": "string","enum": ["VALIDATOR"],"description":"type VALIDATOR/OBSERVER for steward service. Currenty only VALIDATOR type is supported. Validators are trusted parties who validate identities and transactions in a distributed fashion. They validate identities by the private key of the identity validator. An outside party can also verify claims using the public key of the validator. Observer nodes may be required as the network scales. From the perspective of Indy clients, an observer node is a read-only copy of the Sovrin ledger performing three functions (Read requests, Hot stanbys, Push subscriptions)"},
            "genesis": { "type":"boolean","description": "If using domain and pool transaction genesis."},
            "publicIp":{"description":"Public Ip of service"},
            "node": { "$ref":"#/definitions/shared_service_port_ambassador"},
            "client": { "$ref":"#/definitions/shared_service_port_ambassador"}
          },
          "required": [ "name","type","genesis","publicIp","node","client"],
          "additionalProperties": false
        },
        "indy_service_endorser":{
          "type": "object",
          "properties": {
            "endorser":{  "description": "deprecated."},
            "name": { "type": "string","pattern": "^[a-z0-9-]{1,30}$","description": "Name of the service"},
            "full_name": { "type": "string","description":"Full name of endorser service"},
            "avatar": { "type": "string","description":"Link to avatar. Not used now."},
            "server": { "$ref":"#/definitions/indy_httpapiport"}
          },
          "required": [ "name","full_name"],
          "additionalProperties": false
        },
        "indy_httpapiport":{
          "type": "object",
          "properties": {
            "httpPort": { "type": "number"},
            "apiPort": { "type": "number"},
            "webhookPort": { "type": "number"}
            },
          "required": [ "httpPort","apiPort"],
          "additionalProperties": false
        },
        "quorum_config":{
          "type": "object",
          "properties": {
            "consensus": { "type": "string","enum": ["ibft","raft"],"description":"Currently supports raft or ibft. Please update the remaining items according to the consensus chosen as not all values are valid for both the consensus."},
            "subject":  { "type": "string","description":"This is the subject of the root CA which will be created for the Quorum network. The root CA is for development purposes only, production networks should already have the root certificates."},
            "transaction_manager": { "type": "string","enum": ["tessera","constellation","none"],"description":"Options are tessera and constellation. Please update the remaining items according to the transaction_manager chosen as not all values are valid for both the transaction_manager."},
            "tm_version":{},
            "tm_tls": { "type": "string","enum":["strict","off"],"description":"Options are strict and off. This enables TLS for the transaction managers, and is not related to the actual Quorum network. off is not recommended for production."},
            "tm_trust": { "type": "string","enum": ["ca-or-tofu","ca","tofu"],"description":"This is the trust relationships for the transaction managers."},
            "tm_nodes":{},
            "staticnodes":{"type":"string","pattern":"^(\/[^\/ ]*)+[^\/ ]+$","description":"This is the path where staticnodes will be stored for a new network; for adding new node, the existing network's staticnodes should be available in yaml format in this file."},
            "genesis":  { "type": "string","pattern":"^(\/[^\/ ]*)+[^\/ ]+$","description":"This is the path where genesis.json will be stored for a new network; for adding new node, the existing network's genesis.json should be available in json format in this file."},
            "bootnode": { "$ref":"#/definitions/quorum_config_bootnode"}
            },
            "if": {"properties": { "transaction_manager": { "const": "tessera" } } },"then":{
              "properties": {
                "tm_version": { "type": "string","enum": ["21.7.3"],"description":"This is the version of transaction manager docker image that will be deployed. Supported versions: 1.6.0 for orion and 21.1.1 for tessera and orion."},
                "tm_nodes": { "type":"array","minItems": 1,
                    "items":{"type":"string","pattern":"^https:\/\/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?$" }}
              }},"else":{
              "properties": {
                "tm_version": { "type": "string","enum": ["0.3.2"],"description":"This is the version of transaction manager docker image that will be deployed. Supported versions: 1.6.0 for orion and 21.1.1 for tessera and orion."},
                "tm_nodes": { "type":"array","minItems": 1,
                    "items":{"type":"string","pattern":"^https:\/\/(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?$" }}

            }},
          "required": [ "consensus","subject","transaction_manager","tm_version","tm_tls","tm_trust","tm_nodes","genesis"],
          "additionalProperties": false
        },
        "quorum_config_bootnode":{
          "type": "object",
          "properties": {
            "name": { "type": "string","pattern": "^[a-z0-9-_]{1,30}$","description":"name of the bootnode that matches one from existing node"},
            "url": {  "type": "string","pattern": "^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?::[0-9]{2,5})?(?:\\/[a-z0-9-]{1,61})*$","description":"ambassador url of the bootnode"},
            "rpcport": { "type": "number","description":"rpc port of the bootnode"},
            "nodeid": { "type": "number","description":"id of the bootnode"}
            },
          "required": [ "name","url","rpcport","nodeid"],
          "additionalProperties": false
        },
        "quorum_organization":{
          "type": "object",
          "allOf":[{ "$ref":"#/definitions/shared_organization"}],
          "properties": {
            "external_url_suffix":  { "type": "string","description":"Public url suffix of the cluster. This is the configured path for the Ambassador Service on the DNS provider."},
            "services":{"type":"object","properties":{
               "peers":{ "type":"array","items":{ "$ref":"#/definitions/quorum_service_peer"}}
            }}}
        },
        "quorum_service_peer":{
          "type": "object",
          "properties": {
            "peer": {},
            "name": { "type": "string","pattern": "^[a-z0-9-_]{1,30}$","description":"Name of the peer"},
            "subject": { "type": "string", "description": "This is the alternative identity of the peer node"},
            "type":{"type":"string","enum":["validator","member","non-validator"],"description":"value can be validator or non-validator, only applicable if consensus = 'ibft'"},
            "geth_passphrase": { "type": "string", "description": "This is the passphrase used to generate the geth account."},
            "p2p":  { "$ref":"#/definitions/shared_port_ambassador"},
            "rpc":  { "$ref":"#/definitions/shared_port_ambassador"},
            "transaction_manager":  { "$ref":"#/definitions/quorum_tm_port_ambassador"},
            "raft": { "$ref":"#/definitions/shared_port_ambassador","description":"Only used if consensus = 'raft'"},
            "db": { "$ref":"#/definitions/shared_port","description":" Only used if transaction_manager = tessera"}
            }
        },
        "quorum_tm_port_ambassador":{
          "type": "object",
          "properties": {
            "port": { "type": "number"},
            "ambassador": { "type": "number"},
            "clientport":  { "type": "number"}
          },
          "required": [ "port","ambassador"],
          "additionalProperties": false
        },
        "substrate_config":{
          "type": "object",
          "properties": {
            "node_image": { "type": "string","description":"Provide the docker image which will be used for the Substrate Nodes in this network. (will be downloaded from docker.url)"},
            "command": { "type": "string", "enum":["polkadot","substrate","./dscp-node"],"description": "The command to be run in the Substrate docker image" },
            "chain": { "type": "string", "description": "The custom chain name" },
            "subject":  { "type": "string","description":"This is the subject of the root CA which will be created for the Substrate network. The root CA is for development purposes only, production networks should already have the root certificates."},            
            "bootnodes":{"type":"string","pattern":"^(\/[^\/ ]*)+[^\/ ]+$","description":"This is the path where bootnodes will be stored for a new network; for adding new node, the existing network's bootnodes should be available in yaml format in this file."},
            "genesis":  { "type": "string","pattern":"^(\/[^\/ ]*)+[^\/ ]+$","description":"This is the path where genesis.json will be stored for a new network; for adding new node, the existing network's genesis.json should be available in json format in this file."},
            "ipfsbootnodes":{"type":"string","pattern":"^(\/[^\/ ]*)+[^\/ ]+$","description":"This is the path where IPFS bootnodes will be stored for a new network; for adding new node, the existing network's bootnodes should be available in yaml format in this file."}
            },
          "required": [ "node_image","bootnodes","genesis","chain"],
          "additionalProperties": false
        },
        "substrate_organization":{
          "type": "object",
          "allOf":[{ "$ref":"#/definitions/shared_organization"}],
          "properties": {
            "external_url_suffix":  { "type": "string","description":"Public url suffix of the cluster. This is the configured path for the Ambassador Service on the DNS provider."},
            "services":{"type":"object","properties":{
               "peers":{ "type":"array","items":{ "$ref":"#/definitions/substrate_service_peer"}}
            }}}
        },
        "substrate_service_peer":{
          "type": "object",
          "properties": {
            "peer": {},
            "name": { "type": "string","pattern": "^[a-z0-9-_]{1,30}$","description":"Name of the peer"},
            "subject": { "type": "string", "description": "This is the alternative identity of the peer node"},
            "type":{"type":"string","enum":["validator","bootnode","member","ipfs","ipfs-bootnode"],"description":"value can be validator, bootnode or member; ipfs type is for vitalAM only"},
            "p2p":  { "$ref":"#/definitions/shared_port_ambassador", "description":"P2P port with external access"},
            "ipfs":  { "$ref":"#/definitions/shared_ipfs_ambassador","description":"IPFS Swarm port with external access"},
            "api":  { "$ref":"#/definitions/shared_port","description":"API port"},
            "ws": { "$ref":"#/definitions/shared_port","description":"WebSockets port"},
            "rpc": { "$ref":"#/definitions/shared_port","description":"RPC port"}
            }
        }
      }
  }
