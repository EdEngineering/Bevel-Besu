##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
# Set enode_data_list to empty
- name: Set enode_data_list to []
  set_fact:
    enode_data_list: []

# Get enode data for all orgs
- name: Get enode data for each node of all organization
  include_tasks: enode_data.yaml
  vars:
    vault: "{{ org.vault }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org
        
# Get nodelist for all peers
- name: Get enode data for each node of all organization
  include_tasks: nodelist.yaml
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org
  when: org.type == 'validator'

# Call nested_validator_vote to do the voting proposal
- name: Call nested_validator_vote for the voting proposal
  include_tasks: nested_validator_vote.yaml
  vars:
    new_org_query: "validators[?name=='{{ validator_name.node }}']"
    peer: "{{ val.services | json_query(new_org_query) }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: val
  when: 
    - network.config.consensus == 'ibft' or network.config.consensus == 'qbft'
    - val.type == 'validator' 
    - peer | length>0
    - (network.crypto_only is undefined or network.crypto_only == false)

# Check for local genesis file
- name: Check that the gensis file exists
  stat:
    path: "{{ network.config.genesis }}"
  register: stat_result

# This task gets the genesis file when there is no local genesis
- name: get genesis from vault
  shell: |
    vault kv get -field=genesis {{ vault.secret_path | default('secretsv2') }}/{{ component_ns }}/crypto/genesis
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_genesis
  ignore_errors: yes
  when:
    - stat_result.stat.exists == False
    - (network.crypto_only is undefined or network.crypto_only == false)

#This task only runs when there is no local genesis file
- name: Copy genesis from vault to correct path
  shell: |
    echo {{ vault_genesis.stdout }} > {{ network.config.genesis }}
  when:
    - stat_result.stat.exists == False
    - (network.crypto_only is undefined or network.crypto_only == false)

# Looping the validator orgs
- name: Pushing files to Git and creating helm release files
  include_tasks: value_files.yaml
  vars:
    kubernetes: "{{ org_val.k8s }}"
    consensus: "{{ network.config.consensus }}"
    component_ns: "{{ org_val.name | lower }}-bes"
    name: "{{ org_val.name | lower }}"
    peers: "{{ org_val.services.validators }}"
    tm_node: "{{ network.config.tm_nodes | first }}"
    storageclass_name: "{{ org_val.cloud_provider }}storageclass"
    external_url: "{{ org_val.external_url_suffix }}"
    vault: "{{ org_val.vault }}"
    git_url: "{{ org_val.gitops.git_url }}"
    new_org_query: "validators[?name=='{{ validator_name.node }}']"
    peer_result: "{{ org_val.services | json_query(new_org_query) }}"
    peer:  "{{ peer_result.0 }}"
    git_branch: "{{ org_val.gitops.branch }}"
    docker_url: "{{ network.docker.url }}"
    charts_dir: "{{ org_val.gitops.chart_source }}"
    values_dir: "{{playbook_dir}}/../../../{{org_val.gitops.release_dir}}/{{ org_val.name | lower }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org_val
  when: 
    - network.config.consensus == 'ibft' or network.config.consensus == 'qbft'
    - org_val.type == 'validator' and peer_result | length>0
    - (network.crypto_only is undefined or network.crypto_only == false)
