##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This task does the JSON-RPC Call for adding a new validator to the network 
- name: Voting by every existing validator - IBFT consensus
  uri:
    url: "{{ besu_node }}"
    method: POST
    validate_certs: no
    return_content: yes
    body_format: json
    body: '{"jsonrpc":"2.0","method":"ibft_proposeValidatorVote","params":["{{ validator_addr }}", true],"id":1}'
    headers:
      Content-Type: "application/json"
  register: peer_id
  until: peer_id.status == 200
  retries: "{{ network.env.retry_count }}"
  delay: 50
  loop: "{{ besu_nodes }}"
  loop_control:
    loop_var: besu_node
  when: network.config.consensus == 'ibft'

# This task does the JSON-RPC Call for adding a new validator to the network (new nodes already added) 
- name: Voting by every existing validator (new ones already added) - IBFT consensus
  uri:
    url: "{{ new_validator }}"
    method: POST
    validate_certs: no
    return_content: yes
    body_format: json
    body: '{"jsonrpc":"2.0","method":"ibft_proposeValidatorVote","params":["{{ validator_addr }}", true],"id":1}'
    headers:
      Content-Type: "application/json"
  register: peer_id
  until: peer_id.status == 200
  retries: "{{ network.env.retry_count }}"
  delay: 50
  loop: "{{ new_validator_nodes }}"
  loop_control:
    loop_var: new_validator
  when: network.config.consensus == 'ibft' and new_validator_nodes is defined and new_validator_nodes | length > 0

# This task does the JSON-RPC Call for adding a new validator to the network 
- name: Voting by every existing validator - QBFT consensus
  uri:
    url: "{{ besu_node }}"
    method: POST
    validate_certs: no
    return_content: yes
    body_format: json
    body: '{"jsonrpc":"2.0","method":"qbft_proposeValidatorVote","params":["{{ validator_addr }}", true],"id":1}'
    headers:
      Content-Type: "application/json"
  register: peer_id
  until: peer_id.status == 200
  retries: "{{ network.env.retry_count }}"
  delay: 50
  loop: "{{ besu_nodes }}"
  loop_control:
    loop_var: besu_node
  when: network.config.consensus == 'qbft'

# This task does the JSON-RPC Call for adding a new validator to the network (new nodes already added) 
- name: Voting by every existing validator (new ones already added) - QBFT consensus
  uri:
    url: "{{ new_validator }}"
    method: POST
    validate_certs: no
    return_content: yes
    body_format: json
    body: '{"jsonrpc":"2.0","method":"qbft_proposeValidatorVote","params":["{{ validator_addr }}", true],"id":1}'
    headers:
      Content-Type: "application/json"
  register: peer_id
  until: peer_id.status == 200
  retries: "{{ network.env.retry_count }}"
  delay: 50
  loop: "{{ new_validator_nodes }}"
  loop_control:
    loop_var: new_validator
  when: network.config.consensus == 'qbft' and new_validator_nodes is defined and new_validator_nodes | length > 0

- name: Set url
  set_fact: 
    url=http://{{ peer.0.name }}.{{ val.external_url_suffix }}:{{ peer.0.rpc.ambassador }}

# Adding the new validator address to the new_validator_nodes array for future voting participation
- name: Adding the new validator address to the new_validator_nodes array for future voting participation
  set_fact:
    new_validator_nodes: "{{ new_validator_nodes + [ url ] }}"
  when: new_validator_nodes is defined
