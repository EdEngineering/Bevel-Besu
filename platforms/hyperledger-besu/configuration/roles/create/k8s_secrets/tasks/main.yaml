##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

#############################################################################################
# This role creates secrets 
#############################################################################################

# This task checks if Ambassador credentials exist already
- name: Check Ambassador cred exists
  k8s_info:
    kind: Secret
    namespace: "{{ component_ns }}"
    name: "{{ node_name }}-ambassador-certs"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: get_ambassador_secret
  when: check == "ambassador_creds"

# Checks if certificates are already created and stored in vault.
- name: Check if ambassador and tls certs already created
  shell: |
    vault kv get -field=rootca_pem {{ vault.secret_path | default('secretsv2') }}/{{ component_ns }}/crypto/{{ node_name }}/tls
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: certs
  when: check == "ambassador_creds"
  ignore_errors: yes

# Gets the existing ambassador tls certs
- name: Get ambassador and tls certs from Vault
  shell: |
    vault kv get -format=yaml {{ vault.secret_path | default('secretsv2') }}/{{ component_ns }}/crypto/{{ node_name }}/tls
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: certs_yaml
  when: certs.failed == False and check == "ambassador_creds"

- name: Get ambassador tls certs
  include_role: 
    name: "setup/get_crypto"
  vars:
    vault_output: "{{ certs_yaml.stdout | from_yaml }}"
    type: "ambassador"
    cert_path: "{{ ambassadortls }}"
  when: certs.failed == False and check == "ambassador_creds"

# This task creates the Ambassador TLS credentials
- name: Create the Ambassador credentials 
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ node_name }}-ambassador-certs"
        namespace: "{{ component_ns }}"
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ lookup('file', '{{ ambassadortls }}/ambassador.crt') | b64encode }}"
        tls.key: "{{ lookup('file', '{{ ambassadortls }}/ambassador.key') | b64encode }}"
    state: present
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  when: 
    - check == "ambassador_creds"
    - get_ambassador_secret.resources|length == 0
    - certs.failed == False
