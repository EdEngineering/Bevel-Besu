##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.metadata.namespace }}
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: {{ .Values.node.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
    {{- if $.Values.labels }}
    {{- range $key, $value := $.Values.labels.deployment }}
    {{- range $k, $v := $value }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}
    {{- end }}
    {{- end }}
  name: {{ .Values.node.name }}
spec:
  serviceName: {{ .Values.node.name }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: consortiumchain
      name: {{ .Values.node.name }}
      service.rpc: {{ .Values.node.name }}
      app.kubernetes.io/name: {{ .Values.node.name }}
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
      {{- if $.Values.labels }}
      {{- range $key, $value := $.Values.labels.deployment }}
      {{- range $k, $v := $value }}
      {{ $k }}: {{ $v | quote }}
      {{- end }}
      {{- end }}
      {{- end }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: consortiumchain
        name: {{ .Values.node.name }}
        service.rpc: {{ .Values.node.name }}
        app.kubernetes.io/name: {{ .Values.node.name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
        {{- if $.Values.labels }}
        {{- range $key, $value := $.Values.labels.deployment }}
        {{- range $k, $v := $value }}
        {{ $k }}: {{ $v | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
    spec:
      serviceAccountName: {{ .Values.vault.serviceaccountname }}
      hostname: {{ .Values.node.name }}.{{ .Values.metadata.namespace }}
      securityContext:
        fsGroup: 1000
      imagePullSecrets:
          - name: {{ .Values.node.imagePullSecret }}
      volumes:
        - name: certificates
          emptyDir:
            medium: Memory
        - name: {{ .Values.node.name }}-genesis-volume
          configMap:
            name: genesis-{{ .Values.node.name }}
            items:
              - key: genesis.json.base64
                path: genesis.json.base64      
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
            defaultMode: 0777  
      initContainers:
      - name: certificates-init
        image: {{ .Values.images.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ .Values.vault.address }}
        - name: VAULT_SECRET_ENGINE
          value: {{ $.Values.vault.secretengine }}
        - name: VAULT_SECRET_PREFIX
          value: {{ .Values.vault.secretprefix }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ .Values.vault.role }}
        - name: VAULT_TYPE
          value: "{{ $.Values.vault.type }}"
        - name: MOUNT_PATH
          value: "/secrets"
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          source /scripts/bevel-vault.sh
          echo "Getting the vault Token..."
          vaultBevelFunc 'init'
          
          mkdir -p ${MOUNT_PATH}

          vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/{{ .Values.vault.keyname }}"
          vaultBevelFunc 'readJson' ${vault_secret_key}
          node_private_key=$(echo ${VAULT_SECRET} | jq -r '.["key"]')
          echo "${node_private_key}" > ${MOUNT_PATH}/node_private_key

          if [ {{ $.Values.privacy.tm_flag }} == "true" ]
          then
            vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/{{ .Values.vault.tmdir }}" 
            echo "Getting transaction manager public key from $vault_secret_key"
            vaultBevelFunc 'readJson' ${vault_secret_key}
            tm_key_pub=$(echo ${VAULT_SECRET} | jq -r '.["publicKey"]')
            echo "${tm_key_pub}" > ${MOUNT_PATH}/tm_key_pub
          fi

          if [ {{ $.Values.tm.tls }} == "true" ]
          then
            vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/{{ .Values.vault.tlsdir }}" 
            echo "Getting tls knownServer, keystore and keystore password from $vault_secret_key"
            vaultBevelFunc 'readJson' ${vault_secret_key}
            
            tm_known_server=$(echo ${VAULT_SECRET} | jq -r '.["knownServer"]'| base64 -d)
            keystore_b64=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]')
            keystore=$(echo ${keystore_b64} | sed 's/ //g' )  # removing white spaces from keystore because sometimes while fetching b64 string, '+' is replaced with white spaces.
            keystore_password=$(echo ${VAULT_SECRET} | jq -r '.["password"]' | base64 -d)

            echo "${tm_known_server}" > ${MOUNT_PATH}/known_server
            echo "${keystore}" > ${MOUNT_PATH}/keystore
            base64 -d ${MOUNT_PATH}/keystore > ${MOUNT_PATH}/keystore.pkcs12
            echo "${keystore_password}" > ${MOUNT_PATH}/keystore_password
          fi
        volumeMounts:
        - name: certificates
          mountPath: /secrets
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
      - name: liveliness-check
        image: "{{ .Values.images.alpineutils }}"
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          {{- if .Values.liveliness_check.enabled }}
            COUNTER=1
            while [ "$COUNTER" -lt {{ $.Values.healthcheck.readinessthreshold }} ]
            do
                # get truststore from vault to see if registration is done or not
                LOOKUP_SECRET_RESPONSE=$(curl -X GET {{ .Values.liveliness_check.url }}:{{ .Values.liveliness_check.port }}/liveness | jq -r 'if .errors then . else . end')
                if ! echo ${LOOKUP_SECRET_RESPONSE} | grep -E "UP"
                then
                  sleep {{ $.Values.healthcheck.readinesscheckinterval }}
                else
                  break
                fi 
                COUNTER=`expr "$COUNTER" + 1`
            done
          {{- end }}
        volumeMounts:
        - name: {{ .Values.node.name }}-pv
          mountPath: {{ .Values.node.mountPath }}
      containers:      
      - name: besu
        image: "{{ .Values.images.node }}"
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
          - -c
        args:
          - |            
            echo -n {{ .Values.staticnodes | toJson | quote }} > {{ .Values.node.mountPath }}/static-nodes.json
            mkdir -p /tmp/genesis;
            cat /etc/genesis/genesis.json.base64 | base64 -d > /tmp/genesis/genesis.json
            tr -d "\n\r" < /secrets/tm_key_pub > /secrets/tm_key.pub
            if [ "$CONSENSUS" = "qbft" ]; then
              args="--rpc-http-enabled --rpc-http-api=ETH,NET,QBFT,DEBUG,ADMIN,WEB3,EEA,PRIV --rpc-ws-enabled --rpc-ws-api=ETH,NET,WEB3 --p2p-port {{ .Values.node.ports.p2p }} --rpc-http-port {{ .Values.node.ports.rpc }} --rpc-ws-port={{ .Values.node.ports.ws }}"
            else
              args="--rpc-http-enabled --rpc-http-api=ETH,NET,IBFT,DEBUG,ADMIN,WEB3,EEA,PRIV --rpc-ws-enabled --rpc-ws-api=ETH,NET,WEB3 --p2p-port {{ .Values.node.ports.p2p }} --rpc-http-port {{ .Values.node.ports.rpc }} --rpc-ws-port={{ .Values.node.ports.ws }}"
            fi
            if  {{ $.Values.tm.tls }} == "true" 
            then
              tls_args="--privacy-tls-enabled --privacy-tls-keystore-file=/secrets/keystore.pkcs12 --privacy-tls-keystore-password-file=/secrets/keystore_password --privacy-tls-known-enclave-file=/secrets/known_server --privacy-url={{ .Values.tm.url }}"
            else
              tls_args="--privacy-url={{ .Values.tm.url }}"
            fi

            if {{ $.Values.metrics.enabled }} == "true"
            then
              metrics_args="--metrics-enabled --metrics-port={{ template "metrics_port" . }} --metrics-host=0.0.0.0"
            fi
            
            if {{ $.Values.node.permissioning.enabled }} == "true"
            then
              permissioning_args="--permissions-accounts-contract-enabled --permissions-accounts-contract-address=0x0000000000000000000000000000000000008888 --permissions-nodes-contract-enabled  --permissions-nodes-contract-address=0x0000000000000000000000000000000000009999 --permissions-nodes-contract-version=2"
              args="--rpc-http-enabled --rpc-http-api=ETH,NET,IBFT,DEBUG,ADMIN,WEB3,EEA,PRIV,PERM --rpc-ws-enabled --rpc-ws-api=ETH,NET,WEB3 --p2p-port {{ .Values.node.ports.p2p }} --rpc-http-port {{ .Values.node.ports.rpc }} --rpc-ws-port={{ .Values.node.ports.ws }}"
            fi

            exec /opt/besu/bin/besu \
            --identity={{ .Values.node.name }} \
            --discovery-enabled=false \
            --node-private-key-file=/secrets/node_private_key \
            --data-path={{ .Values.node.mountPath }} \
            --genesis-file=/tmp/genesis/genesis.json \
            --logging=DEBUG \
            --nat-method=AUTO \
            --tx-pool-retention-hours=999 \
            --tx-pool-max-size=1024 \
            --p2p-enabled=true \
            --p2p-host=0.0.0.0 \
            --max-peers=25 \
            --host-allowlist="*" \
            --rpc-http-host=0.0.0.0 \
            --rpc-http-cors-origins="all" \
            --rpc-ws-host=0.0.0.0 \
            --min-gas-price=0 \
            --privacy-enabled={{ .Values.privacy.enabled }} \
            --privacy-public-key-file={{ .Values.privacy.public_key_file }} \
            --Xdns-enabled=true \
            --Xdns-update-enabled=true \
            $args \
            $tls_args \
            $metrics_args \
            $permissioning_args \
        ports:
          - name: json-rpc
            containerPort: {{ .Values.node.ports.rpc}}
            protocol: TCP
          - name: ws
            containerPort: {{ .Values.node.ports.ws }}
            protocol: TCP
          - name: rlpx
            containerPort: {{ .Values.node.ports.p2p }}
            protocol: TCP
        env:
          - name: CONSENSUS
            value: "{{ $.Values.node.consensus }}"
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        volumeMounts:
        - name: {{ .Values.node.name }}-genesis-volume
          mountPath: /etc/genesis
        - name: certificates
          mountPath: /secrets
        - name: {{ .Values.node.name }}-pv
          mountPath: {{ .Values.node.mountPath }}
      restartPolicy: Always
  volumeClaimTemplates: 
    - metadata:
        name: {{ .Values.node.name }}-pv
        labels:
          {{- if $.Values.labels }}
          {{- range $key, $value := $.Values.labels.pvc }}
          {{- range $k, $v := $value }}
          {{ $k }}: {{ $v | quote }}
          {{- end }}
          {{- end }}
          {{- end }}
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.storagesize }}
