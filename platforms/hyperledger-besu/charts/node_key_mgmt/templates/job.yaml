
##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Values.metadata.name }}"
  namespace: "{{ $.Values.metadata.namespace }}"
  labels:
    app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- if $.Values.labels }}
    {{- range $key, $value := $.Values.labels.deployment }}
    {{- range $k, $v := $value }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}
    {{- end }}
    {{- end }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: "{{ $.Values.metadata.name }}"
        app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
        {{- if $.Values.labels }}
        {{- range $key, $value := $.Values.labels.deployment }}
        {{- range $k, $v := $value }}
        {{ $k }}: {{ $v | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 3000
      restartPolicy: OnFailure
      imagePullSecrets:
        - name: "{{ $.Values.image.pullSecret }}"
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      volumes:
        - name: node-crypto
          emptyDir:
            medium: Memory
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
            defaultMode: 0777
      initContainers:
      - name: init-check-crypto
        image: "{{ $.Values.image.alpineutils }}"
        imagePullPolicy: "{{ $.Values.image.pullPolicy }}"
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.vault.address }}
        - name: VAULT_SECRET_ENGINE
          value: {{ $.Values.vault.secretengine }}
        - name: VAULT_TYPE
          value: "{{ $.Values.vault.type }}"
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.vault.role }}
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          source /scripts/bevel-vault.sh
          echo "Getting the vault Token..."
          vaultBevelFunc 'init'

          CRYPTO_PATH=/crypto
            
          {{- range .Values.organisation.nodes }}
          mkdir ${CRYPTO_PATH}/{{ .name }}
          VAULT_PATH_NODE_CRYPTO=data/{{ $.Values.metadata.namespace }}/crypto/{{ .name }}/data
          vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_PATH_NODE_CRYPTO}"
          # Check for node crypto ..
          vaultBevelFunc 'readJson' ${vault_secret_key}
          NODE_KEY=$(echo ${VAULT_SECRET} | jq -r '.["key"]')
          
          for field in "$NODE_KEY"
          do
            if [ "$field" = "null"  ] || [[ "$field" = "parse error"* ]] || [ "$field" = "" ]
            then
            echo "data absent in ${VAULT_PATH_NODE_CRYPTO}"
            touch ${CRYPTO_PATH}/{{ .name }}/node_crypto_absent
            else
            echo "data present in ${VAULT_PATH_NODE_CRYPTO}"
            fi
          done
          {{- end }}
          echo "Done checking for crypto in vault"
        volumeMounts:
          - name: node-crypto
            mountPath: /crypto
          - name: scripts-volume
            mountPath: /scripts/bevel-vault.sh
            subPath: bevel-vault.sh 
      containers:
        - name:  "generate-node-keys"
          image: "{{ $.Values.image.besucontainer }}"
          env:
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |-
              echo "Generating keypair and nodeAddress.."
              CRYPTO_PATH=/crypto
              {{- range .Values.organisation.nodes }}
                  if [ -f ${CRYPTO_PATH}/{{ .name }}/node_crypto_absent ]
                  then
                    mkdir ${CRYPTO_PATH}/{{ .name }}/data
                    echo "Generating keypair and nodeAddress for {{ .name }}.."
                    besu --data-path ${CRYPTO_PATH}/{{ .name }}/data public-key export-address --to ${CRYPTO_PATH}/{{ .name }}/data/nodeAddress
                    besu --data-path ${CRYPTO_PATH}/{{ .name }}/data public-key export --to ${CRYPTO_PATH}/{{ .name }}/data/key.pub
                  else
                    echo "keypair and nodeAddress for {{ .name }} already present in vault.."
                  fi
              {{- end }}
              touch ${CRYPTO_PATH}/generate_node_keys_complete
          volumeMounts:
           - name: node-crypto
             mountPath: /crypto
        - name:  "store-node-keys"
          image: "{{ $.Values.image.alpineutils }}"
          imagePullPolicy: IfNotPresent
          env:
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}
          - name: VAULT_SECRET_ENGINE
            value: {{ $.Values.vault.secretengine }}
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authpath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.vault.role }}
          - name: MOUNT_PATH
            value: "/crypto"
          - name: VAULT_TYPE
            value: "{{ $.Values.vault.type }}"
          command: ["sh", "-c"]
          args:
            - |-
              #!/usr/bin/env sh
              source /scripts/bevel-vault.sh
              echo "Work on mount path.."
              cd ${MOUNT_PATH}
              
              vaultBevelFunc 'init'
              while ! [ -f ${MOUNT_PATH}/generate_node_keys_complete ]
              do
                echo 'Waiting for node keys..'
                sleep 2s
              done
              CRYPTO_PATH=${MOUNT_PATH}
              {{- range .Values.organisation.nodes }}
              COUNTER=1
              while [ "$COUNTER" -le {{ $.Values.healthcheck.retries }} ]
              do
                if [ -f ${CRYPTO_PATH}/{{ .name }}/node_crypto_absent ]
                then
                  NODE_ADDRESS=$(cat ${CRYPTO_PATH}/{{ .name }}/data/nodeAddress)
                  NODE_KEY=$(cat ${CRYPTO_PATH}/{{ .name }}/data/key)
                  NODE_KEY_PUB=$(cat ${CRYPTO_PATH}/{{ .name }}/data/key.pub)
                  # create the payload for node crypto
                  echo "
                  {
                    \"data\":
                      {
                        \"nodeAddress\": \"${NODE_ADDRESS}\",
                        \"key\": \"${NODE_KEY}\",
                        \"key_pub\": \"${NODE_KEY_PUB}\"
                      }
                  }" > payload.json
                  # create the vault path for node cryto
                  VAULT_PATH_NODE_CRYPTO=data/{{ $.Values.metadata.namespace }}/crypto/{{ .name }}/data
                  
                  vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_PATH_NODE_CRYPTO}"
                  # This command copy the tls certificates to the Vault
                  vaultBevelFunc 'write' "${vault_secret_key}" 'payload.json'
                    
                  # Check for node crypto ..
                  vaultBevelFunc 'readJson' ${vault_secret_key}
                  NODE_KEY=$(echo ${VAULT_SECRET} | jq -r '.["key"]')
                  
                  for field in "$NODE_KEY"
                  do
                    if [ "$field" = "null"  ] || [[ "$field" = "parse error"* ]] || [ "$field" = "" ]
                    then
                      NODE_CRYPTO_WRITTEN=false
                      break
                    else
                      NODE_CRYPTO_WRITTEN=true
                    fi
                  done
                  rm payload.json
                  if [ "$NODE_CRYPTO_WRITTEN" = "true" ]
                  then
                    echo "Success: store crypto for {{ .name }}"
                    break
                  else
                    echo "Crypto materials are not ready, sleeping for {{ $.Values.healthcheck.sleepTimeAfterError }} - $COUNTER "
                    sleep {{ $.Values.healthcheck.sleepTimeAfterError }}
                    COUNTER=`expr "$COUNTER" + 1`
                  fi
                else
                  echo "Skipped: store cryto for {{ .name }}"
                  break
                fi
              done
              if [ "$COUNTER" -gt {{ $.Values.healthcheck.retries }} ]
              then
                echo "Retry attempted `expr $COUNTER - 1` times, Crypto materials have not been saved."
                exit 1
              fi
              {{- end }}
          volumeMounts:
            - name: node-crypto
              mountPath: /crypto
            - name: scripts-volume
              mountPath: /scripts/bevel-vault.sh
              subPath: bevel-vault.sh 
