##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Values.metadata.name }}"
  namespace: "{{ $.Values.metadata.namespace }}"
  labels:
    app: "{{ $.Values.metadata.name }}"
    app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- if $.Values.labels }}
    {{- range $key, $value := $.Values.labels.deployment }}
    {{- range $k, $v := $value }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}
    {{- end }}
    {{- end }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: "{{ $.Values.metadata.name }}"
        app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
        {{- if $.Values.labels }}
        {{- range $key, $value := $.Values.labels.deployment }}
        {{- range $k, $v := $value }}
        {{ $k }}: {{ $v | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
    spec:
      restartPolicy: OnFailure
      imagePullSecrets:
        - name: "{{ $.Values.image.pullSecret }}"
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      volumes:
        - name: vault-token
          emptyDir:
            medium: Memory
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
            defaultMode: 0777
      initContainers:
       - name: "fetch-vault-token"
         image: "{{ $.Values.image.alpineutils }}"
         env:
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}
          - name: VAULT_SECRET_ENGINE
            value: {{ $.Values.vault.secretengine }}
          - name: VAULT_KEY_PREFIX
            value: "{{ $.Values.vault.keyprefix }}" 
          - name: PEER_NAME
            value: {{ $.Values.peer.name }}            
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authpath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.vault.role }}
          - name: VAULT_SECRET_PREFIX
            value: "{{ $.Values.vault.tmprefix }}"
          - name: VAULT_TYPE
            value: "{{ $.Values.vault.type }}"
         command: ["sh", "-c"]
         args:
            - |-
              source /scripts/bevel-vault.sh
              echo "Getting the vault Token..."
              vaultBevelFunc 'init'

              echo $VAULT_TOKEN > /secret/VAULT_CLIENT_TOKEN
         volumeMounts:
         - name: vault-token
           mountPath: /secret
         - name: scripts-volume
           mountPath: /scripts/bevel-vault.sh
           subPath: bevel-vault.sh
      containers:
        - name:  "tessera-crypto"
          image: "{{ $.Values.image.repository }}"
          env:
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}
          - name: VAULT_SECRET_ENGINE
            value: {{ $.Values.vault.secretengine }}
          - name: VAULT_KEY_PREFIX
            value: "{{ $.Values.vault.keyprefix }}" 
          - name: PEER_NAME
            value: {{ $.Values.peer.name }}            
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authpath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.vault.role }}
          - name: VAULT_SECRET_PREFIX
            value: "{{ $.Values.vault.tmprefix }}"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |-
              # Get the vault client token
              export HASHICORP_TOKEN=$(cat /secret/VAULT_CLIENT_TOKEN)

              # Generate tessera keys
              /tessera/bin/tessera -keygen -keygenvaulttype HASHICORP -keygenvaulturl ${VAULT_ADDR} -keygenvaultsecretengine ${VAULT_SECRET_ENGINE} -filename ${VAULT_KEY_PREFIX}/${PEER_NAME}/tm
          volumeMounts:
           - name: vault-token
             mountPath: /secret
