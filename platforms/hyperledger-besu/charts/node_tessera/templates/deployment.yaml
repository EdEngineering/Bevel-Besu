##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.metadata.namespace }}
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: {{ .Values.tessera.name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }} 
    {{- include "labels.custom" . | nindent 2 }}
    {{- if $.Values.labels }}
    {{- range $key, $value := $.Values.labels.deployment }}
    {{- range $k, $v := $value }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}
    {{- end }}
    {{- end }}
  name: {{ .Values.tessera.name }}
spec:
  serviceName: {{ .Values.tessera.name }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      service.rpc: {{ .Values.tessera.name }}
      app.kubernetes.io/name: {{ .Values.tessera.name }}
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
      {{- include "labels.custom" . | nindent 2 }}
      {{- if $.Values.labels }}
      {{- range $key, $value := $.Values.labels.deployment }}
      {{- range $k, $v := $value }}
      {{ $k }}: {{ $v | quote }}
      {{- end }}
      {{- end }}
      {{- end }}
  template:
    metadata:
      creationTimestamp: null
      labels:        
        name: {{ .Values.tessera.name }}
        service.rpc: {{ .Values.tessera.name }}
        app.kubernetes.io/name: {{ .Values.tessera.name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
        {{- include "labels.custom" . | nindent 2 }}
        {{- if $.Values.labels }}
        {{- range $key, $value := $.Values.labels.deployment }}
        {{- range $k, $v := $value }}
        {{ $k }}: {{ $v | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
    spec:
      serviceAccountName: {{ .Values.vault.serviceaccountname }}
      hostname: {{ .Values.tessera.name }}
      imagePullSecrets:
          - name: {{ .Values.images.imagePullSecret }}
      volumes:
        - name: certificates
          emptyDir:
            medium: Memory
        - name: mysql
          emptyDir:
            medium: Memory
        - name: mysql-jar
          emptyDir:
            medium: Memory        
        - name: tessera-config
          configMap:
            name: tessera-config-{{ .Values.tessera.name }}
            items:
              - key: tessera-config.json.tmpl
                path: tessera-config.json.tmpl
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
            defaultMode: 0777
      initContainers:
      - name: certificates-init
        image: {{ .Values.images.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ .Values.vault.address }}
        - name: VAULT_SECRET_ENGINE
          value: {{ $.Values.vault.secretengine }}
        - name: VAULT_SECRET_PREFIX
          value: {{ .Values.vault.secretprefix }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.vault.authpath }}
        - name: VAULT_APP_ROLE
          value: {{ .Values.vault.role }}
        - name: VAULT_TYPE
          value: "{{ $.Values.vault.type }}"
        - name: MOUNT_PATH
          value: "/secret"
        command: ["sh", "-c"]
        args:
        - |-
          #!/bin/bash
          source /scripts/bevel-vault.sh
          echo "Getting the vault Token..."
          vaultBevelFunc 'init'
          
          echo $VAULT_TOKEN > /secret/VAULT_CLIENT_TOKEN

          vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/{{ .Values.vault.keyname }}"
          echo "Getting 2 keys from $vault_secret_key"          
          vaultBevelFunc 'readJson' ${vault_secret_key}
          
          nodekey=$(echo ${VAULT_SECRET} | jq -r '.["nodekey"]')
          keystore=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]')

          vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/{{ .Values.vault.keyname }}"
          echo "Getting 3 keys from $vault_secret_key"  
          vaultBevelFunc 'readJson' ${vault_secret_key}        
          
          gethpassword=$(echo ${VAULT_SECRET} | jq -r '.["gethpassword"]')
          username=$(echo ${VAULT_SECRET} | jq -r '.["db_user"]')
          password=$(echo ${VAULT_SECRET} | jq -r '.["db_password"]')

          OUTPUT_PATH="${MOUNT_PATH}/keys"
          mkdir -p ${OUTPUT_PATH}
          
          echo -n "${gethpassword}" > ${OUTPUT_PATH}/passwords.txt
          echo -n "${nodekey}" > ${OUTPUT_PATH}/nodekey
          echo -n "${keystore}" > ${OUTPUT_PATH}/keystore
          echo "${username}" > ${OUTPUT_PATH}/username
          echo "${password}" > ${OUTPUT_PATH}/password

          if [ {{ $.Values.tessera.tls }} == "STRICT" ]
          then
            vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/{{ .Values.vault.tlsdir }}" 
            vaultBevelFunc 'readJson' ${vault_secret_key}   
            
            tessera_ca=$(echo ${VAULT_SECRET} | jq -r '.["rootca_pem"]' | base64 -d)
            tessera_cer_pem=$(echo ${VAULT_SECRET} | jq -r '.["ambassadorcrt"]' | base64 -d)  
            tessera_cer_key=$(echo ${VAULT_SECRET} | jq -r '.["ambassadorkey"]' | base64 -d)
            tessera_known_server=$(echo ${VAULT_SECRET} | jq -r '.["knownServer"]'| base64 -d)
            keystore=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]')
            keystore_password=$(echo ${VAULT_SECRET} | jq -r '.["password"]' | base64 -d)
            echo "${tessera_ca}" > ${MOUNT_PATH}/tessera_ca.pem
            echo "${tessera_cer_pem}" > ${MOUNT_PATH}/tessera_cer.pem
            echo "${tessera_cer_key}" > ${MOUNT_PATH}/tessera_cer.key
            echo "${tessera_known_server}" > ${MOUNT_PATH}/known_server
            echo "${tessera_known_server}" > ${MOUNT_PATH}/known_client
            echo "${keystore}" > ${MOUNT_PATH}/keystore
            base64 -d ${MOUNT_PATH}/keystore > ${MOUNT_PATH}/keystore.pkcs12
            echo "${keystore_password}" > ${MOUNT_PATH}/keystore_password
          fi

          #copy mysql jar
          cp /mysql/* /mysql-jar
        volumeMounts:
        - name: certificates
          mountPath: /secret
        - name: mysql-jar
          mountPath: /mysql-jar
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
      - name: mysql-init
        image: {{ .Values.images.busybox }}
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
        - "-cx"
        - |-
          #!/bin/bash

          echo "getting username and password from vault"          
          var=$(cat /secret/keys/password)         
          cat << EOF > /docker-entrypoint-initdb.d/createTables.sql
          UPDATE mysql.user SET authentication_string = PASSWORD('$var') WHERE User = 'demouser';
          UPDATE mysql.user SET authentication_string = PASSWORD('$var') WHERE User = 'root';
          CREATE TABLE IF NOT EXISTS ENCRYPTED_TRANSACTION (ENCODED_PAYLOAD BLOB NOT NULL, HASH VARBINARY(100) NOT NULL, TIMESTAMP BIGINT, PRIMARY KEY (HASH));
          CREATE TABLE IF NOT EXISTS PRIVACY_GROUP(ID VARBINARY(100) NOT NULL, LOOKUP_ID BLOB NOT NULL, DATA BLOB NOT NULL, TIMESTAMP BIGINT, PRIMARY KEY (ID));
          CREATE TABLE IF NOT EXISTS ENCRYPTED_RAW_TRANSACTION (ENCRYPTED_KEY BLOB NOT NULL, ENCRYPTED_PAYLOAD BLOB NOT NULL, NONCE BLOB NOT NULL, SENDER BLOB NOT NULL, TIMESTAMP BIGINT, HASH VARBINARY(100) NOT NULL, PRIMARY KEY (HASH));
          CREATE TABLE ST_TRANSACTION(ID BIGINT(19) NOT NULL, HASH VARCHAR(100) NOT NULL, PAYLOAD BLOB, PRIVACY_MODE BIGINT(10), TIMESTAMP BIGINT(19), VALIDATION_STAGE BIGINT(19), PRIMARY KEY (ID));
          CREATE TABLE ST_AFFECTED_TRANSACTION(ID BIGINT(19) NOT NULL, AFFECTED_HASH VARCHAR(100) NOT NULL, TXN_ID BIGINT(19) NOT NULL, CONSTRAINT FK_ST_AFFECTED_TRANSACTION_TXN_ID FOREIGN KEY (TXN_ID) REFERENCES ST_TRANSACTION(ID), PRIMARY KEY (ID));
          CREATE INDEX IF NOT EXISTS ST_TRANSACTION_VALSTG ON ST_TRANSACTION(VALIDATION_STAGE);
          EOF
        volumeMounts:
        - name: mysql
          mountPath: /docker-entrypoint-initdb.d
        - name: certificates
          mountPath: /secret      
      containers:
      - name: mysql-db
        image: {{ .Values.images.mysql }}
        imagePullPolicy: IfNotPresent
        env:
        - name: "MYSQL_ROOT_PASSWORD"
          value: ""
        - name: MYSQL_DATABASE
          value: "{{ .Values.tessera.dbname }}"
        - name: MYSQL_USER
          value: "{{ .Values.tessera.dbusername }}"
        - name: MYSQL_PASSWORD
          value: /secret/keys/password
        ports:
          - containerPort: {{ .Values.tessera.ports.db }}
        volumeMounts:
        - name: mysql
          mountPath: /docker-entrypoint-initdb.d
        - name: certificates
          mountPath: /secret
        - name: {{ .Values.tessera.name }}-mysql
          mountPath: "/var/lib/mysql"
          subPath: mysql
      - name: tessera
        image: {{ .Values.images.tessera }}
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
          - |-
            mkdir -p $TESSERA_HOME/logs;
            mkdir -p $TESSERA_HOME/tm;
            DDIR=$TESSERA_HOME/tm;
            PASSWORD=$(cat $TESSERA_HOME/crypto/keys/password);

            # required for tessera vault integration
            export HASHICORP_TOKEN=$(cat $TESSERA_HOME/crypto/VAULT_CLIENT_TOKEN);

            printenv;
            # mysql connector required for mysql tessera DB 
            cp /mysql-jar/mysql-connector-java-8.0.25.tar.gz mysql-connector-java-8.0.25.tar.gz
            tar -xf mysql-connector-java-8.0.25.tar.gz;
            cp /mysql-connector-java-8.0.25/mysql-connector-java-8.0.25.jar /tessera/lib/;
            CONFIG_TMPL=$(cat ${TESSERA_HOME}/tessera-config.json.tmpl);
            echo $CONFIG_TMPL >  ${DDIR}/tessera-config-with-hosts.json;
            cat ${DDIR}/tessera-config-with-hosts.json;
            
            /tessera/bin/tessera --configfile ${DDIR}/tessera-config-with-hosts.json -o jdbc.password=$PASSWORD;
        ports:
          - containerPort: {{ .Values.tessera.ports.tm }}
        env:
          - name: TESSERA_HOME
            value: {{ .Values.tessera.mountPath }}
          - name: QHOME
            value: {{ .Values.tessera.mountPath }}
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}          
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authpath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.vault.role }}
        volumeMounts:
          - name: certificates
            mountPath: {{ .Values.tessera.mountPath }}/crypto/
          - name: {{ .Values.tessera.name }}-pv
            mountPath: {{ .Values.tessera.mountPath }}
          - name: tessera-config
            mountPath: {{ .Values.tessera.mountPath }}/tessera-config.json.tmpl
            subPath: tessera-config.json.tmpl  
          - name: mysql-jar
            mountPath: /mysql-jar        
      restartPolicy: Always
  volumeClaimTemplates: 
    - metadata:
        name: {{ .Values.tessera.name }}-pv
        labels:
           {{- if $.Values.labels }}
           {{- range $key, $value := $.Values.labels.pvc }}
           {{- range $k, $v := $value }}
           {{ $k }}: {{ $v | quote }}
           {{- end }}
           {{- end }}
           {{- end }}
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.storagesize }}
    - metadata:
        name: {{ .Values.tessera.name }}-mysql
        labels:
           {{- if $.Values.labels }}
           {{- range $key, $value := $.Values.labels.pvc }}
           {{- range $k, $v := $value }}
           {{ $k }}: {{ $v | quote }}
           {{- end }}
           {{- end }}
           {{- end }}
      spec:
        storageClassName: {{ .Values.storage.storageclassname }}    
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.storage.dbstorage }}
