##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Values.metadata.name }}"
  namespace: "{{ $.Values.metadata.namespace }}"
  labels:
    app: "{{ $.Values.metadata.name }}"
    app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- if $.Values.labels }}
    {{- range $key, $value := $.Values.labels.deployment }}
    {{- range $k, $v := $value }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}
    {{- end }}
    {{- end }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: "{{ $.Values.metadata.name }}"
        app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
        {{- if $.Values.labels }}
        {{- range $key, $value := $.Values.labels.deployment }}
        {{- range $k, $v := $value }}
        {{ $k }}: {{ $v | quote }}
        {{- end }}
        {{- end }}
        {{- end }}
    spec:
      restartPolicy: OnFailure
      imagePullSecrets:
        - name: "{{ $.Values.image.pullSecret }}"
      serviceAccountName: {{ $.Values.vault.serviceaccountname }}
      volumes:
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
            defaultMode: 0777
      containers:
        - name:  "orion-crypto"
          image: "{{ $.Values.image.repository }}"
          imagePullPolicy: IfNotPresent
          env:
          - name: VAULT_ADDR
            value: {{ $.Values.vault.address }}
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.vault.authpath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.vault.role }}
          - name: VAULT_SECRET_ENGINE
            value: {{ $.Values.vault.secretengine }}
          - name: VAULT_ORION_SECRET_PREFIX
            value: "{{ $.Values.vault.tmprefix }}"
          - name: VAULT_TYPE
            value: "{{ $.Values.vault.type }}"
          command: ["/bin/bash", "-c"]
          args:
            - |-
              curl -L -o /opt/orion/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
              chmod +x /opt/orion/bin/jq

              source /scripts/bevel-vault.sh
              echo "Getting the vault Token..."
              vaultBevelFunc 'init'

              vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_ORION_SECRET_PREFIX}"
              echo "Getting Orion password using key $vault_secret_key"
              vaultBevelFunc 'readJson' "${vault_secret_key}"

              GETH_PASSWORD=$(echo ${VAULT_SECRET} | jq -r '.["password"]')
              echo ${GETH_PASSWORD} > password_file
              orion -g nodeKey < password_file

              # encode to base64 to update to vault otherwise json format is creating problems with vault api
              nodekey_base64=$(cat nodeKey.key | base64 -w 0)

              # Save the generated keys to VAULT
              echo "
              {
                \"data\":
                  {
                    \"privateKey\": \"${nodekey_base64}\",
                    \"publicKey\": \"$(cat nodeKey.pub)\",
                    \"password\": \"$(cat password_file)\"
                  }

              }" > payload.json
              vaultBevelFunc 'write' "${vault_secret_key}" 'payload.json'

              vaultBevelFunc 'readJson' "${vault_secret_key}"
              # get privateKey from vault
              privateKey=$(echo ${VAULT_SECRET} | jq -r '.["privateKey"]')
              # get publicKey from vault
              publicKey=$(echo ${VAULT_SECRET} | jq -r '.["publicKey"]')

              if [ "$privateKey" == "null" ] || [ "$publicKey" == "null" ] || [ "$privateKey" == "parse error"* ]|| [ ""$publicKey"" == "parse error"* ]
              then
                echo "certificates write or read fail"
                sleep {{ $.Values.healthcheck.readinessthreshold  }}
                if [ "$COUNTER" -ge {{ $.Values.vault.retries }} ]
                then
                  echo "Retry attempted $COUNTER times, certificates have not been saved"
                  exit 1
                fi
                COUNTER=`expr "$COUNTER" + 1`
              fi
          volumeMounts:
            - name: scripts-volume
              mountPath: /scripts/bevel-vault.sh
              subPath: bevel-vault.sh
