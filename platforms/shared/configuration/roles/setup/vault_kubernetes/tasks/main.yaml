##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

#############################################################################################
# This role setups communication between the vault and kubernetes cluster and install 
# neccessary configurations.
#############################################################################################

# Check if namespace created
- name: "Waiting for the namespace {{ component_ns }} to be created"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/k8_component"
  vars:
    component_type: "Namespace"
    component_name: "{{ component_ns }}"
    type: "retry"

###############################################################################################
# This task creates the docker pull credentials for image registry
- name: "Create docker credentials secret"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/create/shared_k8s_secrets"
  vars: 
    namespace: "{{ component_ns }}"    
    check: "docker_credentials"
  when: 
  - network.docker.username is defined

#############################################################################################
# This task creates secrets for the root token
- name: "Create vault token secret"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/create/shared_k8s_secrets"
  vars: 
    namespace: "{{ component_ns }}"    
    check: "token_secret"

# Ensures the build directory
- name: "Creating the build directory"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "{{ playbook_dir }}/build"

#############################################################################################
# This task creates the access policy for various entity
- name: Create policy for Access Control
  vars:  
    name: "{{ component_name }}"
  template:
    src: "{{ policy_templates[policy_type] | default('helm_component.tpl') }}"
    dest: "{{ playbook_dir }}/build/vault-crypto-{{ component_type }}-{{ name }}-ro.hcl"
  changed_when: false
  
#############################################################################################
# This tasks gets the kubernetes server url
- name: Get the kubernetes server url
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " "
  register: kubernetes_server_url
  tags:
  - molecule-idempotence-notest

# This sets a fact values_dir_path
- set_fact:
    values_dir_path: "{{ playbook_dir }}/../../../{{gitops.release_dir}}/{{ name }}"
  when: network.type != "corda" or (network.type == "corda" and item.type == "node")
  
# This sets a fact values_dir_path
- set_fact:
    values_dir_path: "{{ playbook_dir }}/../../../{{gitops.release_dir}}/{{org_name}}/{{ name }}"
  when: network.type == "corda" and item.type != "node"

- name: Unset variables
  set_fact:
    check_clusterRoleBinding:
    check_serviceAccount:

# Check if ClusterRoleBinding created
- name: "Checking for the {{ component_ns }}-role-tokenreview-binding"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/k8_component"
  tags:
    - notest
  vars:
    component_type: "ClusterRoleBinding"
    component_name: "{{ component_ns }}-role-tokenreview-binding"
    type: "no_retry"

- set_fact:
    check_clusterRoleBinding: true
  when: result.resources|length == 0 

- set_fact:
    check_clusterRoleBinding: false
  when: result.resources|length > 0 

# Check if ServiceAccount is created for vault-auth
- name: "Including the check for ServiceAccount vault-auth in {{ component_ns }} "
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/k8_component"
  tags:
    - notest
  vars:
    component_type: "ServiceAccount"
    component_name: "vault-auth"
    type: "no_retry"

- set_fact:
    check_serviceAccount: true
  when: serviceAccount_data.resources|length == 0 

- set_fact:
    check_serviceAccount: false
  when: serviceAccount_data.resources|length > 0 

#####################################################################################################################
# This tasks generate vault_kubernetes helmrelease file
- name: "Create value file for vault_kubernetes"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/create/shared_helm_component"
  vars:  
    type: "vault_k8s_mgmt"
    git_url: "{{ gitops.git_url }}"
    git_branch: "{{ gitops.branch }}"
    charts_dir: "platforms/shared/charts"
    kubernetes_url: "{{ kubernetes_server_url.stdout }}"
    alpine_image: "hyperledgerlabs/alpine-utils:1.0"
    policydata: "{{ lookup('file', '{{ playbook_dir }}/build/vault-crypto-{{ component_type }}-{{ name }}-ro.hcl') }}"
    values_dir: "{{ values_dir_path }}"
    create_serviceAccount: "{{ check_serviceAccount }}"
    create_clusterRoleBinding: "{{ check_clusterRoleBinding }}"

#Git Push : Pushes the above generated files to git directory 
- name: Git Push
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/git_push"
  vars:
    GIT_DIR: "{{ playbook_dir }}/../../../"    
    GIT_RESET_PATH: "{{ reset_path }}"
    msg: "[ci skip] Pushing vault_kubernetes files"
   
# Check if vault_kubernetes is completed
- name: Check if vault_kubernetes job is completed
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
  vars:
    component_type: Job
    namespace: "{{ component_ns }}"
  tags:
  - notest

#############################################################################################
# This task deletes the root token
- name: "Delete vault token secret"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/delete/k8s_secrets"
  vars: 
    namespace: "{{ component_ns }}"    
    check: "token_secret"
