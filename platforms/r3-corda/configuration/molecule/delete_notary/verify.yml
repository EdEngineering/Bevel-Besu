##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---
- name: Verify
  hosts: localhost
  tasks:
  - name: Check if the build directory is created
    stat:
      path: "./build"
    register: build_directory_check

  - name: Assert that the build directory has been created
    assert:
      that: build_directory_check.stat.exists

  - name: Check if network-map-truststore.jks exists
    stat:
      path: "./build/certs/network-map-truststore.jks"
    register: network_map_truststore

  - name: Assert that network-map-truststore.jks exists
    assert:
      that: network_map_truststore.stat.exists

  - name: Check if Ambassador creds are deleted for secret
    k8s_info:
      kind: Secret
      namespace: notaryname
      name: "secret-ambassador-certs"
      kubeconfig: "/tmp/molecule/kind-default/kubeconfig"
      context: "kind"
    register: get_ambassador_secret
    
  - name: Assert that Ambassador creds are deleted for secret
    assert:
      that: get_ambassador_secret.resources|length == 0

  - name: Check if Ambassador creds are deleted for test1
    k8s_info:
      kind: Secret
      namespace: notaryname
      name: "test1-ambassador-certs"
      kubeconfig: "/tmp/molecule/kind-default/kubeconfig"
      context: "kind"
    register: get_ambassador_test1
    
  - name: Assert that Ambassador creds are deleted for test1
    assert:
      that: get_ambassador_test1.resources|length == 0

  - name: Check if the vault path is deleted for cordasecret
    shell: |
      vault auth list --format json | jq "to_entries[] | select(.value.restricted|not) | .key"
    environment:
      VAULT_ADDR: "http://localhost:9090"
      VAULT_TOKEN: "root"
    register: auth_lists_secret

  - name: Assert that the vault path is deleted for cordasecret
    assert:
      that: not auth_lists_secret.stdout is search('cordasecret')

  - name: Check if the vault path is deleted for cordatest1
    shell: |
      vault auth list --format json | jq "to_entries[] | select(.value.restricted|not) | .key"
    environment:
      VAULT_ADDR: "http://localhost:9090"
      VAULT_TOKEN: "root"
    register: auth_lists_test1

  - name: Assert that the vault path is deleted for cordatest1
    assert:
      that: not auth_lists_test1.stdout is search('cordatest1')

  - name: Check if the crypto material are deleted to Vault
    shell: |
      vault kv get -field=ca.testorderer-cert.pem secretsv2/crypto/testcorda
    environment:
      VAULT_ADDR: "http://localhost:9090"
      VAULT_TOKEN: "root"
    register: vault_orderer_CA_cert
    delegate_to: localhost
    ignore_errors: yes

  - name: Assert that the crypto material are deleted 
    assert:
      that: not vault_orderer_CA_cert.stdout

  - name: Check if policy is deleted for secret
    shell: |
      vault policy read vault-crypto-secret-ro
    environment:
      VAULT_ADDR: "http://localhost:9090"
      VAULT_TOKEN: "root"
    register: vault_policy_secret
    ignore_errors: yes

  - name: Assert that the policy is deleted for secret
    assert:
      that: not vault_policy_secret.stdout  
      
  - name: Check if policy is deleted for test1
    shell: |
      vault policy read vault-crypto-test1-ro
    environment:
      VAULT_ADDR: "http://localhost:9090"
      VAULT_TOKEN: "root"
    register: vault_policy_test1
    ignore_errors: yes

  - name: Assert that the policy is deleted for test1
    assert:
      that: not vault_policy_test1.stdout
