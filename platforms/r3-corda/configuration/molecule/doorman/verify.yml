##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---
# This is an example playbook to execute Ansible tests.

- name: Verify
  hosts: localhost
  vars:
    kubeconfig_path: "/tmp/molecule/kind-default/kubeconfig"
    kubecontext: "kind"
    namespace: "test-ns"
    component_name: "doorman"
    tls: "on"                           # on/off based on service.doorman.tls on or off in converge.yml
  tasks:

  #This task checks if access policy for doorman is created or not
  - name: Check if the .hcl is created for doorman or not
    stat:
      path: "./build/vault-crypto-organization-doorman-ro.hcl"
    register: doorman_access_policy
  
  #This task assert if the .hcl exists for doorman
  - name: Assert if the .hcl exists for doorman
    assert:
      that: doorman_access_policy.stat.exists

  # Check if Docker credentials exist
  - name: Check docker cred exists for doorman
    k8s_info:
      kind: Secret
      namespace: "{{ namespace }}"
      name: "regcred"
      kubeconfig: "{{ kubeconfig_path }}"
      context: "{{ kubecontext }}"
    register: get_regcred

  # Assert that secret exists
  - name: Assert for docker cred secret exists for doorman
    assert:
      that: get_regcred.resources|length > 0
 
  #This task checks if root certificates are created or not
  - name: Check if the rootca certificate is created or not
    stat:
      path: "{{ rootca }}/keys.jks"
    vars:
      rootca: "{{playbook_dir}}/build/corda/cordarootca"  
    register: root_certs
  
  #This task assert if the root certificates are created or not
  - name: Assert that the rootca certificate exists
    assert:
      that: root_certs.stat.exists

  #This task checks if doorman certificates are created or not
  - name: Check if the doormanCA certificate is created or not
    stat:
      path: "{{ doormanca }}/keys.jks"
    vars:
      doormanca: "{{playbook_dir}}/build/corda/cordadoormanca"
    register: doormanca_certs
  
  #This task assert if the root certificates are created or not
  - name: Assert that the doormanCA certificate exists
    assert:
      that: doormanca_certs.stat.exists     

  #This task checks if doorman certificates are created or not
  - name: Check if the mongoroot certificate is created or not
    stat:
      path: "{{ mongorootca }}/mongoCA.crt"
    vars:
      mongorootca: "{{playbook_dir}}/build/corda/mongorootca"
    register: mongoroot_certs
    
  
  #This task assert if the root certificates are created or not
  - name: Assert that the mongoroot certificate exists
    assert:
      that: mongoroot_certs.stat.exists
    when: tls == "on"

  #This task checks if mongodb certificates are created or not
  - name: Check if the mongodb certificate is created or not
    stat:
      path: "{{ mongodbca }}/mongodb-{{ component_name }}.pem"
    vars:
      mongodbca: "{{playbook_dir}}/build/corda/mongodbca"
    register: mongodb_certs
  
  #This task assert if the root certificates are created or not
  - name: Assert that the mongodb certificate exists
    assert:
      that: mongodb_certs.stat.exists
    when: tls == "on"


  #This task checks if the openssl.conf for doorman is created or not
  - name: Check if openssl.conf is created or not
    stat:
      path: "./build/openssl{{ component_name }}.conf"
    register: openssl_file_check
  
  #This task assert if the openssl.conf is created or not
  - name: Assert if the openssl.conf is created or not
    assert:
      that: openssl_file_check.stat.exists

  #This task checks if ambassador tls certificates are created or not
  - name: Check if the ambassador tls certificate is created or not
    stat:
      path: "{{ ambassadortls }}/ambassador.crt"
    vars:
      ambassadortls: "{{playbook_dir}}/build/corda/{{ component_name }}/tls"
    register: ambassador_tls_certs
  
  #This task assert if the ambassador tls certificates exists
  - name: Assert that the ambassador tls certificate exists
    assert:
      that: ambassador_tls_certs.stat.exists

  # Check if Docker credentials exist
  - name: Check Ambassador cred exists for doorman
    k8s_info:
      kind: "Secret"
      namespace: "{{ namespace }}"
      name: "{{ component_name }}-ambassador-certs"
      kubeconfig: "{{ kubeconfig_path }}"
      context: "{{ kubecontext }}"
    register: get_ambassador_secret

  # Assert that secret exists
  - name: Assert for Ambassador cred secret exists for doorman
    assert:
      that: get_ambassador_secret.resources|length > 0

  # Check if value file for vault_kubernetes exists or not
  - name: Check if the vault_kubernetes value file exists or not
    stat:
      path: "{{ playbook_dir }}/test/{{ component_name }}/{{ component_name }}/{{ component_type }}.yaml"
    vars:
      component_type: "doorman-vaultk8s-job"
    register: vault_value_check

  # Assert that value file exists
  - name: Assert if the value file for vault_kubernetes exists
    assert:
      that: vault_value_check.stat.exists
    
  # Check if value file for mongodb doorman exists or not
  - name: Check if the mongodb doorman value file exists or not
    stat:
      path: "{{ playbook_dir }}/test/{{ component_name }}/{{ component_type }}.yaml"
    vars:
      component_name: "doormanmongodb"
      component_type: "mongodb"
    register: mongodb_value_check

  # Assert that value file exists
  - name: Assert if the value file for mongodb exists
    assert:
      that: mongodb_value_check.stat.exists

  # Check if value file for doorman exists or not
  - name: Check if the doorman value file exists or not
    stat:
      path: "{{ playbook_dir }}/test/{{ component_name }}/{{ component_type }}.yaml"
    vars:
      component_type: "doorman"
    register: doorman_value_check

  # Assert that value file for doorman exists
  - name: Assert if the value file for doorman exists
    assert:
      that: doorman_value_check.stat.exists      
