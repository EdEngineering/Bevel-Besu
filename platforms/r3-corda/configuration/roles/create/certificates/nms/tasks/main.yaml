##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This role generates certificates for networkmap 
# and places them in vault. Certificates are created using openssl
---
# create the root directory where CA root certificates and key will be placed
- name: Ensure rootca dir exists
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "{{ rootca }}"

- name: Ensure nmsca dir exists
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "{{ nmsca }}"

- name: Ensure mongorootca dir exists
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars: 
    path: "{{ mongorootca }}"
  when: services.nms.tls == 'on'

- name: Ensure mongodbca dir exists
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars: 
    path: "{{ mongodbca }}"
  when: services.nms.tls == 'on'

- name: Check if root certs already created
  shell: |
    vault kv get -field=cacerts {{ component_name }}/certs
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: nms_root_certs
  ignore_errors: yes
  tags:
    - molecule-idempotence-notest

- name: Get all root certs data from Vault
  shell: |
    vault kv get -format=yaml {{ component_name }}/certs
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: nms_root_certs_yaml
  ignore_errors: yes
  tags:
    - molecule-idempotence-notest

- name: Get root certs
  include_role: 
    name: "setup/get_crypto"
  vars:
    vault_output: "{{ nms_root_certs_yaml.stdout | from_yaml }}"
    type: "rootca"
    cert_path: "{{ rootca }}"
  when: nms_root_certs.failed == False
  tags:
    - notest

- name: check root certs
  stat:
    path: "{{ rootca }}/keys.jks"
  register: rootca_stat_result

# generation of CA Root certificates
- name: Generate CAroot certificate
  shell: |
    cd {{ rootca }}
    keytool -genkey -keyalg RSA -alias key -dname {{ root_subject | quote }} -keystore keys.jks -storepass changeme -keypass changeme
    openssl ecparam -name prime256v1 -genkey -noout -out cordarootca.key
    openssl req -x509 -config {{playbook_dir}}/openssl.conf -new -nodes -key cordarootca.key -days 1024 -out cordarootca.pem -extensions v3_ca -subj '/{{ cert_subject }}'
    openssl pkcs12 -export -name cert -inkey cordarootca.key -in cordarootca.pem -out cordarootcacert.pkcs12 -cacerts -passin pass:'changeme' -passout pass:'changeme'
    openssl pkcs12 -export -name key -inkey cordarootca.key -in cordarootca.pem -out cordarootcakey.pkcs12 -passin pass:'changeme' -passout pass:'changeme'
    eval "yes | keytool -importkeystore -srckeystore cordarootcacert.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
    eval "yes | keytool -importkeystore -srckeystore cordarootcakey.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
  when: nms_root_certs.failed == True and rootca_stat_result.stat.exists == False
  tags:
  - molecule-idempotence-notest

- name: Check if networkmap certs already created
  shell: |
    vault kv get -field=networkmap.jks  {{ component_name }}/certs > {{ nmsca }}/tempkeys.jks
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: networkmap_certs
  ignore_errors: yes
  tags:
    - molecule-idempotence-notest

- name: Decode base64
  shell: |    
    cat {{ nmsca }}/tempkeys.jks | base64 -d > {{ nmsca }}/keys.jks
  when: not networkmap_certs.failed
  tags:
    - notest

# creating nms certificates
- name: Generate NMS certificate
  shell: |
    cd {{ nmsca }}
    rm keys.jks
    keytool -genkey -keyalg RSA -alias key -dname {{ nms_subject | quote }} -keystore keys.jks -storepass changeme -keypass changeme
    openssl ecparam -name prime256v1 -genkey -noout -out cordanetworkmap.key
    openssl req -new -nodes -key cordanetworkmap.key -days 1000 -out cordanetworkmap.csr -subj '/{{ nms_cert_subject }}'
    openssl x509  -req -days 1000 -in cordanetworkmap.csr -CA {{ rootca }}/cordarootca.pem -CAkey {{ rootca }}/cordarootca.key -out cordanetworkmap.pem -CAcreateserial -CAserial serial -extfile {{playbook_dir}}/openssl.conf -extensions networkMap
    openssl pkcs12 -export -name cert -inkey cordanetworkmap.key -in cordanetworkmap.pem -out cordanetworkmapcacert.pkcs12 -cacerts -passin pass:'changeme' -passout pass:'changeme'
    openssl pkcs12 -export -name key -inkey cordanetworkmap.key   -in cordanetworkmap.pem -out cordanetworkmapcakey.pkcs12 -passin pass:'changeme' -passout pass:'changeme'
    eval "yes | keytool -importkeystore -srckeystore cordanetworkmapcacert.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
    eval "yes | keytool -importkeystore -srckeystore cordanetworkmapcakey.pkcs12 -srcstoretype PKCS12 -srcstorepass changeme -destkeystore keys.jks -deststorepass changeme"
  when: networkmap_certs.failed == True
  tags:
    - molecule-idempotence-notest

# checking root certificates for mongodb
- name: Check if mongoroot certs already created
  shell: |
    vault kv get -field=mongoCA.crt  {{ component_name }}/certs > {{ mongorootca }}/tempmongoCA.crt
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: mongoCA_certs
  ignore_errors: yes
  when: services.nms.tls == 'on'
  tags:
    - molecule-idempotence-notest

- name: Decode base64
  shell: |    
    cat {{ mongorootca }}/tempmongoCA.crt | base64 -d > {{ mongorootca }}/mongoCA.crt
  when: not mongoCA_certs.failed
  tags:
    - notest

- name: check mongoroot certs
  stat:
    path: "{{ mongorootca }}/mongoCA.crt"
  register: mongoCA_stat_result
  when: services.nms.tls == 'on'

# Generating mongoroot certificates
- name: Generating Mongoroot certificates
  shell: |
    cd {{ mongorootca }}
    openssl genrsa -out mongoCA.key 3072
    openssl req -x509 -config {{playbook_dir}}/openssl.conf -new -extensions v3_ca -key mongoCA.key -days 365 -out mongoCA.crt -subj '{{ mongoroot_cert_subj }}'
  when: services.nms.tls == 'on' and mongoCA_stat_result.stat.exists == False and mongoCA_certs.failed == True
  tags:
  - molecule-idempotence-notest

# checking if mongodb certificate already created
- name: Check if mongodb certs already created
  shell: |
    vault kv get -field=mongodb-{{component_name}}.pem  {{ component_name }}/certs > {{ mongodbca }}/tempmongodb-{{component_name}}.pem
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: mongodb_certs
  ignore_errors: yes
  when: services.nms.tls == 'on'
  tags:
    - molecule-idempotence-notest

- name: Decode base64
  shell: |    
    cat {{ mongodbca }}/tempmongodb-{{component_name}}.pem | base64 -d > {{ mongodbca }}/mongodb-{{component_name}}.pem
  when: not mongodb_certs.failed
  tags:
    - notest

# Generating mongodb certificates.
- name: Generating mongodb certificates
  shell: |
    cd {{ mongodbca }}
    openssl req -new -nodes -newkey rsa:4096 -keyout mongodb-{{ component_name}}.key -out mongodb-{{ component_name }}.csr -subj '{{ mongoroot_cert_subj }}-{{component_name}}' 
    openssl x509 -CA {{ mongorootca }}/mongoCA.crt -CAkey {{ mongorootca }}/mongoCA.key -CAcreateserial -CAserial serial -req -days 365 -in mongodb-{{component_name}}.csr -out mongodb-{{component_name}}.crt
    cat mongodb-{{ component_name }}.key mongodb-{{ component_name}}.crt > mongodb-{{ component_name }}.pem
  when: services.nms.tls == 'on' and mongodb_certs.failed == True
  tags:
    - molecule-idempotence-notest

- name: Putting certs to vault for root
  shell: |
    vault kv put {{ component_name }}/certs rootcakey="$(cat {{ rootca }}/keys.jks | base64)" cacerts="$(cat {{ rootca }}/cordarootca.pem | base64)" keystore="$(cat {{ rootca }}/cordarootca.key | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: nms_root_certs.failed == True
  tags:
    - molecule-idempotence-notest

- name: Putting certs and credential to vault for networkmap
  shell: |
    vault kv put {{ component_name }}/credentials/mongodb  mongodbPassword="{{ mongodbPassword_networkmap }}"
    vault kv put {{ component_name }}/credentials/userpassword  sa="{{ userpassword_networkmap }}"
    vault kv put {{ component_name }}/certs networkmap.jks="$(cat {{ nmsca }}/keys.jks | base64)" rootcakey="$(cat {{ rootca }}/keys.jks | base64)" cacerts="$(cat {{ rootca }}/cordarootca.pem | base64)" keystore="$(cat {{ rootca }}/cordarootca.key | base64)" mongodb-{{ component_name }}.pem="$(cat {{ mongodbca }}/mongodb-{{ component_name }}.pem | base64)" mongoCA.crt="$(cat {{ mongorootca }}/mongoCA.crt | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: networkmap_certs.failed == True
  tags:  
    - molecule-idempotence-notest


- name: Create Ambassador certificates
  include_role: 
    name: "create/certificates/ambassador"
  vars:
    cert_file: "{{ network | json_query('network_services[?type==`networkmap`].certificate') | first }}"
  when: network.env.proxy == 'ambassador'
