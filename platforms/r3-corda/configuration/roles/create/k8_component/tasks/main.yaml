##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

################################################################################################
# This role creates deployment files for network-map, doorman, mongodb, namespace,
# storageclass, service accounts and clusterrolebinding
# Deployment file for a node is created in a directory with name=nodeName
# nodeName is stored in component_name
# component_type specifies the type of deployment to be created
################################################################################################

---
# This sets a fact values_dir_path
- set_fact:
    release_dir_path: "{{ release_dir }}/{{ component_name }}"
  when: component_type == "namespace"
 
# This sets a fact values_dir_path
- set_fact:
    release_dir_path: "{{ release_dir }}/{{ org_name }}/{{ component_name }}"
  when: component_type != "namespace"

# Task to check if values file are already created or not
- stat: 
    path: "{{ release_dir_path }}/{{ component_type }}.yaml"
  register: value_file_exist

# Task to create and/or check if the target directory exists
- name: "Ensures {{ release_dir_path }} dir exists"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "{{ release_dir_path }}"
  when: not value_file_exist.stat.exists
  

# Task to create deployment file from a template
- name: "create {{ component_type }} file for {{ component_name }}"
  template:
    src: "{{ dlt_templates[component_type] }}"
    dest: "{{ values_file }}"
  vars:
    values_file: "{{ release_dir_path }}/{{ component_type }}.yaml"
  when: not value_file_exist.stat.exists

################################################################################################
# This task tests the value file for syntax errors/ missing values
# This is done by calling the helm_lint role and passing the value file parameter
# When a new k8_component is added, changes should be made in helm_lint role as well
- name: "Helm lint"
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/helm_lint"
  vars:
    helmtemplate_type: "{{ component_type }}"
    chart_path: "{{ charts_dir }}"
    value_file: "{{ release_dir_path }}/{{ helmtemplate_type }}.yaml"
  when: helm_lint=="true" and (not value_file_exist.stat.exists)
