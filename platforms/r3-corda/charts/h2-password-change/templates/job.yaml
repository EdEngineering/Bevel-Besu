##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: h2-pass-change-{{ .Values.nodeName }}
  labels:
    app: h2-pass-change-{{ .Values.nodeName }}
    app.kubernetes.io/name: h2-pass-change-{{ .Values.nodeName }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}  
spec:
  backoffLimit: 6
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        app: h2-pass-change-{{ .Values.nodeName }}
        app.kubernetes.io/name: h2-pass-change-{{ .Values.nodeName }}
        app.kubernetes.io/instance: {{ .Release.Name }} 
    spec:
      restartPolicy: "OnFailure"
      serviceAccountName: {{ .Values.vault.serviceaccountname }}
      containers:
      - name: h2-pass-change
        image: {{ .Values.image.containerName }}
        imagePullPolicy: Always
        env:
           - name: MOUNT_PATH
             value: /opt/h2
           - name: SECRET_PREFIX
             value: {{ .Values.vault.dbsecretprefix }}
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh           
          export SA_PASSWORD=`cat /opt/db/creds/db_cred`
          cat << EOF > ${MOUNT_PATH}/changepass.sql
          ALTER USER SA SET PASSWORD '${SA_PASSWORD}';
          EOF

          chmod 777 ${MOUNT_PATH}/changepass.sql
          H2JARPATH=${MOUNT_PATH}/bin/h2*.jar
          H2SCRIPTCLASSPATH=org.h2.tools.RunScript

          java -cp ${H2JARPATH} ${H2SCRIPTCLASSPATH} -url {{ .Values.jdbcUrl }} -user sa -script ${MOUNT_PATH}/changepass.sql
          echo "Password for SA changed"
        volumeMounts:
        - name: {{ .Values.nodeName }}volume
          mountPath: "/opt/h2-data"
        - name: creds
          mountPath: "/opt/db/creds"
          readOnly: false
      initContainers:
      - name: init-credential
        image: {{ .Values.image.initContainerName }}
        imagePullPolicy: Always
        env:
          - name: VAULT_ADDR
            value: {{.Values.vault.address}}
          - name: KUBERNETES_AUTH_PATH
            value: {{.Values.vault.authpath}}
          - name: VAULT_APP_ROLE
            value: {{.Values.vault.role}}
          - name: MOUNT_PATH
            value: /opt/db/creds
          - name: VAULT_NODE_NAME
            value: {{ .Values.nodeName }}
          - name: DB_SECRET_PREFIX
            value: {{ .Values.vault.dbsecretprefix }}
        command: ["sh", "-c"]
        args:
        - |-
             #!/usr/bin/env sh
              validateVaultResponse () {
                if echo ${2} | grep "errors"; then
                  echo "ERROR: unable to retrieve ${1}: ${2}"
                  exit 1
                fi
                if  [ "$3" == "LOOKUPSECRETRESPONSE" ]
                then
                  http_code=$(curl -sS -o /dev/null -w "%{http_code}" \
                  --header "X-Vault-Token: ${VAULT_TOKEN}" \
                  ${VAULT_ADDR}/v1/${1})
                  curl_response=$?
                  if test "$http_code" != "200" ; then
                      echo "Http response code from Vault - $http_code"
                      if test "$curl_response" != "0"; then
                        echo "Error: curl command failed with error code - $curl_response"
                        exit 1
                      fi
                  fi
                fi
              }
             KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
             VAULT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login -H "Content-Type: application/json" -d '{"role":"'"${VAULT_APP_ROLE}"'","jwt":"'"${KUBE_SA_TOKEN}"'"}' | jq -r 'if .errors then . else .auth.client_token end')          
             validateVaultResponse 'vault login token' "${VAULT_TOKEN}"
             
             LOOKUP_PWD_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_TOKEN}" ${VAULT_ADDR}/v1/${DB_SECRET_PREFIX} | jq -r 'if .errors then . else . end')
             validateVaultResponse "${DB_SECRET_PREFIX}" "${LOOKUP_PWD_RESPONSE}" "LOOKUPSECRETRESPONSE"
             SA_PASSWORD=$(echo ${LOOKUP_PWD_RESPONSE} | jq -r '.data.data["sa"]')            
             echo "${SA_PASSWORD}" >> ${MOUNT_PATH}/db_cred
        volumeMounts:
        - name: creds
          mountPath: "/opt/db/creds"
          readOnly: false
      - name: db-healthcheck
        image: {{ .Values.image.initContainerName }}
        imagePullPolicy: Always
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          COUNTER=1
          FLAG=true                   
          while [ "$COUNTER" -le {{ $.Values.db.readinessthreshold }} ]
          do
            DB_NODE={{ .Values.dbUrl }}:{{ .Values.dbPort }}
            STATUS=$(nc -vz $DB_NODE 2>&1 | grep -c open )
            if [ "$STATUS" == 0 ]
            then
              FLAG=false
            else
              FLAG=true                
              echo "DB up and running"
            fi   
            if [ "$FLAG" == false ]
            then                
              echo "Retry attempted $COUNTER times, retrying after {{ $.Values.db.readinesscheckinterval }} seconds"
              COUNTER=`expr "$COUNTER" + 1`
              sleep {{ $.Values.db.readinesscheckinterval }}
            else
              echo "SUCCESS!"
              echo "DB up and running!"
              exit 0
              break
            fi   
          done
          if [ "$COUNTER" -gt {{ $.Values.db.readinessthreshold }} ] || [ "$FLAG" == false ] 
          then
            echo "Retry attempted $COUNTER times, no DB up and running. Giving up!"
            exit 1
            break
          fi
      imagePullSecrets:
        - name: {{ .Values.image.imagePullSecret }}
      volumes:
        - name: {{ .Values.nodeName }}volume
          persistentVolumeClaim:
            claimName: {{ .Values.nodeName }}db-pvc
        - name: creds
          emptyDir:
          medium: Memory  